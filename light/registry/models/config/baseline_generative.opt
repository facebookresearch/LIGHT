@classmethod
def load_dialog_model(
    cls,
    parser,
    dialog_model_path,
):
    """
    Load up the dialog model for use with this class
    """
    # Model args if no reranking
    # dialog_args = [
    #     "-dt",
    #     "valid",
    #     "--inference",
    #     "beam",
    #     "--beam-context-block-ngram",
    #     "3",
    #     "--beam-block-ngram",
    #     "3",
    #     "--beam-size",
    #     "10",
    #     "--beam-min-length",
    #     "20",
    #     "-m",
    #     "transformer/generator",
    #     "-mf",
    #     dialog_model_path,
    # ]

    # Reranker args
    dialog_args = [
        "-m",
        "internal:light_whoami/generative_rerank",
        "--predictor-model-file",
        # "/home/ubuntu/data/models/rerank/model",
        "/checkpoint/kshuster/projects/continual_learning/light_whoami/whoami_sweep3b_Tue_Oct_13/943/model",
        "--inference",
        "delayedbeam",
        "-dt",
        "valid",
        "--beam-context-block-ngram",
        "3",
        "--beam-block-ngram",
        "3",
        "--beam-size",
        "10",
        "--beam-min-length",
        "20",
        "-mf",
        dialog_model_path,
    ]
    dialog_opt = parser.parse_args(args=dialog_args)
    dialog_opt["interactive_mode"] = True
    dialog_opt["override"] = {
        "inference": "beam",
        "beam_context_block_ngram": 3,
        "beam_size": 2,
        "beam_min_length": 20,
    }
    # dialog_opt['override']['inference'] = 'topk'
    # dialog_opt['override']['topk'] = 40
    return create_agent(dialog_opt, requireModelExists=True)

@classmethod
def load_models(
    cls,
    dialog_model_path,
    act_model_path=None,
    ):
        """
        Load up and create possible shared models for use with this class
        """
        # TODO refactor with some kind of model-loading standard for model souls?
        from parlai.core.params import ParlaiParser
        from parlai.core.agents import create_agent

        parser = ParlaiParser(True, True, "")

        dialog_model = cls.load_dialog_model(
            parser,
            dialog_model_path,
        )

        if act_model_path is not None:
            # Load action model
            args = [
                "-mf",
                act_model_path,
                "-ecands",
                "inline",
                "--ignore-bad-candidates",
                "True",
            ]
            act_opt, _unknown = parser.parse_and_process_known_args(args=args)

            act_opt["override"] = {
                "eval_candidates": "inline",
                "ignore_bad_candidates": "True",
            }
            act_opt["interactive_mode"] = True
            act_opt["ignore_bad_candidates"] = True
            action_model = create_agent(act_opt, requireModelExists=True)
            action_model_share = action_model.share()
        else:
            action_model_share = None

        return {
            "shared_dialog_model": dialog_model.share(),
            "shared_action_model": action_model_share,
        }
