{"version":3,"sources":["useWSDataSource.js","Logo.js","LoadingScreen.js","config.js","index.js","utils.js"],"names":["reducer","state","msg","updatedState","concat","Object","toConsumableArray","console","groupCollapsed","length","table","groupEnd","Logo","react_default","a","createElement","className","alt","src","LoadingScreen","_React$useState","React","useState","_React$useState2","slicedToArray","isTimedOut","setTimedOut","useEffect","timer","setTimeout","TIMEOUT_SECONDS","clearTimeout","style","height","width","display","alignItems","justifyContent","flexDirection","fontSize","marginTop","fontStyle","DEV","host","hostname","port","createWebSocketUrlFromBrowserUrl","url","wsProtocol","protocol","optionalServerHost","URL","searchParams","get","optionalGameId","log","CONFIG","getDataModelAddress","window","location","Setting","props","clear","overflow","text","split","map","para","idx","key","Message","_ref","caller","actor","isSelf","onReply","isEditMode","setEditMode","classNames","includes","Fragment","onClick","opacity","pointerEvents","defaultValue","type","react_tippy","title","position","Entry","_ref2","agents","selfId","undefined","actors","node_id","is_self","Chat","_ref3","messages","onSubmit","persona","_React$useState3","_React$useState4","enteredText","setEnteredText","chatContainerRef","useRef","getEntityId","agent","match","dataModelHost","scrollToBottom","useCallback","current","scrollTop","scrollHeight","presentAgents","valid_messages","filter","m","lastMessage","currentRoom","room_id","keys","present_agent_ids","getLocationState","_React$useState5","_React$useState6","showEmojiPicker","setShowEmojiPicker","_React$useState7","_React$useState8","selectedEmoji","setSelectedEmoji","chatInputRef","useLayoutEffect","focus","name","skipWords","tryPickEmojis","token","replace","word","indexOf","toLowerCase","flatMap","term","emojiIndex","search","o","native","autopickedEmoji","setTextTellAgent","message","elem","caretPos","createTextRange","range","move","select","selectionStart","setSelectionRange","setCaretPosition","cx","editing","cursor","role","aria-label","top","left","transform","zIndex","BlurClosingPicker","autoFocus","onBlur","onSelect","emoji","description","bottom","right","href","id","rel","target","aria-hidden","ref","e","preventDefault","value","onChange","onKeyPress","shiftKey","prefix","startsWith","suffix","endsWith","placeholder","float","agentName","getAgentName","agentId","backgroundColor","borderRadius","padding","marginRight","fadeShow","action","EmojiPicker","_ref4","objectWithoutProperties","handleClickOutside","dist_es","onClickOutside","rootElement","document","getElementById","ReactDOM","render","_useWSDataSource","websocket","isConnected","setConnected","isErrored","setErrored","_React$useReducer","useReducer","_React$useReducer2","appendMessage","setPersona","setLocation","_React$useState9","_React$useState10","setAgents","handleMessage","cmd","JSON","parse","data","command","buffer","forEach","isPersonaDescription","isLocationDescription","room","desc","push","onmessage","submitMessage","txt","stringify","send","WebSocket","onopen","onerror","onclose","useWSDataSource","useMemo","textAlign","src_LoadingScreen"],"mappings":"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","file":"static/js/main.8b73ff75.chunk.js","sourcesContent":["import React from \"react\";\nimport { zipToObject } from \"./utils\";\n\nconst reducer = (state, msg) => {\n  const updatedState = [...state, msg];\n  console.groupCollapsed(\"New message. Total: \" + updatedState.length);\n  console.table(updatedState);\n  console.groupEnd();\n  return updatedState;\n};\n\nexport function useWSDataSource(url) {\n  const websocket = React.useRef();\n  const [isConnected, setConnected] = React.useState(false);\n  const [isErrored, setErrored] = React.useState(false);\n  const [messages, appendMessage] = React.useReducer(reducer, []);\n  const [persona, setPersona] = React.useState(null);\n  const [location, setLocation] = React.useState(null);\n  const [agents, setAgents] = React.useState({});\n\n  const handleMessage = React.useCallback(\n    msg => {\n      const cmd = JSON.parse(msg.data);\n      if (cmd.command === \"actions\") {\n        const buffer = [];\n\n        cmd.data.forEach(action => {\n          const isRespawn = false; /* action.text.startsWith(\n            \"Your lost soul attempts to join the living...\"\n          );*/\n          const isPersonaDescription = action.caller === \"SoulSpawnEvent\";\n          // How to fix persona, now that we do not get spawn events?\n          const isLocationDescription = action.caller === \"LookEvent\";\n          action.room = JSON.parse(action.room)\n          action.actor = JSON.parse(action.actor)\n          setAgents(\n              action.present_agent_ids\n          );\n          if (isPersonaDescription){\n            setPersona({\n              name: action.actor.name,\n              description: action.actor.persona,\n              id: action.actor.node_id\n            });           \n            if (isRespawn) {\t\n              buffer.push(action);\t\n            }\t\n          } \n          if (isLocationDescription) {\n            setLocation({\n              name: action.room.name,\n              description:\n                action.room.desc +\n                \"\\n\" +\n                \"You notice: \" +\n                \"TODO add examine stuff here\" + \n                \".\",\n              id: action.room.node_id\n            });\n            buffer.push(action);\n          } else {\n            buffer.push(action);\n          }\n\n          buffer.forEach(msg => appendMessage(msg));\n        });\n      }\n    },\n    [appendMessage, setPersona, setAgents, setLocation]\n  );\n\n  React.useEffect(() => {\n    websocket.current.onmessage = handleMessage;\n  }, [handleMessage]);\n\n  const submitMessage = React.useCallback(\n    txt => {\n      appendMessage({\n        caller: \"say\",\n        text: txt,\n        is_self: true,\n        actors: [persona.id]\n      });\n\n      const msg = JSON.stringify({ command: \"act\", data: txt });\n      return websocket.current.send(msg);\n    },\n    [websocket, appendMessage, persona]\n  );\n\n  if (!websocket.current) {\n    websocket.current = new WebSocket(url);\n\n    // websocket.current.onmessage = handleMessage;\n\n    websocket.current.onopen = () => {\n      console.log(\"opened\");\n      setConnected(true);\n    };\n\n    websocket.current.onerror = websocket.current.onclose = () => {\n      console.log(\"errored\");\n      setConnected(false);\n      setErrored(true);\n      websocket.current = null;\n    };\n  }\n\n  return {\n    isConnected,\n    messages,\n    submitMessage,\n    persona,\n    location,\n    isErrored,\n    agents\n  };\n}\n","import React from \"react\";\n\nexport default function Logo() {\n  return (\n    <div className=\"header\">\n      <img alt=\"logo\" src=\"/scribe.png\" />\n      <div>\n        <h1>LIGHT</h1>\n        <span>Learning in Interactive Games with Humans and Text</span>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Logo from \"./Logo\";\n\nfunction LoadingScreen() {\n  const [isTimedOut, setTimedOut] = React.useState(false);\n  const TIMEOUT_SECONDS = 10;\n\n  React.useEffect(() => {\n    if (!isTimedOut) {\n      const timer = setTimeout(() => {\n        setTimedOut(true);\n      }, TIMEOUT_SECONDS * 1000);\n      return () => clearTimeout(timer);\n    }\n  }, [isTimedOut, setTimedOut]);\n\n  return (\n    <div\n      style={{\n        height: \"100vh\",\n        width: \"100vw\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        flexDirection: \"column\"\n      }}\n    >\n      <div style={{ width: 500 }}>\n        <div style={{ width: 300 }}>\n          <Logo />\n        </div>\n        <div style={{ fontSize: 20, marginTop: 50, fontStyle: \"italic\" }}>\n          {isTimedOut ? (\n            <span>\n              It's been {TIMEOUT_SECONDS} seconds, there's likely a server\n              issue.\n            </span>\n          ) : (\n            <span>Hang tight. You are entering a new world...</span>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default LoadingScreen;\n","const DEV = {\n  host: \"http://localhost\",\n  hostname: \"localhost\",\n  port: \"35494\",\n};\n\nexport default DEV;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles.css\";\nimport \"react-tippy/dist/tippy.css\";\nimport \"emoji-mart/css/emoji-mart.css\";\n\nimport { Tooltip } from \"react-tippy\";\nimport { Picker, emojiIndex } from \"emoji-mart\";\nimport cx from \"classnames\";\nimport onClickOutside from \"react-onclickoutside\";\n\nimport { useWSDataSource } from \"./useWSDataSource\";\nimport Logo from \"./Logo\";\nimport LoadingScreen from \"./LoadingScreen\";\n\nimport { setCaretPosition } from \"./utils\";\n\nimport CONFIG from \"./config\";\n\nconst createWebSocketUrlFromBrowserUrl = (url) => {\n  const wsProtocol = url.protocol === \"https:\" ? \"wss\" : \"ws\";\n  const optionalServerHost = new URL(url).searchParams.get(\"server\");\n  var optionalGameId = new URL(url).searchParams.get(\"id\");\n  if (!optionalGameId){\n    optionalGameId = \"\";\n  }\n  if (optionalServerHost) {\n    console.log(\"Using user-provided server hostname:\", optionalServerHost);\n  }\n  const websocketURL =\n    wsProtocol + \"://\" + (optionalServerHost || CONFIG.hostname) + \":\" + CONFIG.port + `/game${optionalGameId}/socket`;\n  return websocketURL;\n};\n\nconst getDataModelAddress = () => {\n  return new URL(window.location).searchParams.get(\"builder\");\n};\n\n// TODO: consider showing different agent's dialogues in\n// different colors\n//\n// const colors = [\n//   \"#edfff1\", //green,\n//   \"#fffded\", //yellow,\n//   \"#eee8ff\", // purple\n//   \"#e6efff\", //blue\n//   \"#ffe8eb\" //red\n// ];\n\nfunction Setting(props) {\n  return (\n    <div style={{ clear: \"both\", overflow: \"auto\" }}>\n      <div className=\"message type-setting\">\n        {props.text.split(\"\\n\").map((para, idx) => (\n          <p key={idx}>{para}</p>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nfunction Message({ text, caller, actor, isSelf, onReply }) {\n  const [isEditMode, setEditMode] = React.useState(false);\n\n  let classNames = \"message type-dialogue \";\n  if ([\"tell\", \"say\", \"whisper\"].includes(caller)) {\n    text = \"&ldquo;\" + text + \"&rdquo;\";\n    classNames = \"message type-dialogue \";\n  }\n  classNames += isSelf ? \"me\" : \"other\";\n\n  if (isEditMode) {\n    return (\n      <div className={classNames}>\n        <div className=\"agent\">\n          <span>{actor}</span>\n          {isSelf ? null : (\n            <React.Fragment>\n              <i className=\"fa fa-reply\" onClick={() => onReply(actor)} />{\" \"}\n              <i\n                className=\"fa fa-commenting-o \"\n                onClick={() => setEditMode(true)}\n              />\n            </React.Fragment>\n          )}\n        </div>\n        <div style={{ opacity: 0, height: 1, pointerEvents: \"none\" }}>\n          {text}\n        </div>\n        <input className=\"edit-message\" defaultValue={text} />\n        <button type=\"submit\" onClick={() => setEditMode(false)}>\n          Suggest edit\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className={classNames}>\n      <div className=\"agent\">\n        <span>{actor}</span>\n        {isSelf ? null : (\n          <React.Fragment>\n            <Tooltip title={`tell ${actor}...`} position=\"top\">\n              <i className=\"fa fa-reply\" onClick={() => onReply(actor)} />\n            </Tooltip>{\" \"}\n            <Tooltip\n              title={`Do you think something else should have been said instead? Provide feedback via an edit...`}\n              position=\"top\"\n            >\n              <i\n                className=\"fa fa-commenting-o \"\n                onClick={() => setEditMode(true)}\n              />\n            </Tooltip>\n          </React.Fragment>\n        )}\n      </div>\n      {text}\n    </div>\n  );\n}\n\nfunction Entry({ msg, onReply, agents, selfId }) {\n  if ([\"LookEvent\", \"GoEvent\", \"ExamineEvent\", \"ErrorEvent\", \"HelpEvent\", \"text\"].includes(msg.caller) || msg.caller === null) {\n    return <Setting text={msg.text} />;\n  } else {\n    var actor = \"\"\n    if (msg.actors == undefined){\n      actor = msg.actor.node_id;\n    }else{\n      actor = msg.actors[0];\n    }\n    return (\n      <Message\n        text={msg.text}\n        isSelf={msg.is_self || actor === selfId}\n        actor={agents[actor]}\n        onReply={onReply}\n      />\n    );\n  }\n}\n\nfunction ConnectedApp() {\n  const wsUrl = React.useMemo(\n    () => createWebSocketUrlFromBrowserUrl(window.location),\n    []\n  );\n  const {\n    isErrored,\n    messages,\n    submitMessage,\n    persona,\n    location,\n    agents\n  } = useWSDataSource(wsUrl);\n\n  if (isErrored)\n    return (\n      <div style={{ textAlign: \"center\", marginTop: 30, fontSize: 30 }}>\n        Could not connect to the server.\n      </div>\n    );\n\n  if (messages.length === 0) {\n    return <LoadingScreen />;\n  }\n\n  return (\n    <Chat\n      messages={messages}\n      onSubmit={submitMessage}\n      persona={persona}\n      location={location}\n      agents={agents}\n    />\n  );\n}\nfunction Chat({ messages, onSubmit, persona, location, agents }) {\n  const [enteredText, setEnteredText] = React.useState(\"\");\n  const chatContainerRef = React.useRef(null);\n  const getAgentName = agent => (agents ? agents[agent] : agent);\n  const getEntityId = agent => agent.match(/\\d+$/)[0];\n  const dataModelHost = getDataModelAddress();\n\n  const scrollToBottom = React.useCallback(\n    () =>\n      setTimeout(() => {\n        if (chatContainerRef.current)\n          chatContainerRef.current.scrollTop =\n            chatContainerRef.current.scrollHeight;\n      }, 0),\n    [chatContainerRef]\n  );\n\n  React.useEffect(() => {\n    scrollToBottom();\n  }, [scrollToBottom, messages]);\n\n  const defaultEmoji = \"❓\";\n  const { presentAgents } = getLocationState(messages);\n  const [showEmojiPicker, setShowEmojiPicker] = React.useState(false);\n  const [selectedEmoji, setSelectedEmoji] = React.useState(defaultEmoji);\n\n  const chatInputRef = React.useRef();\n  React.useLayoutEffect(() => {\n    chatInputRef.current.focus();\n  }, []);\n\n  React.useEffect(() => {\n    if (persona === null || persona.name === null) return;\n    const skipWords = [\"a\", \"the\", \"an\", \"of\", \"with\", \"holding\"];\n    const tryPickEmojis = !persona\n      ? []\n      : persona.name\n          .split(\" \")\n          .filter(token => !!token)\n          .map(token => token.replace(/\\.$/, \"\"))\n          .filter(word => skipWords.indexOf(word.toLowerCase()) === -1)\n          .flatMap(term =>\n            emojiIndex.search(term).map(o => {\n              return o.native;\n            })\n          );\n\n    const autopickedEmoji =\n      tryPickEmojis.length > 0 ? tryPickEmojis[0] : defaultEmoji;\n    setSelectedEmoji(autopickedEmoji);\n  }, [persona, setSelectedEmoji]);\n\n  const setTextTellAgent = React.useCallback(\n    agent => {\n      const message = `tell ${agent} \"\"`;\n      setEnteredText(message);\n      setTimeout(\n        () => setCaretPosition(chatInputRef.current, message.length - 1),\n        0 /* 0s timeout to schedule this task to occur after the layout is updated */\n      );\n    },\n    [setEnteredText, chatInputRef]\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <Logo />\n        <div className=\"game-state\">\n          {persona ? (\n            <div className=\"persona\">\n              <div\n                className={cx(\"icon\", { editing: showEmojiPicker })}\n                style={{ cursor: \"pointer\" }}\n              >\n                <div className=\"overlay\">edit</div>\n                <span\n                  role=\"img\"\n                  aria-label=\"avatar\"\n                  onClick={() => setShowEmojiPicker(true)}\n                >\n                  {selectedEmoji}\n                </span>\n                {showEmojiPicker ? (\n                  <div\n                    style={{\n                      position: \"absolute\",\n                      top: \"80px\",\n                      left: \"50%\",\n                      transform: \"translateX(-50%)\",\n                      zIndex: 999\n                    }}\n                  >\n                    <BlurClosingPicker\n                      autoFocus={true}\n                      onBlur={() => setShowEmojiPicker(false)}\n                      onSelect={emoji => {\n                        // TODO: Send the selected emoji to the back-end so we can keep record it\n                        setSelectedEmoji(emoji.native);\n                        setShowEmojiPicker(false);\n                      }}\n                    />\n                  </div>\n                ) : null}\n              </div>\n              <h3>You are {persona.name}</h3>\n              {persona.description}\n              {dataModelHost && (\n                <Tooltip\n                  style={{ position: \"absolute\", bottom: 0, right: 5 }}\n                  title={`suggest changes for ${persona.name}`}\n                  position=\"bottom\"\n                >\n                  <a\n                    className=\"data-model-deep-link\"\n                    href={`${dataModelHost}/edit/${getEntityId(persona.id)}`}\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\"\n                  >\n                    <i className=\"fa fa-edit\" aria-hidden=\"true\" />\n                  </a>\n                </Tooltip>\n              )}\n            </div>\n          ) : null}\n          {location ? (\n            <div className=\"location\">\n              <h3>{location.name}</h3>\n              {location.description.split(\"\\n\").map((para, idx) => (\n                <p key={idx}>{para}</p>\n              ))}\n              {dataModelHost && (\n                <Tooltip\n                  style={{ position: \"absolute\", bottom: 0, right: 5 }}\n                  title={`suggest changes for ${\n                    location.name.split(\" the \")[1]\n                  }`}\n                  position=\"bottom\"\n                >\n                  <a\n                    className=\"data-model-deep-link\"\n                    href={`${dataModelHost}/edit/${getEntityId(location.id)}`}\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\"\n                  >\n                    <i className=\"fa fa-edit\" aria-hidden=\"true\" />\n                  </a>\n                </Tooltip>\n              )}\n            </div>\n          ) : null}\n        </div>\n        {/* <Map /> */}\n        {/* <div className=\"app-controls\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={isAdminMode}\n              onChange={e => setAdminMode(!isAdminMode)}\n            />{\" \"}\n            Admin Mode\n          </label>\n        </div> */}\n      </div>\n      <div className=\"chat-wrapper\">\n        <div className=\"chat\" ref={chatContainerRef}>\n          <div className=\"chatlog\">\n            {messages.map((msg, idx) => (\n              <Entry\n                key={idx}\n                msg={msg}\n                agents={agents}\n                onReply={agent => setTextTellAgent(agent)}\n                selfId={persona.id}\n              />\n            ))}\n          </div>\n        </div>\n        <div className=\"controls\">\n          <form\n            style={{ display: \"flex\" }}\n            onSubmit={e => {\n              e.preventDefault();\n\n              if (!!enteredText) {\n                onSubmit(enteredText);\n                setEnteredText(\"\");\n                scrollToBottom();\n              }\n            }}\n          >\n            <input\n              ref={chatInputRef}\n              value={enteredText}\n              onChange={e => setEnteredText(e.target.value)}\n              onKeyPress={e => {\n                if (e.key === \"Enter\" && e.shiftKey) {\n                  const prefix = e.target.value.startsWith('\"') ? \"\" : '\"';\n                  const suffix = e.target.value.endsWith('\"') ? \"\" : '\"';\n                  setEnteredText(prefix + e.target.value + suffix);\n                }\n              }}\n              className=\"chatbox\"\n              placeholder=\"Enter text to interact with the world here...\"\n            />\n          </form>\n          <div className=\"actions\">\n            <div style={{ float: \"left\" }}>\n              {/* {location ? <span>{location.name} &mdash; </span> : null} */}\n              {presentAgents\n                .filter(id => id !== persona.id) // only show users other than self\n                .map(agent => {\n                  const agentName = getAgentName(agent);\n                  const agentId = getEntityId(agent);\n                  return (\n                    <span\n                      key={agentName}\n                      style={{\n                        backgroundColor: \"#eee\",\n                        borderRadius: 3,\n                        padding: \"1px 3px\",\n                        marginRight: 5\n                      }}\n                    >\n                      <span\n                        onClick={() => {\n                          setTextTellAgent(agentName);\n                        }}\n                      >\n                        {agentName}{\" \"}\n                        <Tooltip\n                          title={`tell ${agentName}...`}\n                          position=\"bottom\"\n                        >\n                          <i className=\"fa fa-comment-o\" aria-hidden=\"true\" />\n                        </Tooltip>\n                      </span>\n                      {dataModelHost && (\n                        <>\n                          {\" \"}\n                          <Tooltip\n                            title={`suggest changes for ${agentName}`}\n                            position=\"bottom\"\n                          >\n                            <a\n                              className=\"data-model-deep-link\"\n                              href={`${dataModelHost}/edit/${agentId}`}\n                              rel=\"noopener noreferrer\"\n                              target=\"_blank\"\n                            >\n                              <i className=\"fa fa-edit\" aria-hidden=\"true\" />\n                            </a>\n                          </Tooltip>\n                        </>\n                      )}\n                    </span>\n                  );\n                })}\n            </div>\n\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                float: \"right\"\n              }}\n            >\n              <span\n                className={cx(\"hint-message\", \"fadeHidden\", {\n                  fadeShow: enteredText.length > 0 && enteredText[0] === '\"'\n                })}\n              >\n                Tip: Hit Shift+Enter to auto-wrap your entry in quotes\n              </span>\n            </div>\n\n            {[\n              // \"act\",\n              // \"say\",\n              // \"tell\"\n              // \"whisper\",\n              // \"applaud\",\n              // \"blush\",\n              // \"cry\",\n              // \"dance\",\n              // \"frown\",\n              // \"gasp\",\n              // \"grin\",\n              // \"groan\",\n              // \"growl\",\n              // \"laugh\",\n              // \"nod\",\n              // \"nudge\",\n              // \"ponder\",\n              // \"pout\",\n              // \"scream\",\n              // \"shrug\",\n              // \"sigh\",\n              // \"smile\",\n              // \"stare\",\n              // \"wave\",\n              // \"wink\",\n              // \"yawn\"\n            ].map(action => (\n              <span className=\"action\" key={action}>\n                {action}\n              </span>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst EmojiPicker = ({ onBlur, ...props }) => {\n  EmojiPicker.handleClickOutside = () => onBlur();\n  return <Picker {...props} />;\n};\nconst BlurClosingPicker = onClickOutside(EmojiPicker, {\n  handleClickOutside: () => EmojiPicker.handleClickOutside\n});\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<ConnectedApp />, rootElement);\n\nfunction getLocationState(messages) {\n  var valid_messages = messages.filter(\n    m => m.is_self !== true && m.caller !== null\n  );\n  if (valid_messages.length === 0) return [null, []];\n  var lastMessage = valid_messages[valid_messages.length - 1];\n\n  return {\n    currentRoom: lastMessage.room_id,\n    presentAgents: Object.keys(lastMessage.present_agent_ids)\n  };\n}\n","export function zipToObject(keys, values) {\n  return keys.reduce((obj, k, i) => ({ ...obj, [k]: values[i] }), {});\n}\n\nexport function setCaretPosition(elem, caretPos) {\n  /* inspired from: https://stackoverflow.com/a/512542 */\n  if (elem != null) {\n    if (elem.createTextRange) {\n      var range = elem.createTextRange();\n      range.move(\"character\", caretPos);\n      range.select();\n    } else {\n      if (elem.selectionStart) {\n        elem.focus();\n        elem.setSelectionRange(caretPos, caretPos);\n      } else elem.focus();\n    }\n  }\n}\n"],"sourceRoot":""}