{"version":3,"sources":["components/WorldFileUpload.js","components/NavBar.js","config.js","utils.js","components/ExplorePage.js","components/forms/BaseSuggest.js","components/forms/ObjectForm.js","components/forms/CharacterForm.js","components/forms/RoomForm.js","components/AppToaster.js","components/CreatePage.js","components/ReviewPage.js","components/worldbuilding/utils.js","components/forms/ColorPicker.js","components/forms/BaseMultiSelect.js","components/forms/TileForm.js","components/worldbuilding/Tile.js","components/forms/AdvancedTileForm.js","components/worldbuilding/Grid.js","components/worldbuilding/FloorSelector.js","components/WorldBuilderPage.js","components/EditPage.js","App.js","index.js"],"names":["WorldFileUpload","setPopover","inputRef","React","useRef","useState","undefined","file","setFile","onChange","e","fileReader","FileReader","onload","event","JSON","parse","target","result","files","readAsText","type","ref","style","display","to","pathname","state","data","icon","onClick","current","click","text","shouldDismissPopover","NavBar","children","worldBuildPopover","setWorldBuildPopover","Fragment","Group","align","Alignment","LEFT","Heading","Divider","data-testid","className","position","Position","BOTTOM_LEFT","minimal","isOpen","color","tagName","DEV","host","hostname","port","useDidChange","val","value","useEffect","usePrevious","useAPI","CONFIG","url","preloaded","body","params","loading","setState","newUrl","isSubscribed","fetch","then","res","json","catch","err","console","log","reload","post","payload","formBody","property","encodedKey","encodeURIComponent","encodedValue","stringify","push","method","headers","join","ItemsList","items","descriptionField","additionalFields","selectedEntity","expanded","animating","nextState","length","width","map","field","key","name","item","index","id","handleTrClick","background","colSpan","padding","cursor","duration","height","easing","onAnimationEnd","animateOpacity","ExpandedTab","flexDirection","Object","keys","startCase","justifyContent","margin","entity","ExplorePage","setSelectedEntity","page","setPage","searchText","setSearchText","placeholder","dir","marginBottom","inline","large","selectedValue","label","intent","Intent","PRIMARY","previousLabel","nextLabel","breakLabel","forcePage","pageCount","total_pages","marginPagesDisplayed","pageRangeDisplayed","onPageChange","selected","containerClassName","subContainerClassName","activeClassName","renderItemList","filteredItems","renderItem","topResults","slice","textAlign","disabled","renderOption","obj","handleClick","modifiers","matchesPredicate","active","BaseSuggest","errors","touched","setFieldTouched","formValue","handleChange","onItemSelect","entities","setItems","query","setQuery","currItem","setCurrItem","localEntities","values","results","concat","filter","self","findIndex","t","equal","isNaN","onBlur","itemRenderer","itemListRenderer","inputValueRenderer","inputProps","DANGER","popoverProps","usePortal","itemPredicate","_index","exactMatch","normalizedTitle","toLowerCase","normalizedQuery","string","indexOf","selectedItem","onQueryChange","q","resetOnQuery","emptyObjectForm","name_prefix","physical_description","base_id","is_container","is_drink","is_food","is_gettable","is_plural","is_surface","is_weapon","is_wearable","ObjectForm","initialInputs","handleSubmit","initialValues","validate","onSubmit","props","setFieldValue","dirty","isValid","handleBlur","handleReset","handleSwitch","labelInfo","labelFor","growVertically","fill","marginLeft","checked","alignIndicator","RIGHT","marginRight","emptyCharacterForm","persona","char_type","CharacterForm","emptyRoomForm","description","backstory","RoomForm","AppToaster","Toaster","create","TOP","CreateForm","history","useHistory","submitEntity","a","show","SUCCESS","message","CreatePage","location","formType","setFormType","EditsList","edits","status","rows","all","setSelected","submitAction","setSubmitAction","showDialog","setShowDialog","pendingSubmission","setPendingSubmission","handleTdClick","reqs","edit_id","Promise","Array","showSubmission","action","i","onClose","title","Classes","DIALOG_BODY","edit","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","indeterminate","newRows","newSelection","every","r","handleCheckbox","orig","diff","differ","DiffMatchPatch","diff_main","diff_cleanupSemantic","d","unedited_value","edited_value","Card","alignItems","flexGrow","maxWidth","fontSize","ReviewPage","selectedStatus","setSelectedStatus","TILE_COLORS","Colors","GRAY3","VIOLET5","RED5","SEPIA5","GOLD5","FOREST5","BLUE5","grass","water","buildings","royal","brick","path","farm","findBiome","lowName","some","biome","invertColor","hex","parseInt","deleteWorld","getWorld","findEmoji","emojiIndex","search","native","words","split","charAt","substring","mapReducer","floor","floorIndex","tiles","x","y","newTile","createdEntitiesReducer","assign","entityType","nextID","merge","useWorldBuilder","upload","dimensions","floors","setDimensions","initialMap","walls","useReducer","mapDispatch","room","character","object","entitiesDispatch","currFloor","setCurrFloor","newMap","f","removeStairsTile","baseMap","stairDown","stairUp","removeStairsFloor","stair","isEmpty","forEach","filteredMap","filtered","newFloor","newTiles","tile","postWorld","store","characters","objects","table","edges","coord","chars","objs","neighbors","dst_id","dirs","direction","neighbor","wall","includes","postEdges","createReqs","edgeReqs","floorManager","addFloor","deleteFloor","_floor","reorderFloors","i1","i2","reorderedFloor","editFloorName","newName","setTile","clearTile","cloneDeep","swapTiles","x1","y1","x2","y2","getTileAt","toggleWall","addRowTop","tileKeys","wallKeys","newWalls","t1","t2","addRowBot","addColFront","addColEnd","editEntity","findOrAddEntity","addEntity","exportWorld","element","document","createElement","setAttribute","Date","now","toString","appendChild","removeChild","ColorPicker","colors","advanced","maxHeight","borderRadius","borderColor","borderStyle","borderWidth","boxShadow","BaseMultiSelect","tooltip","currItems","setCurrItems","content","targetTagName","popoverClassName","TOP_RIGHT","tagInputProps","onRemove","_value","newItems","_item","change","selectedItems","tagRenderer","emptyTileForm","TileForm","onClear","setShowAdvanced","alignContent","HEADING","iconSize","fullValue","emoji","Tile","showAdvanced","tileStyle","toggleStairs","stopPropagation","toggleTo","otherFloor","newConnectedTile","contentColor","opacity","bottom","left","top","right","backgroundColor","overflow","char","Hideable","initialOpen","open","setOpen","SelectedTableView","columnNames","columnKeys","handleEdit","handleDuplicate","handleDelete","EmojiTD","showPicker","setShowPicker","interactionKind","PopoverInteractionKind","CLICK","onInteraction","wrapperTagName","onSelect","col","selectOrCreateState","BASE","CHOOSE","SELECT_FROM_EXISTING","CREATE_NEW","EDIT","DUPLICATE","SelectFromExistingOrCreateNew","initialState","SelectFromExisting","selectFromExistingProps","Form","formProps","handleCreateSubmit","handleEditSubmit","Selected","selectedProps","editing","setEditing","duplicating","setDuplicating","isArray","splice","AdvancedTileForm","inheritedInputs","handleClear","TilePreview","isInitialValid","setRoomValue","marginTop","AdvancedEditor","resetShowAdvanced","DRAWER_BODY","Grid","initialShowAdvanced","layout","setLayout","dragging","setDragging","onDragEvent","newState","initial","next","isEqual","j","generateWalls","cols","rowHeight","onDragStart","onDrag","onDragStop","onLayoutChange","setTimeout","isResizable","maxRows","data-grid","w","h","draggableHandle","draggableCancel","isDraggable","generateTiles","FloorSelector","manager","contextShowing","setContextShowing","confirmAlert","setConfirmAlert","createRef","FloorButton","ContextMenuTarget","createReactClass","keypressHandler","blur","renderContextMenu","confirmButtonText","onConfirm","onContextMenuClose","this","componentDidMount","focus","select","render","lineHeight","defaultValue","onKeyPress","cancelButtonText","onCancel","holdTime","callback","_e","initialIndex","newIndex","WARNING","template","itemKey","list","itemClicked","lock","itemClass","WorldBuilder","setAdvanced","isOverlayOpen","toggleOverlay","classes","classNames","CARD","ELEVATION_4","onOpening","ListWorlds","hasBackdrop","autoFocus","max","min","onValueChange","BOTTOM","WorldBuilderPage","EditForm","submitEdit","editedValue","player","EditPage","match","setInitialInputs","pendingEdits","setPendingEdits","submitEdits","Routes","component","exact","Math","random","App","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.e7275202.chunk.js","sourcesContent":["import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { MenuItem } from \"@blueprintjs/core\";\n\nfunction WorldFileUpload({ setPopover }) {\n  const inputRef = React.useRef();\n  const [file, setFile] = React.useState(undefined);\n  return (\n    <>\n      <input\n        onChange={e => {\n          setFile(undefined);\n          const fileReader = new FileReader();\n          fileReader.onload = function(event) {\n            setFile(JSON.parse(event.target.result));\n          };\n          const file = e.target.files[0];\n          fileReader.readAsText(file);\n          setPopover(false);\n        }}\n        type=\"file\"\n        ref={inputRef}\n        style={{ display: \"none\" }}\n      />\n      {file && (\n        <Redirect to={{ pathname: \"/world_builder\", state: { data: file } }} />\n      )}\n      <MenuItem\n        icon=\"upload\"\n        onClick={() => inputRef.current.click()}\n        text=\"Upload File\"\n        shouldDismissPopover={false}\n      />\n    </>\n  );\n}\n\nexport default WorldFileUpload;\n","import React from \"react\";\nimport {\n  Navbar,\n  Alignment,\n  Button,\n  Position,\n  Popover,\n  Menu,\n  MenuItem\n} from \"@blueprintjs/core\";\nimport { Link } from \"react-router-dom\";\n\nimport WorldFileUpload from \"./WorldFileUpload\";\n\nfunction NavBar({ children }) {\n  const [worldBuildPopover, setWorldBuildPopover] = React.useState(false);\n  return (\n    <React.Fragment>\n      <Navbar>\n        <Navbar.Group align={Alignment.LEFT}>\n          <Navbar.Heading>LIGHT Data Model</Navbar.Heading>\n          <Navbar.Divider />\n          <Link data-testid=\"link-explore\" className=\"btn-link\" to=\"/explore\">\n            <Button className=\"bp3-minimal\" icon=\"path-search\" text=\"Explore\" />\n          </Link>\n          <Link data-testid=\"link-create\" className=\"btn-link\" to=\"/create\">\n            <Button className=\"bp3-minimal\" icon=\"cube\" text=\"Create\" />\n          </Link>\n          <Link data-testid=\"link-review\" className=\"btn-link\" to=\"/review\">\n            <Button className=\"bp3-minimal\" icon=\"form\" text=\"Review Edits\" />\n          </Link>\n          <Popover\n            position={Position.BOTTOM_LEFT}\n            minimal\n            isOpen={worldBuildPopover}\n          >\n            <Button\n              onClick={() => setWorldBuildPopover(!worldBuildPopover)}\n              className=\"bp3-minimal\"\n              icon=\"map-create\"\n              text=\"Build World\"\n            />\n            <Menu>\n              <MenuItem\n                icon=\"new-object\"\n                text={\n                  <Link\n                    onClick={() => setWorldBuildPopover(false)}\n                    style={{ color: \"inherit\" }}\n                    data-testid=\"link-world-builder\"\n                    className=\"btn-link\"\n                    to=\"/world_builder\"\n                  >\n                    Create New\n                  </Link>\n                }\n                shouldDismissPopover={true}\n                tagName=\"div\"\n              />\n              <WorldFileUpload setPopover={setWorldBuildPopover} />\n            </Menu>\n          </Popover>\n        </Navbar.Group>\n      </Navbar>\n      {children}\n    </React.Fragment>\n  );\n}\n\nexport default NavBar;\n","const DEV = {\n  host: \"http://localhost\",\n  hostname: \"localhost\",\n  port: \"35494\",\n};\n\nexport default DEV;\n","import React from \"react\";\n\nimport CONFIG from \"./config\";\n\nexport function usePrevious(value) {\n  const ref = React.useRef();\n  React.useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nexport function useDidChange(val) {\n  const prevVal = usePrevious(val);\n  return prevVal !== val;\n}\n\nexport function useAPI(CONFIG, url, { body, params } = {}, preloaded) {\n  const [state, setState] = React.useState({\n    loading: true,\n    result: undefined\n  });\n\n  const newUrl = useDidChange(url);\n\n  React.useEffect(() => {\n    if (state.loading && preloaded) {\n      setState({ loading: false, result: preloaded });\n      return;\n    }\n    if (newUrl) {\n      setState({ loading: true, result: undefined });\n      return;\n    }\n    let isSubscribed = true;\n\n    if (state.loading) {\n      fetch(CONFIG.host + \":\" + CONFIG.port + \"/builder\" + url)\n        .then(res => res.json())\n        .then(data => {\n          if (isSubscribed) {\n            setState({ loading: false, result: data });\n          }\n        })\n        .catch(err => console.log(\"Error fetching data\"));\n    }\n\n    return () => (isSubscribed = false);\n  }, [CONFIG.host, CONFIG.port, url, newUrl, preloaded, state]);\n\n  const reload = () => {\n    setState({ loading: true, result: undefined });\n  };\n\n  return {\n    loading: state.loading,\n    result: state.result,\n    reload\n  };\n}\n\nexport function post(url, payload) {\n  const formBody = [];\n  for (let property in payload) {\n    const encodedKey = encodeURIComponent(property);\n    const encodedValue = encodeURIComponent(\n      typeof payload[property] === \"object\"\n        ? JSON.stringify(payload[property])\n        : payload[property]\n    );\n    formBody.push(encodedKey + \"=\" + encodedValue);\n  }\n  return fetch(`${CONFIG.host}:${CONFIG.port}/builder/${url}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    body: formBody.join(\"&\")\n  });\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Intent, Spinner, RadioGroup, Radio } from \"@blueprintjs/core\";\nimport AnimateHeight from \"react-animate-height\";\nimport { startCase } from \"lodash\";\nimport ReactPaginate from \"react-paginate\";\n\nimport CONFIG from \"../config\";\nimport { useAPI } from \"../utils\";\n\nfunction ExplorePage() {\n  const [selectedEntity, setSelectedEntity] = React.useState(\"object\");\n  const [page, setPage] = React.useState(0);\n\n  const [searchText, setSearchText] = React.useState(\"\");\n  const { loading, result } = useAPI(\n    CONFIG,\n    \"/entities/\" + selectedEntity + \"?search=\" + searchText + \"&page=\" + page\n  );\n\n  return (\n    <div>\n      <h2 data-testid=\"header\" className=\"bp3-heading\">\n        Explore\n      </h2>\n      <div className=\"bp3-text-large\">\n        Search across the LIGHT database for existing objects, characters, or\n        rooms.\n      </div>\n      <div\n        className=\"bp3-input-group bp3-large\"\n        style={{ margin: \"20px 0px 10px\" }}\n      >\n        <span className=\"bp3-icon bp3-icon-search\" />\n        <input\n          className=\"bp3-input\"\n          type=\"search\"\n          placeholder=\"Search...\"\n          dir=\"auto\"\n          value={searchText}\n          onChange={e => {\n            setSearchText(e.target.value);\n            setPage(0);\n          }}\n        />\n      </div>\n      <div style={{ display: \"flex\", marginBottom: 30 }}>\n        <span style={{ margin: \"0px 20px 0px 40px\" }}>Searching category:</span>\n        <RadioGroup\n          inline\n          large\n          onChange={e => {\n            setSelectedEntity(e.target.value);\n            setPage(0);\n          }}\n          selectedValue={selectedEntity}\n        >\n          <Radio data-testid=\"radio-object\" label=\"Objects\" value=\"object\" />\n          <Radio\n            data-testid=\"radio-character\"\n            label=\"Characters\"\n            value=\"character\"\n          />\n          <Radio data-testid=\"radio-room\" label=\"Rooms\" value=\"room\" />\n        </RadioGroup>\n      </div>\n\n      {loading ? (\n        <Spinner intent={Intent.PRIMARY} />\n      ) : (\n        <>\n          <ItemsList\n            items={result.data}\n            descriptionField={\n              selectedEntity === \"room\" ? \"description\" : \"physical_description\"\n            }\n            additionalFields={\n              selectedEntity === \"room\"\n                ? [{ name: \"Backstory\", key: \"backstory\" }]\n                : []\n            }\n            selectedEntity={selectedEntity}\n          />\n          <div style={{ margin: \"20px\" }}>\n            <ReactPaginate\n              previousLabel={\"previous\"}\n              nextLabel={\"next\"}\n              breakLabel={\"...\"}\n              forcePage={page}\n              pageCount={result.total_pages}\n              marginPagesDisplayed={2}\n              pageRangeDisplayed={5}\n              onPageChange={data => setPage(data.selected)}\n              containerClassName={\"pagination\"}\n              subContainerClassName={\"pages pagination\"}\n              activeClassName={\"active\"}\n            />\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nfunction ItemsList({\n  items,\n  descriptionField,\n  additionalFields = [],\n  selectedEntity\n}) {\n  const [state, setState] = React.useState({\n    expanded: -1,\n    animating: 0,\n    nextState: -1\n  });\n\n  function handleTrClick(index) {\n    if (state.expanded === -1) {\n      setState({ expanded: index, animating: 2, nextState: -1 });\n    } else if (state.expanded === index) {\n      setState({ expanded: index, animating: 3, nextState: -1 });\n    } else {\n      setState({ ...state, animating: 3, nextState: index });\n    }\n  }\n\n  if (items === undefined || items.length === 0) {\n    return <span>No items found.</span>;\n  } else {\n    return (\n      <table\n        data-testid=\"table-explore\"\n        style={{ width: \"100%\" }}\n        className=\"bp3-html-table bp3-html-table-condensed bp3-interactive\"\n      >\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Description</th>\n            {additionalFields.map(field => (\n              <th key={field}>{field.name}</th>\n            ))}\n\n            <th>ID</th>\n          </tr>\n        </thead>\n        <tbody>\n          {items.map((item, index) => (\n            <React.Fragment key={item.id}>\n              <tr\n                onClick={() => handleTrClick(index)}\n                data-testid=\"tr-explore\"\n                style={{\n                  background:\n                    index % 2 === 0 ? \"rgba(191, 204, 214, 0.15)\" : undefined\n                }}\n              >\n                <td>\n                  <strong>{item.name}</strong>\n                </td>\n                <td>{item[descriptionField]}</td>\n                {additionalFields.map(field => (\n                  <td key={field.name}>{item[field.key]}</td>\n                ))}\n                <td>{item.id}</td>\n              </tr>\n              <tr\n                style={{\n                  background:\n                    index % 2 === 0 ? \"rgba(191, 204, 214, 0.15)\" : undefined\n                }}\n              >\n                <td\n                  colSpan={5}\n                  style={{\n                    display: state.expanded === index ? undefined : \"none\",\n                    padding: 0,\n                    cursor: \"unset\"\n                  }}\n                >\n                  <AnimateHeight\n                    duration={500}\n                    height={\n                      state.expanded === index &&\n                      (state.animating === 2 || state.animating === 0)\n                        ? \"auto\"\n                        : 0\n                    }\n                    easing={\"ease\"}\n                    onAnimationEnd={() =>\n                      setState({\n                        nextState: -1,\n                        expanded:\n                          state.animating === 2 ? index : state.nextState,\n                        animating:\n                          state.animating === 3 && state.nextState !== -1\n                            ? 2\n                            : 0\n                      })\n                    }\n                    animateOpacity={true}\n                  >\n                    {state.expanded === index && (\n                      <ExpandedTab\n                        item={item}\n                        selectedEntity={selectedEntity}\n                      />\n                    )}\n                  </AnimateHeight>\n                </td>\n              </tr>\n            </React.Fragment>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nfunction ExpandedTab({ item, selectedEntity }) {\n  return (\n    <>\n      <div\n        data-testid=\"dropdown\"\n        style={{\n          padding: \"20px 40px 0 40px\"\n        }}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\"\n          }}\n        >\n          {Object.keys(item).map((key, index) => (\n            <p key={index}>\n              <strong>{startCase(key)}</strong>: {item[key]}\n            </p>\n          ))}\n        </div>\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          padding: \"0 20px 20px 20px\",\n          justifyContent: \"flex-end\"\n        }}\n      >\n        <Link\n          style={{ margin: \"0 5px\" }}\n          className=\"bp3-button bp3-small\"\n          to={{\n            pathname: `/create`,\n            state: {\n              type: selectedEntity,\n              entity: item\n            }\n          }}\n        >\n          Create From\n        </Link>\n        <Link\n          style={{ margin: \"0 5px\" }}\n          className=\"bp3-button bp3-small\"\n          to={{\n            pathname: `/edit/${item.id}`,\n            state: {\n              type: selectedEntity,\n              entity: item\n            }\n          }}\n        >\n          Edit\n        </Link>\n      </div>\n    </>\n  );\n}\n\nexport default ExplorePage;\n","import React from \"react\";\nimport { Intent, Menu, MenuItem } from \"@blueprintjs/core\";\nimport { Suggest } from \"@blueprintjs/select\";\nimport equal from \"fast-deep-equal\";\nimport \"@blueprintjs/select/lib/css/blueprint-select.css\";\n\nimport CONFIG from \"../../config\";\nimport { useAPI } from \"../../utils\";\n\nconst SUGGEST_SIZE = 100;\n\nfunction BaseSuggest({\n  id,\n  name,\n  errors,\n  touched,\n  setFieldTouched,\n  formValue,\n  handleChange,\n  type,\n  onItemSelect,\n  entities\n}) {\n  const [items, setItems] = React.useState([]);\n  const [query, setQuery] = React.useState(\"\");\n  const [currItem, setCurrItem] = React.useState(formValue);\n  const { loading, result } = useAPI(\n    CONFIG,\n    `/entities/${type}?search=${query}`\n  );\n\n  React.useEffect(() => {\n    if (!loading) {\n      if (entities) {\n        const localEntities = Object.values(entities[type]);\n        const results = localEntities\n          .concat(result.slice(0, SUGGEST_SIZE + localEntities.length + 1))\n          .filter(\n            (item, index, self) => self.findIndex(t => equal(t, item)) === index\n          );\n\n        return setItems(results);\n      }\n      return setItems(result);\n    }\n  }, [result, loading, entities, type]);\n\n  React.useEffect(() => {\n    if (entities) {\n      return setCurrItem(formValue);\n    }\n    // When Reset is clicked on the form\n    if (isNaN(formValue)) {\n      return setCurrItem(null);\n    }\n    for (let item in items) {\n      if (items[item].id === formValue) {\n        return setCurrItem(items[item]);\n      }\n    }\n  }, [formValue, items, entities]);\n\n  const filterItems = (query, obj, _index, exactMatch) => {\n    const normalizedTitle = obj.name.toLowerCase();\n    const normalizedQuery = query.toLowerCase();\n    if (exactMatch) {\n      return normalizedTitle === normalizedQuery;\n    } else {\n      let string = \"\";\n      for (let key in obj) {\n        string += obj[key] + \". \";\n      }\n      const result = string.toLowerCase().indexOf(normalizedQuery) >= 0;\n      return result;\n    }\n  };\n\n  return (\n    <div onBlur={e => setFieldTouched(name)}>\n      <Suggest\n        id={id}\n        name={name}\n        items={items}\n        itemRenderer={renderOption}\n        itemListRenderer={renderItemList}\n        inputValueRenderer={item =>\n          entities && entities[type][item]\n            ? entities[type][item].name\n            : item.name\n        }\n        inputProps={{\n          intent: errors && touched ? Intent.DANGER : null,\n          \"data-testid\": \"base-suggest\"\n        }}\n        onItemSelect={e => {\n          if (onItemSelect) {\n            const result = onItemSelect(e, type);\n            setCurrItem(result);\n            handleChange(name, result, e);\n          } else {\n            setCurrItem(e);\n            handleChange(name, e.id, e);\n          }\n          setQuery(\"\");\n        }}\n        popoverProps={{ usePortal: false }}\n        itemPredicate={filterItems}\n        selectedItem={currItem}\n        query={query}\n        onQueryChange={q => setQuery(q)}\n        resetOnQuery={true}\n      />\n    </div>\n  );\n}\n\nfunction renderItemList({ filteredItems, renderItem }) {\n  const topResults = filteredItems.slice(0, SUGGEST_SIZE);\n  return (\n    <Menu>\n      {filteredItems.length > 0 ? (\n        <>\n          {topResults.map((item, index) => {\n            return renderItem(item, index);\n          })}\n          {filteredItems.length > SUGGEST_SIZE && (\n            <MenuItem\n              style={{ textAlign: \"center\" }}\n              disabled={true}\n              text=\"...\"\n            />\n          )}\n        </>\n      ) : (\n        <MenuItem disabled={true} text=\"No results.\" />\n      )}\n    </Menu>\n  );\n}\n\nfunction renderOption(obj, { handleClick, modifiers, index }) {\n  if (!modifiers.matchesPredicate) {\n    return null;\n  }\n\n  return (\n    <MenuItem\n      active={modifiers.active}\n      key={index}\n      onClick={handleClick}\n      text={obj.name}\n      shouldDismissPopover={false}\n    />\n  );\n}\n\nexport default BaseSuggest;\n","import React from \"react\";\nimport {\n  Button,\n  FormGroup,\n  Intent,\n  InputGroup,\n  Switch,\n  TextArea,\n  Alignment\n} from \"@blueprintjs/core\";\nimport { Formik } from \"formik\";\n\nimport BaseSuggest from \"./BaseSuggest\";\n\nfunction ObjectForm({ initialInputs, handleSubmit, type }) {\n  return (\n    <Formik\n      initialValues={initialInputs}\n      validate={values => {\n        let errors = {};\n        if (!values.name) {\n          errors.name = \"Required\";\n        }\n        if (!values.name_prefix) {\n          errors.name_prefix = \"Required\";\n        }\n        if (!values.physical_description) {\n          errors.physical_description = \"Required\";\n        }\n        if (!values.base_id) {\n          errors.base_id = \"Required\";\n        }\n        return errors;\n      }}\n      onSubmit={handleSubmit}\n    >\n      {props => {\n        const {\n          values,\n          setFieldValue,\n          touched,\n          setFieldTouched,\n          errors,\n          dirty,\n          isValid,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          handleReset\n        } = props;\n\n        const handleSwitch = e => {\n          const { name } = e.target;\n          setFieldValue(name, values[name] ? 0 : 1);\n        };\n\n        return (\n          <form data-testid=\"form\">\n            <FormGroup\n              label=\"Name\"\n              labelInfo=\"(required)\"\n              labelFor=\"name-input\"\n            >\n              <InputGroup\n                id=\"name-input\"\n                name=\"name\"\n                intent={errors.name && touched.name ? Intent.DANGER : null}\n                onBlur={handleBlur}\n                onChange={handleChange}\n                value={values.name}\n              />\n              {errors.name && touched.name && (\n                <div className=\"form-error\">{errors.name}</div>\n              )}\n            </FormGroup>\n            <FormGroup\n              label=\"Name Prefix\"\n              labelInfo=\"(required)\"\n              labelFor=\"name-prefix-input\"\n            >\n              <InputGroup\n                id=\"name-prefix-input\"\n                name=\"name_prefix\"\n                intent={\n                  errors.name_prefix && touched.name_prefix\n                    ? Intent.DANGER\n                    : null\n                }\n                onBlur={handleBlur}\n                onChange={handleChange}\n                value={values.name_prefix}\n              />\n              {errors.name_prefix && touched.name_prefix && (\n                <div className=\"form-error\">{errors.name_prefix}</div>\n              )}\n            </FormGroup>\n            <FormGroup\n              label=\"Physical Description\"\n              labelInfo=\"(required)\"\n              labelFor=\"physical-description-input\"\n            >\n              <TextArea\n                id=\"physical-description-input\"\n                name=\"physical_description\"\n                growVertically={true}\n                fill={true}\n                intent={\n                  errors.physical_description && touched.physical_description\n                    ? Intent.DANGER\n                    : null\n                }\n                onBlur={handleBlur}\n                onChange={handleChange}\n                value={values.physical_description}\n              />\n              {errors.physical_description && touched.physical_description && (\n                <div className=\"form-error\">{errors.physical_description}</div>\n              )}\n            </FormGroup>\n            <FormGroup\n              label=\"Base Object\"\n              labelInfo=\"(required)\"\n              labelFor=\"base-id-input\"\n            >\n              <BaseSuggest\n                id=\"base-id-input\"\n                name=\"base_id\"\n                type={`base_${type}`}\n                errors={errors.base_id}\n                touched={touched.base_id}\n                setFieldTouched={setFieldTouched}\n                formValue={values.base_id}\n                handleChange={setFieldValue}\n              />\n              {errors.base_id && touched.base_id && (\n                <div className=\"form-error\">{errors.base_id}</div>\n              )}\n            </FormGroup>\n            <FormGroup label=\"Properties\" labelInfo=\"(required)\" large={true}>\n              <div style={{ marginLeft: \"15px\", width: \"150px\" }}>\n                <Switch\n                  label=\"Container\"\n                  name=\"is_container\"\n                  onChange={handleSwitch}\n                  checked={!!values.is_container}\n                  alignIndicator={Alignment.RIGHT}\n                />\n                <Switch\n                  label=\"Drink\"\n                  name=\"is_drink\"\n                  onChange={handleSwitch}\n                  checked={!!values.is_drink}\n                  alignIndicator={Alignment.RIGHT}\n                />\n                <Switch\n                  label=\"Food\"\n                  name=\"is_food\"\n                  onChange={handleSwitch}\n                  checked={!!values.is_food}\n                  alignIndicator={Alignment.RIGHT}\n                />\n                <Switch\n                  label=\"Gettable\"\n                  name=\"is_gettable\"\n                  onChange={handleSwitch}\n                  checked={!!values.is_gettable}\n                  alignIndicator={Alignment.RIGHT}\n                />\n                <Switch\n                  label=\"Plural\"\n                  name=\"is_plural\"\n                  onChange={handleSwitch}\n                  checked={!!values.is_plural}\n                  alignIndicator={Alignment.RIGHT}\n                />\n                <Switch\n                  label=\"Surface\"\n                  name=\"is_surface\"\n                  onChange={handleSwitch}\n                  checked={!!values.is_surface}\n                  alignIndicator={Alignment.RIGHT}\n                />\n                <Switch\n                  label=\"Weapon\"\n                  name=\"is_weapon\"\n                  onChange={handleSwitch}\n                  checked={!!values.is_weapon}\n                  alignIndicator={Alignment.RIGHT}\n                />\n                <Switch\n                  label=\"Wearable\"\n                  name=\"is_wearable\"\n                  onChange={handleSwitch}\n                  checked={!!values.is_wearable}\n                  alignIndicator={Alignment.RIGHT}\n                />\n              </div>\n            </FormGroup>\n\n            <Button\n              type=\"reset\"\n              onClick={handleReset}\n              disabled={!dirty}\n              style={{ marginRight: \"15px\" }}\n            >\n              Reset\n            </Button>\n            <Button\n              intent={Intent.PRIMARY}\n              type=\"submit\"\n              onClick={handleSubmit}\n              disabled={!dirty || !isValid}\n              style={{ marginLeft: \"15px\" }}\n            >\n              Save Changes\n            </Button>\n          </form>\n        );\n      }}\n    </Formik>\n  );\n}\n\nexport const emptyObjectForm = {\n  name: \"\",\n  name_prefix: \"\",\n  physical_description: \"\",\n  base_id: 0,\n  is_container: 0,\n  is_drink: 0,\n  is_food: 0,\n  is_gettable: 0,\n  is_plural: 0,\n  is_surface: 0,\n  is_weapon: 0,\n  is_wearable: 0\n};\n\nexport default ObjectForm;\n","import React from \"react\";\nimport {\n  Button,\n  FormGroup,\n  Intent,\n  InputGroup,\n  Switch,\n  TextArea,\n  Alignment\n} from \"@blueprintjs/core\";\nimport { Formik } from \"formik\";\n\nimport BaseSuggest from \"./BaseSuggest\";\n\nfunction CharacterForm({ initialInputs, handleSubmit, type }) {\n  return (\n    <Formik\n      initialValues={initialInputs}\n      validate={values => {\n        let errors = {};\n        if (!values.name) {\n          errors.name = \"Required\";\n        }\n        if (!values.name_prefix) {\n          errors.name_prefix = \"Required\";\n        }\n        if (!values.persona) {\n          errors.persona = \"Required\";\n        }\n        if (!values.physical_description) {\n          errors.physical_description = \"Required\";\n        }\n        if (!values.char_type) {\n          errors.char_type = \"Required\";\n        }\n        if (!values.base_id) {\n          errors.base_id = \"Required\";\n        }\n        return errors;\n      }}\n      onSubmit={handleSubmit}\n    >\n      {props => {\n        const {\n          values,\n          setFieldValue,\n          touched,\n          setFieldTouched,\n          errors,\n          dirty,\n          isValid,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          handleReset\n        } = props;\n\n        const handleSwitch = e => {\n          const { name } = e.target;\n          setFieldValue(name, values[name] ? 0 : 1);\n        };\n\n        return (\n          <form data-testid=\"form\">\n            <FormGroup\n              label=\"Name\"\n              labelInfo=\"(required)\"\n              labelFor=\"name-input\"\n            >\n              <InputGroup\n                id=\"name-input\"\n                name=\"name\"\n                intent={errors.name && touched.name ? Intent.DANGER : null}\n                onBlur={handleBlur}\n                onChange={handleChange}\n                value={values.name}\n              />\n              {errors.name && touched.name && (\n                <div className=\"form-error\">{errors.name}</div>\n              )}\n            </FormGroup>\n            <FormGroup\n              label=\"Name Prefix\"\n              labelInfo=\"(required)\"\n              labelFor=\"name-prefix-input\"\n            >\n              <InputGroup\n                id=\"name-prefix-input\"\n                name=\"name_prefix\"\n                intent={\n                  errors.name_prefix && touched.name_prefix\n                    ? Intent.DANGER\n                    : null\n                }\n                onBlur={handleBlur}\n                onChange={handleChange}\n                value={values.name_prefix}\n              />\n              {errors.name_prefix && touched.name_prefix && (\n                <div className=\"form-error\">{errors.name_prefix}</div>\n              )}\n            </FormGroup>\n            <FormGroup\n              label=\"Persona\"\n              labelInfo=\"(required)\"\n              labelFor=\"persona-input\"\n            >\n              <TextArea\n                id=\"persona-input\"\n                name=\"persona\"\n                growVertically={true}\n                fill={true}\n                intent={\n                  errors.persona && touched.persona ? Intent.DANGER : null\n                }\n                onBlur={handleBlur}\n                onChange={handleChange}\n                value={values.persona}\n              />\n              {errors.persona && touched.persona && (\n                <div className=\"form-error\">{errors.persona}</div>\n              )}\n            </FormGroup>\n            <FormGroup\n              label=\"Physical Description\"\n              labelInfo=\"(required)\"\n              labelFor=\"physical-description-input\"\n            >\n              <TextArea\n                id=\"physical-description-input\"\n                name=\"physical_description\"\n                growVertically={true}\n                fill={true}\n                intent={\n                  errors.physical_description && touched.physical_description\n                    ? Intent.DANGER\n                    : null\n                }\n                onBlur={handleBlur}\n                onChange={handleChange}\n                value={values.physical_description}\n              />\n              {errors.physical_description && touched.physical_description && (\n                <div className=\"form-error\">{errors.physical_description}</div>\n              )}\n            </FormGroup>\n            <FormGroup\n              label=\"Character Type\"\n              labelInfo=\"(required)\"\n              labelFor=\"char-type-input\"\n            >\n              <InputGroup\n                id=\"char-type-input\"\n                name=\"char_type\"\n                intent={\n                  errors.char_type && touched.char_type ? Intent.DANGER : null\n                }\n                onBlur={handleBlur}\n                onChange={handleChange}\n                value={values.char_type}\n              />\n              {errors.char_type && touched.char_type && (\n                <div className=\"form-error\">{errors.char_type}</div>\n              )}\n            </FormGroup>\n            <FormGroup\n              label=\"Base Character\"\n              labelInfo=\"(required)\"\n              labelFor=\"base-id-input\"\n            >\n              <BaseSuggest\n                id=\"base-id-input\"\n                name=\"base_id\"\n                type={`base_${type}`}\n                errors={errors.base_id}\n                touched={touched.base_id}\n                setFieldTouched={setFieldTouched}\n                formValue={values.base_id}\n                handleChange={setFieldValue}\n              />\n              {errors.base_id && touched.base_id && (\n                <div className=\"form-error\">{errors.base_id}</div>\n              )}\n            </FormGroup>\n            <FormGroup label=\"Properties\" labelInfo=\"(required)\" large={true}>\n              <div style={{ marginLeft: \"15px\", width: \"150px\" }}>\n                <Switch\n                  label=\"Plural\"\n                  name=\"is_plural\"\n                  onChange={handleSwitch}\n                  checked={!!values.is_plural}\n                  alignIndicator={Alignment.RIGHT}\n                />\n              </div>\n            </FormGroup>\n\n            <Button\n              type=\"reset\"\n              onClick={handleReset}\n              disabled={!dirty}\n              style={{ marginRight: \"15px\" }}\n            >\n              Reset\n            </Button>\n            <Button\n              intent={Intent.PRIMARY}\n              type=\"submit\"\n              onClick={handleSubmit}\n              disabled={!dirty || !isValid}\n              style={{ marginLeft: \"15px\" }}\n            >\n              Save Changes\n            </Button>\n          </form>\n        );\n      }}\n    </Formik>\n  );\n}\n\nexport const emptyCharacterForm = {\n  name: \"\",\n  name_prefix: \"\",\n  persona: \"\",\n  physical_description: \"\",\n  char_type: \"\",\n  base_id: 0,\n  is_plural: 0\n};\n\nexport default CharacterForm;\n","import React from \"react\";\nimport {\n  Button,\n  FormGroup,\n  Intent,\n  InputGroup,\n  TextArea\n} from \"@blueprintjs/core\";\nimport { Formik } from \"formik\";\n\nimport BaseSuggest from \"./BaseSuggest\";\n\nfunction RoomForm({ initialInputs, handleSubmit, type }) {\n  return (\n    <Formik\n      initialValues={initialInputs}\n      validate={values => {\n        let errors = {};\n        if (!values.name) {\n          errors.name = \"Required\";\n        }\n        if (!values.description) {\n          errors.description = \"Required\";\n        }\n        if (!values.backstory) {\n          errors.backstory = \"Required\";\n        }\n        if (!values.base_id) {\n          errors.base_id = \"Required\";\n        }\n        return errors;\n      }}\n      onSubmit={handleSubmit}\n    >\n      {props => {\n        const {\n          values,\n          setFieldValue,\n          touched,\n          setFieldTouched,\n          errors,\n          dirty,\n          isValid,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          handleReset\n        } = props;\n\n        return (\n          <form data-testid=\"form\">\n            <FormGroup\n              label=\"Name\"\n              labelInfo=\"(required)\"\n              labelFor=\"name-input\"\n            >\n              <InputGroup\n                id=\"name-input\"\n                name=\"name\"\n                intent={errors.name && touched.name ? Intent.DANGER : null}\n                onBlur={handleBlur}\n                onChange={handleChange}\n                value={values.name}\n              />\n              {errors.name && touched.name && (\n                <div className=\"form-error\">{errors.name}</div>\n              )}\n            </FormGroup>\n            <FormGroup\n              label=\"Description\"\n              labelInfo=\"(required)\"\n              labelFor=\"description-input\"\n            >\n              <TextArea\n                id=\"description-input\"\n                name=\"description\"\n                growVertically={true}\n                fill={true}\n                intent={\n                  errors.description && touched.description\n                    ? Intent.DANGER\n                    : null\n                }\n                onBlur={handleBlur}\n                onChange={handleChange}\n                value={values.description}\n              />\n              {errors.description && touched.description && (\n                <div className=\"form-error\">{errors.description}</div>\n              )}\n            </FormGroup>\n            <FormGroup\n              label=\"Backstory\"\n              labelInfo=\"(required)\"\n              labelFor=\"backstory-input\"\n            >\n              <TextArea\n                id=\"backstory-input\"\n                name=\"backstory\"\n                growVertically={true}\n                fill={true}\n                intent={\n                  errors.backstory && touched.backstory ? Intent.DANGER : null\n                }\n                onBlur={handleBlur}\n                onChange={handleChange}\n                value={values.backstory}\n              />\n              {errors.backstory && touched.backstory && (\n                <div className=\"form-error\">{errors.backstory}</div>\n              )}\n            </FormGroup>\n            <FormGroup\n              label=\"Base Room\"\n              labelInfo=\"(required)\"\n              labelFor=\"base-id-input\"\n            >\n              <BaseSuggest\n                id=\"base-id-input\"\n                name=\"base_id\"\n                type={`base_${type}`}\n                errors={errors.base_id}\n                touched={touched.base_id}\n                setFieldTouched={setFieldTouched}\n                formValue={values.base_id}\n                handleChange={setFieldValue}\n              />\n              {errors.base_id && touched.base_id && (\n                <div className=\"form-error\">{errors.base_id}</div>\n              )}\n            </FormGroup>\n            <Button\n              type=\"reset\"\n              onClick={handleReset}\n              disabled={!dirty}\n              style={{ marginRight: \"15px\" }}\n            >\n              Reset\n            </Button>\n            <Button\n              intent={Intent.PRIMARY}\n              type=\"submit\"\n              onClick={handleSubmit}\n              disabled={!dirty || !isValid}\n              style={{ marginLeft: \"15px\" }}\n            >\n              Save Changes\n            </Button>\n          </form>\n        );\n      }}\n    </Formik>\n  );\n}\n\nexport const emptyRoomForm = {\n  name: \"\",\n  description: \"\",\n  backstory: \"\",\n  base_id: 0\n};\n\nexport default RoomForm;\n","import { Position, Toaster } from \"@blueprintjs/core\";\n\nconst AppToaster = Toaster.create({\n  position: Position.TOP\n});\n\nexport default AppToaster;\n","import React from \"react\";\nimport { Radio, RadioGroup, Intent } from \"@blueprintjs/core\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { post } from \"../utils\";\nimport ObjectForm, { emptyObjectForm } from \"./forms/ObjectForm\";\nimport CharacterForm, { emptyCharacterForm } from \"./forms/CharacterForm\";\nimport RoomForm, { emptyRoomForm } from \"./forms/RoomForm\";\nimport AppToaster from \"./AppToaster\";\n\nfunction CreatePage({ location }) {\n  const [formType, setFormType] = React.useState(\n    location.state ? location.state.type : \"object\"\n  );\n\n  return (\n    <div>\n      <h2\n        data-testid=\"header\"\n        className=\"bp3-heading\"\n        style={{ marginBottom: 15 }}\n      >\n        Create new entity\n      </h2>\n      <div className=\"bp3-text-large\">\n        <div style={{ display: \"flex\", marginBottom: 30 }}>\n          <span style={{ marginRight: \"20px\" }}>Entity type:</span>\n          <RadioGroup\n            inline\n            large\n            onChange={e => {\n              location.state = undefined;\n              setFormType(e.target.value);\n            }}\n            selectedValue={formType}\n          >\n            <Radio data-testid=\"radio-object\" label=\"Object\" value=\"object\" />\n            <Radio\n              data-testid=\"radio-character\"\n              label=\"Character\"\n              value=\"character\"\n            />\n            <Radio data-testid=\"radio-room\" label=\"Room\" value=\"room\" />\n          </RadioGroup>\n        </div>\n        <CreateForm\n          type={formType}\n          initialInputs={location.state ? location.state.entity : undefined}\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction CreateForm({ type, initialInputs }) {\n  const history = useHistory();\n  const submitEntity = async payload => {\n    await post(`entities/${type}`, payload).then(() => {\n      history.push(\"/\");\n    });\n    AppToaster.show({\n      intent: Intent.SUCCESS,\n      message: \"Successfully created entity\"\n    });\n  };\n\n  switch (type) {\n    case \"object\":\n      return (\n        <ObjectForm\n          type={type}\n          initialInputs={initialInputs ? initialInputs : emptyObjectForm}\n          handleSubmit={submitEntity}\n        />\n      );\n    case \"character\":\n      return (\n        <CharacterForm\n          type={type}\n          initialInputs={initialInputs ? initialInputs : emptyCharacterForm}\n          handleSubmit={submitEntity}\n        />\n      );\n    case \"room\":\n      return (\n        <RoomForm\n          type={type}\n          initialInputs={initialInputs ? initialInputs : emptyRoomForm}\n          handleSubmit={submitEntity}\n        />\n      );\n    default:\n      return \"This entity cannot be created at the moment\";\n  }\n}\n\nexport default CreatePage;\n","import React from \"react\";\nimport {\n  Button,\n  Checkbox,\n  Classes,\n  Dialog,\n  Intent,\n  Radio,\n  RadioGroup,\n  Spinner\n} from \"@blueprintjs/core\";\nimport DiffMatchPatch from \"diff-match-patch\";\nimport AnimateHeight from \"react-animate-height\";\nimport { startCase, fill } from \"lodash\";\n\nimport CONFIG from \"../config\";\nimport { useAPI, post } from \"../utils\";\nimport AppToaster from \"./AppToaster\";\n\nfunction ReviewPage() {\n  const [selectedStatus, setSelectedStatus] = React.useState(\"under review\");\n\n  const { loading, result, reload } = useAPI(\n    CONFIG,\n    `/edits?expand=true&status=${selectedStatus}`\n  );\n\n  return (\n    <div>\n      <h2 data-testid=\"header\" className=\"bp3-heading\">\n        Review\n      </h2>\n      <div className=\"bp3-text-large\">\n        Review pending, accepted, and rejected edits to the LIGHT database.\n      </div>\n      <br />\n      <div style={{ display: \"flex\", marginBottom: \"30px\" }}>\n        <span style={{ margin: \"0px 20px 0px 40px\" }}>Searching category:</span>\n        <RadioGroup\n          inline\n          large\n          onChange={e => setSelectedStatus(e.target.value)}\n          selectedValue={selectedStatus}\n        >\n          <Radio\n            data-testid=\"radio-under-review\"\n            label=\"Under Review\"\n            value=\"under review\"\n          />\n          <Radio\n            data-testid=\"radio-accepted\"\n            label=\"Accepted\"\n            value=\"accepted\"\n          />\n          <Radio\n            data-testid=\"radio-rejected\"\n            label=\"Rejected\"\n            value=\"rejected\"\n          />\n        </RadioGroup>\n      </div>\n      {loading ? (\n        <Spinner intent={Intent.PRIMARY} />\n      ) : (\n        <EditsList edits={result} status={selectedStatus} reload={reload} />\n      )}\n    </div>\n  );\n}\n\nfunction EditsList({ edits, status, reload }) {\n  const [state, setState] = React.useState({\n    expanded: -1,\n    animating: 0,\n    nextState: -1\n  });\n  const [selected, setSelected] = React.useState({ rows: [], all: 0 });\n  const [submitAction, setSubmitAction] = React.useState(undefined);\n  const [showDialog, setShowDialog] = React.useState(false);\n  const [pendingSubmission, setPendingSubmission] = React.useState([]);\n\n  if (edits && edits.length > 0 && selected.rows.length === 0) {\n    setSelected({ ...selected, rows: fill(Array(edits.length), false) });\n  }\n\n  function handleTdClick(index) {\n    if (status === \"under review\") {\n      if (state.expanded === -1) {\n        setState({ expanded: index, animating: 1, nextState: -1 });\n      } else if (state.expanded === index) {\n        setState({ expanded: index, animating: 3, nextState: -1 });\n      } else {\n        setState({ ...state, animating: 3, nextState: index });\n      }\n    }\n  }\n\n  function handleCheckbox(index) {\n    const newSelection = [...selected.rows];\n    newSelection[index] = selected.rows[index] ? false : true;\n    let all = selected.all;\n    if (newSelection.every(r => r === true)) {\n      all = 1;\n    } else if (newSelection.every(r => r === false)) {\n      all = 0;\n    } else {\n      all = -1;\n    }\n    setSelected({ rows: newSelection, all });\n  }\n\n  function handleSelectAll() {\n    const all = selected.all ? 0 : 1;\n    const newRows = fill(Array(edits.length), !!all);\n    setSelected({ rows: newRows, all });\n  }\n\n  async function handleSubmitSelected() {\n    const reqs = pendingSubmission.map(index =>\n      post(`edits/${edits[index].edit_id}/${submitAction}`)\n    );\n    await Promise.all(reqs).then(() => {\n      reload();\n    });\n    AppToaster.show({ intent: Intent.SUCCESS, message: \"Review submitted\" });\n  }\n\n  const showSubmission = action => {\n    const checked = [];\n    for (let i = 0; i < selected.rows.length; i++) {\n      if (selected.rows[i]) {\n        checked.push(i);\n      }\n    }\n    setPendingSubmission(checked);\n    setSubmitAction(action);\n    setShowDialog(true);\n  };\n\n  if (edits === undefined || edits.length === 0) {\n    return <span>No edits found.</span>;\n  } else {\n    return (\n      <>\n        <Dialog\n          icon=\"info-sign\"\n          onClose={() => setShowDialog(false)}\n          title={`Confirm edits to be ${\n            submitAction === \"reject\" ? \"rejected\" : \"accepted\"\n          }`}\n          isOpen={showDialog}\n          usePortal={false}\n        >\n          <div className={Classes.DIALOG_BODY}>\n            <table className=\"bp3-html-table bp3-html-table-condensed bp3-interactive\">\n              <thead>\n                <tr>\n                  <th>Edit ID</th>\n                  <th>Entity ID</th>\n                  <th>Edited Field</th>\n                </tr>\n              </thead>\n              <tbody>\n                {pendingSubmission.map((edit, index) => {\n                  return (\n                    <tr key={index}>\n                      <td>{edits[edit].edit_id}</td>\n                      <td>{edits[edit].id}</td>\n                      <td>{edits[edit].field}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n          <div className={Classes.DIALOG_FOOTER}>\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n              <Button onClick={() => setShowDialog(false)}>Close</Button>\n              <Button intent={Intent.PRIMARY} onClick={handleSubmitSelected}>\n                Confirm Edits\n              </Button>\n            </div>\n          </div>\n        </Dialog>\n        <table\n          data-testid=\"table-review\"\n          style={{ width: \"100%\" }}\n          className=\"bp3-html-table bp3-html-table-condensed bp3-interactive\"\n        >\n          <thead>\n            <tr>\n              {status === \"under review\" && (\n                <th style={{ textAlign: \"center\" }}>\n                  <Checkbox\n                    checked={selected.all}\n                    indeterminate={selected.all === -1}\n                    onClick={handleSelectAll}\n                  />\n                </th>\n              )}\n              <th>Edit ID</th>\n              <th>Entity ID</th>\n              <th>Edited Field</th>\n              <th>Edit</th>\n            </tr>\n          </thead>\n          <tbody>\n            {edits.map((edit, index) => (\n              <React.Fragment key={edit.edit_id}>\n                <tr\n                  data-testid=\"tr-review\"\n                  style={{\n                    background:\n                      index % 2 === 0 ? \"rgba(191, 204, 214, 0.15)\" : undefined\n                  }}\n                >\n                  {status === \"under review\" && (\n                    <td style={{ textAlign: \"center\" }}>\n                      <Checkbox\n                        checked={selected.rows[index]}\n                        onClick={() => handleCheckbox(index)}\n                      />\n                    </td>\n                  )}\n                  <td onClick={() => handleTdClick(index)}>{edit.edit_id}</td>\n                  <td onClick={() => handleTdClick(index)}>\n                    <strong>{edit.id}</strong>\n                  </td>\n                  <td onClick={() => handleTdClick(index)}>{edit.field}</td>\n                  <td onClick={() => handleTdClick(index)}>\n                    {diff(edit.unedited_value, edit.edited_value)}\n                  </td>\n                </tr>\n                <tr\n                  style={{\n                    background:\n                      index % 2 === 0 ? \"rgba(191, 204, 214, 0.15)\" : undefined\n                  }}\n                >\n                  <td\n                    colSpan={5}\n                    style={{\n                      display: state.expanded === index ? undefined : \"none\",\n                      padding: 0,\n                      cursor: \"unset\"\n                    }}\n                  >\n                    <AnimateHeight\n                      duration={500}\n                      height={\n                        state.expanded === index &&\n                        (state.animating === 2 || state.animating === 0)\n                          ? \"auto\"\n                          : 0\n                      }\n                      easing={\"ease\"}\n                      onAnimationEnd={() =>\n                        setState({\n                          nextState: -1,\n                          expanded:\n                            state.animating === 2 ? index : state.nextState,\n                          animating:\n                            state.animating === 3 && state.nextState !== -1\n                              ? 1\n                              : 0\n                        })\n                      }\n                      animateOpacity={true}\n                    >\n                      {state.expanded === index && (\n                        <ExpandedTab\n                          edit={edit}\n                          state={state}\n                          setState={setState}\n                          reload={reload}\n                        />\n                      )}\n                    </AnimateHeight>\n                  </td>\n                </tr>\n              </React.Fragment>\n            ))}\n          </tbody>\n        </table>\n        {status === \"under review\" && (\n          <div\n            style={{\n              display: \"flex\",\n              margin: \"10px\",\n              justifyContent: \"flex-end\"\n            }}\n          >\n            <Button\n              intent={Intent.DANGER}\n              type=\"submit\"\n              onClick={() => showSubmission(\"reject\")}\n              style={{ marginLeft: \"15px\" }}\n              disabled={!selected.all}\n            >\n              Reject\n            </Button>\n            <Button\n              intent={Intent.SUCCESS}\n              type=\"submit\"\n              onClick={() => showSubmission(\"accept/accepted\")}\n              style={{ marginLeft: \"15px\" }}\n              disabled={!selected.all}\n            >\n              Accept\n            </Button>\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nfunction ExpandedTab({ edit, state, setState, reload }) {\n  const { loading, result } = useAPI(CONFIG, `/entities/${edit.id}`);\n  React.useEffect(() => {\n    if (result && state.animating === 1) {\n      setState({ ...state, animating: 2 });\n    }\n  }, [loading, setState, state, result]);\n  return (\n    <>\n      {loading ? (\n        <></>\n      ) : (\n        <Card edit={edit} entity={result.entity} reload={reload} />\n      )}\n    </>\n  );\n}\n\nfunction Card({ edit, entity, reload }) {\n  delete entity.id;\n  return (\n    <>\n      <div\n        data-testid=\"dropdown\"\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          padding: \"20px 20px 0 20px\",\n          alignItems: \"center\"\n        }}\n      >\n        <div style={{ flexGrow: 1 }}>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              width: \"50%\",\n              maxWidth: \"30vw\",\n              margin: \"auto\"\n            }}\n          >\n            {Object.keys(entity).map((key, index) => (\n              <p\n                key={index}\n                style={{ color: key === edit.field ? \"#DB3737\" : undefined }}\n              >\n                <strong>{startCase(key)}</strong>: {entity[key]}\n              </p>\n            ))}\n          </div>\n        </div>\n        <div style={{ height: \"100%\", fontSize: \"20px\", color: \"#394B59\" }}>\n          ➔\n        </div>\n        <div style={{ flexGrow: 1 }}>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              width: \"50%\",\n              maxWidth: \"30vw\",\n              margin: \"auto\"\n            }}\n          >\n            {Object.keys(entity).map((key, index) => (\n              <p\n                key={index}\n                style={{ color: key === edit.field ? \"#0F9960\" : undefined }}\n              >\n                <strong>{startCase(key)}</strong>:{\" \"}\n                {key === edit.field ? edit.edited_value : entity[key]}\n              </p>\n            ))}\n          </div>\n        </div>\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          padding: \"0 20px 20px 20px\",\n          justifyContent: \"flex-end\"\n        }}\n      >\n        <Button\n          intent={Intent.DANGER}\n          type=\"submit\"\n          onClick={() =>\n            post(`edits/${edit.edit_id}/reject`).then(() => reload())\n          }\n          style={{ marginLeft: \"15px\" }}\n        >\n          Reject Edit\n        </Button>\n        <Button\n          intent={Intent.SUCCESS}\n          type=\"submit\"\n          onClick={() =>\n            post(`edits/${edit.edit_id}/accept/accepted`).then(() => reload())\n          }\n          style={{ marginLeft: \"15px\" }}\n        >\n          Accept Edit\n        </Button>\n      </div>\n    </>\n  );\n}\n\nfunction diff(orig, edit) {\n  let diff;\n  if (isNaN(orig) || isNaN(edit)) {\n    const differ = new DiffMatchPatch();\n    diff = differ.diff_main(orig, edit);\n    differ.diff_cleanupSemantic(diff);\n  } else {\n    orig = 0 + orig;\n    edit = 0 + edit;\n    diff = [\n      [-1, +orig],\n      [1, +edit]\n    ];\n  }\n  return (\n    <>\n      {diff.map((d, index) => {\n        switch (d[0]) {\n          case -1:\n            return (\n              <strike key={index} style={{ color: \"#FF7373\" }}>\n                {\" \"}\n                {d[1]}{\" \"}\n              </strike>\n            );\n          case 0:\n            return <strong key={index}>{d[1]}</strong>;\n          case 1:\n            return (\n              <strong key={index} style={{ color: \"#0F9960\" }}>\n                {d[1]}\n              </strong>\n            );\n          default:\n            return <></>;\n        }\n      })}\n    </>\n  );\n}\n\nexport default ReviewPage;\n","import React from \"react\";\nimport { Button, Colors, Intent } from \"@blueprintjs/core\";\nimport { cloneDeep, isEmpty, merge } from \"lodash\";\nimport equal from \"fast-deep-equal\";\nimport { emojiIndex } from \"emoji-mart\";\nimport CONFIG from \"../../config\";\nimport { post, useAPI } from \"../../utils\";\nimport AppToaster from \"../AppToaster\";\n\nexport const MAX_WIDTH = 10;\nexport const MAX_HEIGHT = 10;\nexport const MAX_FLOORS = 10;\n\nconst STARTING_WIDTH = 3;\nconst STARTING_HEIGHT = 3;\nconst STARTING_FLOORS = 1;\n\nexport const DEFAULT_EMOJI = \"❓\";\n\nexport const TILE_COLORS = [\n  Colors.GRAY3,\n  Colors.VIOLET5,\n  Colors.RED5,\n  Colors.SEPIA5,\n  Colors.GOLD5,\n  Colors.FOREST5,\n  Colors.BLUE5\n];\n\nconst grass = [\n  \"grass\",\n  \"field\",\n  \"plains\",\n  \"forest\",\n  \"land\",\n  \"gardens\",\n  \"meadow\",\n  \"woods\",\n  \"jungle\",\n  \"swamp\",\n  \"green\"\n];\nconst water = [\n  \"water\",\n  \"lake\",\n  \"river\",\n  \"ocean\",\n  \"sea\",\n  \"pond\",\n  \"lagoon\",\n  \"shore\",\n  \"blue\"\n];\nconst buildings = [\n  \"castle\",\n  \"fortress\",\n  \"church\",\n  \"cathedral\",\n  \"tower\",\n  \"building\",\n  \"cave\",\n  \"gray\",\n  \"grey\"\n];\nconst royal = [\"king\", \"queen\", \"palace\", \"purple\"];\nconst brick = [\"brick\", \"fire\", \"red\"];\nconst path = [\"path\", \"road\", \"bridge\", \"brown\"];\nconst farm = [\"farm\", \"cottage\", \"sand\", \"beach\", \"yellow\", \"gold\"];\n\n/**\n * Utility function for suggesting a biome (tile color) for a given room name\n */\nexport function findBiome(name, current) {\n  const lowName = name.toLowerCase();\n  if (grass.some(biome => lowName.indexOf(biome) > -1)) {\n    return Colors.FOREST5;\n  }\n  if (water.some(biome => lowName.indexOf(biome) > -1)) {\n    return Colors.BLUE5;\n  }\n  if (brick.some(biome => lowName.indexOf(biome) > -1)) {\n    return Colors.RED5;\n  }\n  if (path.some(biome => lowName.indexOf(biome) > -1)) {\n    return Colors.SEPIA5;\n  }\n  if (farm.some(biome => lowName.indexOf(biome) > -1)) {\n    return Colors.GOLD5;\n  }\n  if (buildings.some(biome => lowName.indexOf(biome) > -1)) {\n    return Colors.GRAY3;\n  }\n  if (royal.some(biome => lowName.indexOf(biome) > -1)) {\n    return Colors.VIOLET5;\n  }\n  return current;\n}\n\n/**\n * Utility function for determining whether content should be \"white\" or \"black\" on a color background\n */\nexport function invertColor(hex) {\n  if (hex.indexOf(\"#\") === 0) {\n    hex = hex.slice(1);\n  }\n  // convert 3-digit hex to 6-digits.\n  if (hex.length === 3) {\n    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n  }\n  // invert color components\n  var r = parseInt(hex.slice(0, 2), 16),\n    g = parseInt(hex.slice(2, 4), 16),\n    b = parseInt(hex.slice(4, 6), 16);\n  // pick black/white based on intensity\n  return r * 0.299 + g * 0.587 + b * 0.114 > 150 ? \"#182026\" : \"#F5F8FA\";\n}\n\nconst deleteWorld = async (id) => {\n  const res = await post(\"deleteWorld\", id);\n  const data = await res.json();\n  console.log(data)\n}\n\nexport async function ListWorlds() {\n  const res = await fetch(`${CONFIG.host}:${CONFIG.port}/builder/worlds/`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    }});\n  const data = await res.json()\n  console.log(data)\n  return (\n    <>\n      <table\n        data-testid=\"world-review\"\n        style={{ width: \"100%\" }}\n        className=\"bp3-html-table bp3-html-table-condensed bp3-interactive\"\n      >\n        <thead>\n          <tr>\n            <th>World ID</th>\n            <th>World Name</th>\n            <th>Load</th>\n            <th>Delete</th>\n          </tr>\n        </thead>\n        <tbody>\n          {data.map((id, name) => (\n            <React.Fragment key={id}>\n              <tr\n                data-testid=\"tr-review\"\n                style={{\n                  background: undefined\n                }}\n              >\n                <td>{id}</td>\n                <td>\n                  <strong>{name}</strong>\n                </td>\n                <td>\n                  <Button\n                    intent={Intent.SUCCESS}\n                    type=\"submit\"\n                    onClick={() => deleteWorld(id)}\n                    style={{ marginLeft: \"15px\" }}\n                  >\n                    Load\n                  </Button>\n                </td>\n                <td>\n                  <Button\n                    intent={Intent.DANGER}\n                    type=\"submit\"\n                    onClick={() => getWorld(id)}\n                    style={{ marginLeft: \"15px\" }}\n                  >\n                    Delete\n                  </Button>\n                </td>\n              </tr>\n              </React.Fragment>\n            ))}\n        </tbody>\n      </table>\n    </>\n  );\n}\n\nconst getWorld = async (id) => {\n  // should get back json of the loaded world, need to reconstruct it too!\n  const res = await fetch(`${CONFIG.host}:${CONFIG.port}/builder/world/${id}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    }});\n  const data = await res.json()\n  console.log(data)\n  return data;\n}\n\n\nexport function findEmoji(name) {\n  let results = emojiIndex.search(name);\n  if (results[0]) {\n    return results[0].native;\n  }\n  const words = name.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    let string = words[i];\n    if (words[i].charAt(words[i].length - 1) === \"s\") {\n      string = words[i].substring(0, words[i].length - 1);\n    }\n    results = emojiIndex.search(string);\n    if (results[0]) {\n      return results[0].native;\n    }\n  }\n  return DEFAULT_EMOJI;\n}\n\nconst mapReducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_MAP\":\n      return action.map;\n    case \"SET_TILE\":\n      return state.map((floor, floorIndex) => {\n        if (floorIndex === action.floor) {\n          return {\n            ...floor,\n            tiles: {\n              ...floor.tiles,\n              [`${action.x} ${action.y}`]: action.newTile\n            }\n          };\n        } else {\n          return floor;\n        }\n      });\n    case \"EDIT_FLOOR_NAME\":\n      return state.map((floor, floorIndex) => {\n        if (floorIndex === action.floor) {\n          return {\n            ...floor,\n            name: action.name\n          };\n        } else {\n          return floor;\n        }\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst createdEntitiesReducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_ALL\":\n      return action.entities;\n    case \"ADD_ENTITY\": {\n      return Object.assign({}, state, {\n        [action.entityType]: {\n          ...state[action.entityType],\n          [state.nextID]: action.data\n        },\n        nextID: state.nextID + 1\n      });\n    }\n    case \"EDIT_ENTITY\": {\n      return merge(state, {\n        [action.entityType]: { [action.id]: action.data }\n      });\n    }\n    default:\n      return state;\n  }\n};\n\n/**\n * Custom hook managing map state.\n * Includes utility functions for setting state of the map.\n */\nexport function useWorldBuilder(upload) {\n  const [dimensions, setDimensions] = React.useState(\n    upload\n      ? upload.data.dimensions\n      : {\n          height: STARTING_HEIGHT,\n          width: STARTING_WIDTH,\n          floors: STARTING_FLOORS\n        }\n  );\n\n  // Floors and tiles kept seperate to avoid unnecessary updates on either side\n  // The index key is used because the Reorder component does not pass index to children\n  // Represents the map state\n  // Structured as: Array(Map(name: FloorName, tiles: Map(x y': TileData), walls: Map('x1 y1|x2 y2': Wall)))\n  const initialMap = upload\n    ? upload.data.map\n    : [{ name: \"1F\", tiles: {}, walls: {} }];\n  const [map, mapDispatch] = React.useReducer(mapReducer, initialMap);\n\n  // Local entity store\n  const [entities, entitiesDispatch] = React.useReducer(\n    createdEntitiesReducer,\n    upload\n      ? upload.data.entities\n      : { room: {}, character: {}, object: {}, nextID: 1 }\n  );\n\n  // Floor currently being viewed in the editor\n  const [currFloor, setCurrFloor] = React.useState(0);\n\n  // make sure all floors are in the map\n  React.useEffect(() => {\n    const newMap = [];\n    for (let f = 0; f < dimensions.floors; f++) {\n      newMap.push(\n        map[f] ? map[f] : { name: `${f + 1}F`, tiles: {}, walls: {} }\n      );\n    }\n    mapDispatch({ type: \"SET_MAP\", map: newMap });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dimensions]);\n\n  // Add an entity to the local store and return its temporary id\n  const addEntity = (data, entityType) => {\n    const id = entities.nextID;\n    entitiesDispatch({ type: \"ADD_ENTITY\", data, entityType });\n    return id;\n  };\n\n  // Edit an entity in the local store\n  const editEntity = (id, data, entityType) => {\n    entitiesDispatch({ type: \"EDIT_ENTITY\", id, data, entityType });\n  };\n\n  // Return the id of the entity in the store, or add it to the store and return the new id\n  const findOrAddEntity = (data, entityType) => {\n    for (let entity in entities[entityType]) {\n      if (equal(entities[entityType][entity], data)) {\n        return entity;\n      }\n    }\n    return addEntity(data, entityType);\n  };\n\n  // Change data in a specific tile on the map\n  const setTile = (x, y, newTile, floor = currFloor) => {\n    mapDispatch({ type: \"SET_TILE\", x, y, newTile, floor });\n  };\n\n  // Clear data on a tile\n  const clearTile = (x, y, floor = currFloor) => {\n    const newMap = cloneDeep(map);\n    removeStairsTile(x, y, newMap);\n    delete newMap[floor].tiles[`${x} ${y}`];\n    mapDispatch({ type: \"SET_MAP\", map: newMap });\n  };\n\n  // Swap the position of two tiles on the current floor\n  const swapTiles = (x1, y1, x2, y2) => {\n    mapDispatch({\n      type: \"SET_MAP\",\n      map: map.map((floor, f) => {\n        if (f === currFloor) {\n          removeStairsTile(x1, y1);\n          removeStairsTile(x2, y2);\n          return {\n            ...floor,\n            tiles: {\n              ...floor.tiles,\n              [`${x1} ${y1}`]: floor.tiles[`${x2} ${y2}`],\n              [`${x2} ${y2}`]: floor.tiles[`${x1} ${y1}`]\n            }\n          };\n        } else {\n          return floor;\n        }\n      })\n    });\n  };\n\n  // Add a row to the top of the map on all floors\n  const addRowTop = () => {\n    mapDispatch({\n      type: \"SET_MAP\",\n      map: map.map(floor => {\n        const tileKeys = Object.keys(floor.tiles);\n        const newTiles = {};\n        tileKeys.forEach(key => {\n          const [x, y] = key.split(\" \");\n          newTiles[`${x} ${parseInt(y) + 1}`] = floor.tiles[key];\n        });\n        const wallKeys = Object.keys(floor.walls);\n        const newWalls = {};\n        wallKeys.forEach(key => {\n          const [t1, t2] = key.split(\"|\");\n          const [x1, y1] = t1.split(\" \");\n          const [x2, y2] = t2.split(\" \");\n          newWalls[`${x1} ${parseInt(y1) + 1}|${x2} ${parseInt(y2) + 1}`] =\n            floor.walls[key];\n        });\n        return { ...floor, tiles: newTiles, walls: newWalls };\n      })\n    });\n    setDimensions({ ...dimensions, height: dimensions.height + 1 });\n  };\n\n  // Add a row to the bottom of the map on all floors\n  const addRowBot = () => {\n    setDimensions({ ...dimensions, height: dimensions.height + 1 });\n  };\n\n  // Add a column to the left side of the map on all floors\n  const addColFront = () => {\n    mapDispatch({\n      type: \"SET_MAP\",\n      map: map.map(floor => {\n        const tileKeys = Object.keys(floor.tiles);\n        const newTiles = {};\n        tileKeys.forEach(key => {\n          const [x, y] = key.split(\" \");\n          newTiles[`${parseInt(x) + 1} ${y}`] = floor.tiles[key];\n        });\n        const wallKeys = Object.keys(floor.walls);\n        const newWalls = {};\n        wallKeys.forEach(key => {\n          const [t1, t2] = key.split(\"|\");\n          const [x1, y1] = t1.split(\" \");\n          const [x2, y2] = t2.split(\" \");\n          newWalls[`${parseInt(x1) + 1} ${y1}|${parseInt(x2) + 1} ${y2}`] =\n            floor.walls[key];\n        });\n        return { ...floor, tiles: newTiles, walls: newWalls };\n      })\n    });\n    setDimensions({ ...dimensions, width: dimensions.width + 1 });\n  };\n\n  // Add a column to the right side of the map on all floors\n  const addColEnd = () => {\n    setDimensions({ ...dimensions, width: dimensions.width + 1 });\n  };\n\n  // Add a new floor\n  const addFloor = () => {\n    setDimensions({ ...dimensions, floors: dimensions.floors + 1 });\n  };\n\n  // Edit the name of a floor\n  const editFloorName = (newName, floor) => {\n    mapDispatch({ type: \"EDIT_FLOOR_NAME\", name: newName, floor });\n  };\n\n  // Remove stairs from a tile\n  const removeStairsTile = (x, y, baseMap = map, f = currFloor) => {\n    if (baseMap[f] && baseMap[f].tiles[`${x} ${y}`]) {\n      delete baseMap[f].tiles[`${x} ${y}`].stairDown;\n      delete baseMap[f].tiles[`${x} ${y}`].stairUp;\n    }\n    if (baseMap[f - 1] && baseMap[f - 1].tiles[`${x} ${y}`]) {\n      delete baseMap[f - 1].tiles[`${x} ${y}`].stairUp;\n    }\n    if (baseMap[f + 1] && baseMap[f + 1].tiles[`${x} ${y}`]) {\n      delete baseMap[f + 1].tiles[`${x} ${y}`].stairDown;\n    }\n  };\n\n  // Remove all stairs up or down from a floor\n  const removeStairsFloor = (floor, stair) => {\n    if (!isEmpty(floor) && !isEmpty(floor.tiles)) {\n      Object.keys(floor.tiles).forEach(key => {\n        if (!isEmpty(floor.tiles[key])) {\n          delete floor.tiles[key][stair];\n        }\n      });\n    }\n  };\n\n  // Delete a floor\n  const deleteFloor = index => {\n    const newMap = map.filter((_floor, i) => i !== index);\n    removeStairsFloor(newMap[index - 1], \"stairUp\");\n    removeStairsFloor(newMap[index], \"stairDown\");\n    mapDispatch({ type: \"SET_MAP\", map: newMap });\n\n    if (currFloor >= dimensions.floors - 1) {\n      setCurrFloor(0);\n    }\n    setDimensions({ ...dimensions, floors: dimensions.floors - 1 });\n  };\n\n  // move a floor to a different position\n  const reorderFloors = (i1, i2) => {\n    const reorderedFloor = map[i1];\n    const filteredMap = map.filter((_floor, i) => i !== i1);\n\n    removeStairsFloor(reorderedFloor, \"stairUp\");\n    removeStairsFloor(reorderedFloor, \"stairDown\");\n    removeStairsFloor(filteredMap[i1 - 1], \"stairUp\");\n    removeStairsFloor(filteredMap[i1], \"stairDown\");\n\n    const newMap = [];\n    for (let i = 0; i < dimensions.floors; i++) {\n      newMap.push(\n        i < i2 ? filteredMap[i] : i === i2 ? reorderedFloor : filteredMap[i - 1]\n      );\n    }\n\n    removeStairsFloor(newMap[i2 - 1], \"stairUp\");\n    removeStairsFloor(newMap[i2 + 1], \"stairDown\");\n\n    mapDispatch({ type: \"SET_MAP\", map: newMap });\n\n    if (currFloor === i1) {\n      setCurrFloor(i2);\n    }\n  };\n\n  // Get tile at specified indices, or an empty object otherwise\n  const getTileAt = (x, y, f = currFloor) => {\n    try {\n      return map[f].tiles[`${x} ${y}`];\n    } catch {\n      return {};\n    }\n  };\n\n  // Toggle a wall\n  const toggleWall = (key, f = currFloor) => {\n    if (map[f].walls[key]) {\n      const newMap = cloneDeep(map);\n      delete newMap[f].walls[key];\n      mapDispatch({ type: \"SET_MAP\", map: newMap });\n    } else {\n      mapDispatch({\n        type: \"SET_MAP\",\n        map: map.map((floor, floorIndex) => {\n          if (floorIndex === f) {\n            return { ...floor, walls: { ...floor.walls, [key]: true } };\n          } else {\n            return floor;\n          }\n        })\n      });\n    }\n  };\n\n  const filteredMap = () => {\n    const filtered = [];\n    for (let i = 0; i < map.length; i++) {\n      const newFloor = { name: map[i].name, walls: map[i].walls };\n      const newTiles = {};\n      for (let tile in map[i].tiles) {\n        const [x, y] = tile.split(\" \");\n        if (x < dimensions.width && y < dimensions.height) {\n          newTiles[tile] = map[i].tiles[tile];\n        }\n      }\n      newFloor.tiles = newTiles;\n      filtered.push(newFloor);\n    }\n    return filtered;\n  };\n\n\n\n\n  const postWorld = async () => {\n    const store = { height: dimensions.height, width: dimensions.width, floors: dimensions.floors,\n      tile: {}, room: {}, character: {}, object: {} };\n    const map = filteredMap();\n    // Create store of all entities being used in the world\n    map.forEach(floor => {\n      Object.values(floor.tiles).forEach(tile => {\n        store.room[tile.room] = entities.room[tile.room];\n        for (let index in tile.characters) {\n          store.character[tile.characters[index]] =\n            entities.character[tile.characters[index]];\n        }\n        for (let index in tile.objects) {\n          store.object[tile.objects[index]] =\n            entities.object[tile.objects[index]];\n        }\n      });\n    });\n    console.table(map);\n    // create store of all edges in the world\n    const edges = [];\n    // Create all edge requests and post all of them\n    for (let floor = 0; floor < map.length; floor++) {\n      const tiles = map[floor].tiles;\n      for (let coord in tiles) {\n        store.tile[coord + \" \" + floor] = tiles[coord]\n        const payload = { room: -1, chars: [], objs: [], neighbors: [] };\n        payload.room = store.room[tiles[coord].room].id;\n        tiles[coord].characters.forEach(character => {\n          payload.chars.push(store.character[character].id);\n        });\n        tiles[coord].objects.forEach(object => {\n          payload.objs.push(store.object[object].id);\n        });\n        if (tiles[coord].stairUp) {\n          payload.neighbors.push({\n            dst_id: store.room[map[floor + 1].tiles[coord].room].id, dir: 'neighbors above'\n          });\n        }\n        if (tiles[coord].stairDown) {\n          payload.neighbors.push({\n            dst_id: store.room[map[floor - 1].tiles[coord].room].id, dir: 'neighbors below'\n          });\n        }\n        // Ensure neighbours aren't blocked by walls\n        const [x, y] = coord.split(\" \").map(i => parseInt(i));\n        const neighbors = [\n          `${x - 1} ${y}`,\n          `${x + 1} ${y}`,\n          `${x} ${y - 1}`,\n          `${x} ${y + 1}`\n        ];\n        const dirs = [\n          'neighbors to the north',\n          'neighbors to the south',\n          'neighbors to the west',\n          'neighbors to the east'\n        ]\n        for (let index in neighbors) {\n          const direction = dirs[index];\n          const neighbor = neighbors[index];\n          if (\n            !Object.keys(map[floor].walls).some(\n              wall => wall.includes(neighbor) && wall.includes(coord)\n            )\n          ) {\n            if (!isEmpty(tiles[neighbor])) {\n              payload.neighbors.push({dst_id: store.room[tiles[neighbor].room].id, dir: direction});\n            }\n          }\n        }\n\n        edges.push(payload)\n      }\n    }\n    // send it to the saving format!\n    store.edges = edges\n    console.table(store)\n    const res = await post(\"world/\", store);\n    const data = await res.json();\n\n    AppToaster.show({\n      intent: Intent.SUCCESS,\n      message: \"World Saved! \"\n    });   \n  }\n\n  // Post all edges to the API\n  const postEdges = async () => {\n    const store = { room: {}, character: {}, object: {} };\n    const map = filteredMap();\n    // Create maps of all entities being used in the world\n    map.forEach(floor => {\n      Object.values(floor.tiles).forEach(tile => {\n        store.room[tile.room] = entities.room[tile.room];\n        for (let index in tile.characters) {\n          store.character[tile.characters[index]] =\n            entities.character[tile.characters[index]];\n        }\n        for (let index in tile.objects) {\n          store.object[tile.objects[index]] =\n            entities.object[tile.objects[index]];\n        }\n      });\n    });\n    // Post all used entities to the API and store their returned ID for edges\n    const createReqs = [].concat(\n      Object.values(store.room).map(async room => {\n        const res = await post(\"entities/room\", room);\n        const data = await res.json();\n        room.id = data[0];\n      }),\n      Object.values(store.character).map(async character => {\n        const res = await post(\"entities/character\", character);\n        const data = await res.json();\n        character.id = data[0];\n      }),\n      Object.values(store.object).map(async object => {\n        const res = await post(\"entities/object\", object);\n        const data = await res.json();\n        object.id = data[0];\n      })\n    );\n\n    await Promise.all(createReqs);\n\n    const edgeReqs = [];\n    // Create all edge requests and post all of them\n    for (let floor = 0; floor < map.length; floor++) {\n      const tiles = map[floor].tiles;\n      for (let coord in tiles) {\n        const payload = { room: -1, chars: [], objs: [], neighbors: [] };\n        payload.room = store.room[tiles[coord].room].id;\n        tiles[coord].characters.forEach(character => {\n          payload.chars.push(store.character[character].id);\n        });\n        tiles[coord].objects.forEach(object => {\n          payload.objs.push(store.object[object].id);\n        });\n        if (tiles[coord].stairUp) {\n          payload.neighbors.push(\n            store.room[map[floor + 1].tiles[coord].room].id\n          );\n        }\n        if (tiles[coord].stairDown) {\n          payload.neighbors.push(\n            store.room[map[floor - 1].tiles[coord].room].id\n          );\n        }\n        // Ensure neighbours aren't blocked by walls\n        const [x, y] = coord.split(\" \").map(i => parseInt(i));\n        const neighbors = [\n          `${x - 1} ${y}`,\n          `${x + 1} ${y}`,\n          `${x} ${y - 1}`,\n          `${x} ${y + 1}`\n        ];\n        neighbors.forEach(neighbor => {\n          if (\n            !Object.keys(map[floor].walls).some(\n              wall => wall.includes(neighbor) && wall.includes(coord)\n            )\n          ) {\n            if (!isEmpty(tiles[neighbor])) {\n              payload.neighbors.push(store.room[tiles[neighbor].room].id);\n            }\n          }\n        });\n        edgeReqs.push(post(\"edges\", payload));\n      }\n    }\n    await Promise.all(edgeReqs);\n    AppToaster.show({\n      intent: Intent.SUCCESS,\n      message: \"Successfully created all edges\"\n    });\n  };\n\n  const exportWorld = () => {\n    const data = JSON.stringify({ dimensions, map, entities }, null, \"\\t\");\n    var element = document.createElement(\"a\");\n    element.setAttribute(\n      \"href\",\n      \"data:text/plain;charset=utf-8,\" + encodeURIComponent(data)\n    );\n    element.setAttribute(\"download\", `world-${Date.now().toString()}.json`);\n\n    element.style.display = \"none\";\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n  };\n\n  return {\n    floorManager: {\n      setCurrFloor,\n      addFloor,\n      deleteFloor,\n      reorderFloors,\n      editFloorName\n    },\n    currFloor,\n    map,\n    setTile,\n    clearTile,\n    swapTiles,\n    getTileAt,\n    toggleWall,\n    dimensions,\n    setDimensions,\n    addRowTop,\n    addRowBot,\n    addColFront,\n    addColEnd,\n    entities,\n    editEntity,\n    findOrAddEntity,\n    postEdges,\n    exportWorld,\n    postWorld,\n  };\n}\n","import React from \"react\";\n\nfunction ColorPicker({ colors, value, handleChange, advanced }) {\n  return (\n    <div\n      style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\" }}\n    >\n      {colors.map((color, index) => {\n        return (\n          <div\n            key={index}\n            style={{\n              display: \"inline-block\",\n              maxWidth: \"20px\",\n              width: \"20px\",\n              maxHeight: \"20px\",\n              height: \"20px\",\n              borderRadius: \"5px\",\n              background: color,\n              borderColor: \"#5C7080\",\n              borderStyle: value === color ? \"solid\" : \"\",\n              borderWidth: \"2px\",\n              boxShadow: value === color ? `0px 0px 8px ${value}` : \"\",\n              margin: \"2px\",\n              cursor: \"pointer\"\n            }}\n            onClick={() => handleChange(\"color\", color)}\n          />\n        );\n      })}\n      {advanced && (\n        <input\n          style={{\n            maxHeight: \"20px\",\n            maxWidth: \"20px\",\n            height: \"20px\",\n            width: \"20px\",\n            borderRadius: \"5px\",\n            padding: \"0px 0px 0px 0px\"\n          }}\n          type=\"color\"\n          value={value}\n          onChange={event => handleChange(\"color\", event.target.value)}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default ColorPicker;\n","import React from \"react\";\nimport { Intent, Menu, MenuItem, Tooltip, Position } from \"@blueprintjs/core\";\nimport { MultiSelect } from \"@blueprintjs/select\";\nimport equal from \"fast-deep-equal\";\nimport \"@blueprintjs/select/lib/css/blueprint-select.css\";\n\nimport CONFIG from \"../../config\";\nimport { useAPI } from \"../../utils\";\n\nconst SUGGEST_SIZE = 100;\n\nfunction BaseMultiSelect({\n  id,\n  name,\n  errors,\n  touched,\n  setFieldTouched,\n  formValue,\n  handleChange,\n  type,\n  tooltip,\n  onItemSelect,\n  entities\n}) {\n  const [items, setItems] = React.useState([]);\n  const [query, setQuery] = React.useState(\"\");\n  const [currItems, setCurrItems] = React.useState([]);\n  const { loading, result } = useAPI(\n    CONFIG,\n    `/entities/${type}?search=${query}`\n  );\n\n  React.useEffect(() => {\n    if (!loading) {\n      if (entities) {\n        const localEntities = Object.values(entities[type]);\n        const results = localEntities\n          .concat(result.slice(0, SUGGEST_SIZE + localEntities.length + 1))\n          .filter(\n            (item, index, self) => self.findIndex(t => equal(t, item)) === index\n          );\n\n        return setItems(results);\n      }\n      return setItems(result);\n    }\n  }, [result, loading, entities, type]);\n\n  React.useEffect(() => {\n    // When Reset is clicked on the form\n    setCurrItems(formValue);\n  }, [formValue, items]);\n\n  const filterItems = (query, obj, _index, exactMatch) => {\n    const normalizedTitle = obj.name.toLowerCase();\n    const normalizedQuery = query.toLowerCase();\n    if (exactMatch) {\n      return normalizedTitle === normalizedQuery;\n    } else {\n      let string = \"\";\n      for (let key in obj) {\n        string += obj[key] + \". \";\n      }\n      const result = string.toLowerCase().indexOf(normalizedQuery) >= 0;\n      return result;\n    }\n  };\n\n  const removeTag = (_value, index) => {\n    const newItems = currItems.filter((_item, i) => {\n      return i !== index;\n    });\n    const change = formValue.filter((_item, i) => {\n      return i !== index;\n    });\n    setCurrItems(newItems);\n    handleChange(name, change);\n  };\n\n  const renderOption = (obj, { handleClick, modifiers, index }) => {\n    if (!modifiers.matchesPredicate) {\n      return null;\n    }\n\n    return (\n      <MenuItem\n        active={modifiers.active}\n        key={index}\n        onClick={handleClick}\n        text={\n          tooltip ? (\n            <Tooltip\n              content={obj[tooltip]}\n              targetTagName=\"div\"\n              popoverClassName=\"popover-tooltip\"\n              position={Position.TOP_RIGHT}\n              usePortal={true}\n            >\n              {obj.name}\n            </Tooltip>\n          ) : (\n            obj.name\n          )\n        }\n        shouldDismissPopover={false}\n      />\n    );\n  };\n\n  return (\n    <div onBlur={e => setFieldTouched(name)}>\n      <MultiSelect\n        id={id}\n        name={name}\n        items={items}\n        itemRenderer={renderOption}\n        itemListRenderer={renderItemList}\n        tagInputProps={{\n          intent: errors && touched ? Intent.DANGER : null,\n          \"data-testid\": \"base-multi-select\",\n          onRemove: removeTag\n        }}\n        onItemSelect={e => {\n          if (onItemSelect) {\n            const result = onItemSelect(e, type);\n            setCurrItems([...currItems, result]);\n            handleChange(name, [...formValue, result], e);\n          } else {\n            setCurrItems([...currItems, e]);\n            handleChange(name, [...formValue, e.id]);\n          }\n          setQuery(\"\");\n        }}\n        popoverProps={{ usePortal: false }}\n        itemPredicate={filterItems}\n        selectedItems={currItems}\n        query={query}\n        onQueryChange={q => setQuery(q)}\n        resetOnQuery={true}\n        tagRenderer={item => {\n          return entities && entities[type][item]\n            ? entities[type][item].name\n            : item.name;\n        }}\n      />\n    </div>\n  );\n}\n\nfunction renderItemList({ filteredItems, renderItem }) {\n  const topResults = filteredItems.slice(0, SUGGEST_SIZE);\n  return (\n    <Menu>\n      {filteredItems.length > 0 ? (\n        <>\n          {topResults.map((item, index) => {\n            return renderItem(item, index);\n          })}\n          {filteredItems.length > SUGGEST_SIZE && (\n            <MenuItem\n              style={{ textAlign: \"center\" }}\n              disabled={true}\n              text=\"...\"\n            />\n          )}\n        </>\n      ) : (\n        <MenuItem disabled={true} text=\"No results.\" />\n      )}\n    </Menu>\n  );\n}\n\nexport default BaseMultiSelect;\n","import React from \"react\";\nimport { Formik } from \"formik\";\nimport {\n  FormGroup,\n  Button,\n  Intent,\n  Classes,\n  Divider,\n  Icon\n} from \"@blueprintjs/core\";\nimport { isEmpty } from \"lodash\";\n\nimport ColorPicker from \"./ColorPicker\";\nimport BaseSuggest from \"./BaseSuggest\";\nimport BaseMultiSelect from \"./BaseMultiSelect\";\nimport { TILE_COLORS, findBiome, findEmoji } from \"../worldbuilding/utils\";\n\nexport const emptyTileForm = {\n  room: undefined,\n  characters: [],\n  objects: [],\n  color: TILE_COLORS[0]\n};\n\nfunction TileForm({\n  initialInputs,\n  onSubmit,\n  onClear,\n  entities,\n  findOrAddEntity,\n  setShowAdvanced,\n  selected,\n  setSelected\n}) {\n  return (\n    <Formik\n      initialValues={isEmpty(initialInputs) ? emptyTileForm : initialInputs}\n      validate={values => {\n        let errors = {};\n        if (isNaN(values.room)) {\n          errors.room = \"Required\";\n        }\n        return errors;\n      }}\n      onSubmit={onSubmit}\n    >\n      {props => {\n        const {\n          values,\n          setFieldValue,\n          touched,\n          setFieldTouched,\n          errors,\n          dirty,\n          isValid,\n          handleSubmit,\n          handleReset\n        } = props;\n\n        const setRoomValue = (name, value, fullValue) => {\n          setFieldValue(name, value);\n          setFieldValue(\"color\", findBiome(fullValue.name, values.color));\n        };\n\n        const hasContent = () => {\n          return (\n            !isNaN(values.room) ||\n            !isEmpty(values.characters) ||\n            !isEmpty(values.objects)\n          );\n        };\n\n        return (\n          <form>\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                alignContent: \"stretch\",\n                justifyContent: \"space-between\"\n              }}\n            >\n              <h5 style={{ fontSize: \"18px\" }} className={Classes.HEADING}>\n                <Icon color=\"#5c7080\" iconSize={20} icon=\"edit\" /> Tile Editor\n              </h5>\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"flex-end\"\n                }}\n                onClick={() => {\n                  setSelected({ ...selected, data: { ...values } });\n                  setShowAdvanced(true);\n                }}\n              >\n                <Button icon=\"build\" />\n              </div>\n            </div>\n            <Divider />\n            <FormGroup\n              label=\"Room\"\n              labelInfo=\"(required)\"\n              labelFor=\"room-input\"\n            >\n              <BaseSuggest\n                id=\"room-input\"\n                name=\"room\"\n                type=\"room\"\n                errors={errors.room}\n                touched={touched.room}\n                setFieldTouched={setFieldTouched}\n                formValue={values.room}\n                handleChange={setRoomValue}\n                entities={entities}\n                onItemSelect={findOrAddEntity}\n              />\n              {errors.room && touched.room && (\n                <div className=\"form-error\">{errors.room}</div>\n              )}\n            </FormGroup>\n            <ColorPicker\n              colors={TILE_COLORS}\n              value={values.color}\n              handleChange={setFieldValue}\n            />\n            <FormGroup label=\"Characters in Room\" labelFor=\"characters-input\">\n              <BaseMultiSelect\n                id=\"characters-input\"\n                name=\"characters\"\n                type=\"character\"\n                errors={errors.characters}\n                touched={touched.characters}\n                setFieldTouched={setFieldTouched}\n                formValue={values.characters}\n                handleChange={setFieldValue}\n                tooltip=\"persona\"\n                entities={entities}\n                onItemSelect={(e, type) => {\n                  e.emoji = findEmoji(e.name);\n                  return findOrAddEntity(e, type);\n                }}\n              />\n              {errors.characters && touched.characters && (\n                <div className=\"form-error\">{errors.characters}</div>\n              )}\n            </FormGroup>\n            <FormGroup label=\"Objects in Room\" labelFor=\"objects-input\">\n              <BaseMultiSelect\n                id=\"objects-input\"\n                name=\"objects\"\n                type=\"object\"\n                errors={errors.objects}\n                touched={touched.objects}\n                setFieldTouched={setFieldTouched}\n                formValue={values.objects}\n                handleChange={setFieldValue}\n                tooltip=\"physical_description\"\n                entities={entities}\n                onItemSelect={(e, type) => {\n                  e.emoji = findEmoji(e.name);\n                  return findOrAddEntity(e, type);\n                }}\n              />\n              {errors.objects && touched.objects && (\n                <div className=\"form-error\">{errors.objects}</div>\n              )}\n            </FormGroup>\n\n            <Button\n              type=\"reset\"\n              onClick={onClear}\n              disabled={!hasContent()}\n              style={{ marginRight: \"15px\" }}\n            >\n              Clear\n            </Button>\n            <Button\n              type=\"reset\"\n              onClick={handleReset}\n              disabled={!dirty}\n              style={{ marginRight: \"15px\" }}\n            >\n              Reset\n            </Button>\n            <Button\n              intent={Intent.PRIMARY}\n              type=\"submit\"\n              onClick={handleSubmit}\n              disabled={!dirty || !isValid}\n              style={{ marginLeft: \"15px\" }}\n            >\n              Save Changes\n            </Button>\n          </form>\n        );\n      }}\n    </Formik>\n  );\n}\n\nexport default TileForm;\n","import React from \"react\";\nimport { Popover, Icon, Tooltip } from \"@blueprintjs/core\";\nimport { isEmpty, cloneDeep } from \"lodash\";\n\nimport TileForm from \"../forms/TileForm\";\nimport { invertColor } from \"./utils\";\n\n/**\n * Component for each Tile in the map grid\n */\nfunction Tile({\n  x,\n  y,\n  tile,\n  selected,\n  setSelected,\n  showAdvanced,\n  setShowAdvanced,\n  tileStyle,\n  state\n}) {\n  const handleSubmit = data => {\n    state.setTile(x, y, { ...tile, ...data });\n    setSelected(null);\n  };\n\n  const handleClear = () => {\n    state.clearTile(x, y);\n    setSelected(null);\n  };\n\n  // toggle stairs on the tile clicked, and this tile and on the other floor\n  const toggleStairs = (event, key) => {\n    event.stopPropagation(); // prevent the popup firing\n    const toggleTo = !tile[key];\n    const newTile = cloneDeep(tile);\n    newTile[key] = toggleTo;\n    state.setTile(x, y, newTile);\n    const otherFloor = state.currFloor + (key === \"stairDown\" ? -1 : 1);\n    const newConnectedTile = cloneDeep(state.getTileAt(x, y, otherFloor));\n    newConnectedTile[key === \"stairDown\" ? \"stairUp\" : \"stairDown\"] = toggleTo;\n    state.setTile(x, y, newConnectedTile, otherFloor);\n  };\n\n  const contentColor = invertColor(\n    tile && !isNaN(tile.room) && tile.color ? tile.color : \"#ced9e0\"\n  );\n\n  return (\n    <>\n      <Icon\n        color={contentColor}\n        className={`react-grid-item-handle + ${\n          isEmpty(tile) ? \"disabled\" : \"\"\n        }`}\n        icon=\"drag-handle-horizontal\"\n      />\n      {!isEmpty(state.getTileAt(x, y, state.currFloor - 1)) && (\n        <Icon\n          color={contentColor}\n          onClick={\n            !isEmpty(tile) ? e => toggleStairs(e, \"stairDown\") : undefined\n          }\n          className={isEmpty(tile) ? \"disabled\" : \"\"}\n          style={{\n            opacity: !isEmpty(tile) && tile.stairDown ? 1 : 0.35,\n            position: \"absolute\",\n            bottom: \"5px\",\n            left: \"5px\"\n          }}\n          icon=\"arrow-bottom-left\"\n        />\n      )}\n      {!isEmpty(state.getTileAt(x, y, state.currFloor + 1)) && (\n        <Icon\n          color={contentColor}\n          onClick={!isEmpty(tile) ? e => toggleStairs(e, \"stairUp\") : undefined}\n          className={isEmpty(tile) ? \"disabled\" : \"\"}\n          style={{\n            opacity: !isEmpty(tile) && tile.stairUp ? 1 : 0.35,\n            position: \"absolute\",\n            top: \"5px\",\n            right: \"5px\"\n          }}\n          icon=\"arrow-top-right\"\n        />\n      )}\n      <Popover\n        isOpen={\n          !!selected && selected.x === x && selected.y === y && !showAdvanced\n        }\n        onClose={() => {\n          if (!showAdvanced) {\n            setSelected(null);\n          }\n        }}\n        usePortal={true}\n      >\n        {/* Popover target */}\n        <div\n          className=\"react-grid-item-content\"\n          style={{\n            ...tileStyle,\n            backgroundColor: tile && tile.color ? tile.color : \"\"\n          }}\n        >\n          <div\n            className=\"center\"\n            style={{\n              color: contentColor,\n              width: \"100%\",\n              maxHeight: tileStyle.maxHeight - 20,\n              overflow: \"hidden\"\n            }}\n          >\n            <p>{!isEmpty(tile) ? state.entities.room[tile.room].name : \"\"}</p>\n            <p>\n              {!isEmpty(tile)\n                ? tile.characters.map(char => (\n                    <Tooltip content={state.entities.character[char].name}>\n                      {state.entities.character[char].emoji}\n                    </Tooltip>\n                  ))\n                : \"\"}\n            </p>\n            <p>\n              {!isEmpty(tile)\n                ? tile.objects.map(obj => (\n                    <Tooltip content={state.entities.object[obj].name}>\n                      {state.entities.object[obj].emoji}\n                    </Tooltip>\n                  ))\n                : \"\"}\n            </p>\n          </div>\n        </div>\n        {/* Popover content */}\n        <div style={{ padding: \"20px\" }}>\n          <TileForm\n            initialInputs={tile}\n            onSubmit={handleSubmit}\n            onClear={handleClear}\n            entities={state.entities}\n            findOrAddEntity={state.findOrAddEntity}\n            setSelected={setSelected}\n            selected={selected}\n            setShowAdvanced={setShowAdvanced}\n          />\n        </div>\n      </Popover>\n    </>\n  );\n}\n\nexport default Tile;\n","import React from \"react\";\nimport { Formik } from \"formik\";\nimport {\n  Button,\n  Intent,\n  Icon,\n  Popover,\n  PopoverInteractionKind,\n  Tooltip\n} from \"@blueprintjs/core\";\nimport { isEmpty, cloneDeep } from \"lodash\";\nimport AnimateHeight from \"react-animate-height\";\nimport { Picker } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\n\nimport ColorPicker from \"./ColorPicker\";\nimport BaseSuggest from \"./BaseSuggest\";\nimport BaseMultiSelect from \"./BaseMultiSelect\";\nimport {\n  TILE_COLORS,\n  findBiome,\n  invertColor,\n  findEmoji,\n  DEFAULT_EMOJI\n} from \"../worldbuilding/utils\";\nimport ObjectForm, { emptyObjectForm } from \"./ObjectForm\";\nimport CharacterForm, { emptyCharacterForm } from \"./CharacterForm\";\nimport RoomForm, { emptyRoomForm } from \"./RoomForm\";\nimport { emptyTileForm } from \"./TileForm\";\n\n/**\n * Advanced tile editing options including creating, editing, and duplicating entities\n */\nfunction AdvancedTileForm({\n  x,\n  y,\n  currFloor,\n  getTileAt,\n  initialInputs,\n  inheritedInputs,\n  handleSubmit,\n  handleClear,\n  tileStyle,\n  entities,\n  findOrAddEntity,\n  editEntity\n}) {\n  const TilePreview = ({ tile }) => {\n    const contentColor = invertColor(\n      tile && !isNaN(tile.room) && tile.color ? tile.color : \"#ced9e0\"\n    );\n    return (\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n        <div\n          style={{\n            position: \"relative\"\n          }}\n        >\n          <Icon\n            color={contentColor}\n            className={`react-grid-item-handle + ${\n              isNaN(tile.room) ? \"disabled\" : \"\"\n            }`}\n            icon=\"drag-handle-horizontal\"\n          />\n          {!isEmpty(tile) && !isEmpty(getTileAt(x, y, currFloor - 1)) && (\n            <Icon\n              color={contentColor}\n              className={isEmpty(tile) ? \"disabled\" : \"\"}\n              style={{\n                opacity: tile.stairDown ? 1 : 0.2,\n                position: \"absolute\",\n                bottom: \"5px\",\n                left: \"5px\"\n              }}\n              icon=\"arrow-bottom-left\"\n            />\n          )}\n          {!isEmpty(tile) && !isEmpty(getTileAt(x, y, currFloor + 1)) && (\n            <Icon\n              color={contentColor}\n              className={isEmpty(tile) ? \"disabled\" : \"\"}\n              style={{\n                opacity: tile.stairUp ? 1 : 0.2,\n                position: \"absolute\",\n                top: \"5px\",\n                right: \"5px\"\n              }}\n              icon=\"arrow-top-right\"\n            />\n          )}\n          <div\n            className=\"react-grid-item-content\"\n            style={{\n              ...tileStyle,\n              backgroundColor:\n                tile && !isNaN(tile.room) && tile.color ? tile.color : \"#ced9e0\"\n            }}\n          >\n            <div\n              className=\"center\"\n              style={{\n                color: contentColor,\n                width: \"100%\",\n                maxHeight: tileStyle.maxHeight - 20,\n                overflow: \"hidden\"\n              }}\n            >\n              {!isEmpty(tile) && entities.room[tile.room]\n                ? entities.room[tile.room].name\n                : \"\"}\n              <p>\n                {!isEmpty(tile)\n                  ? tile.characters.map(char => (\n                      <Tooltip content={entities.character[char].name}>\n                        {entities.character[char].emoji}\n                      </Tooltip>\n                    ))\n                  : \"\"}\n              </p>\n              <p>\n                {!isEmpty(tile)\n                  ? tile.objects.map(obj => (\n                      <Tooltip content={entities.object[obj].name}>\n                        {entities.object[obj].emoji}\n                      </Tooltip>\n                    ))\n                  : \"\"}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <Formik\n      initialValues={\n        inheritedInputs ||\n        (!isEmpty(initialInputs) ? initialInputs : undefined) ||\n        emptyTileForm\n      }\n      validate={values => {\n        let errors = {};\n        if (!values.room) {\n          errors.room = \"Required\";\n        }\n        return errors;\n      }}\n      isInitialValid={!!inheritedInputs && !!inheritedInputs.room}\n      onSubmit={handleSubmit}\n    >\n      {props => {\n        const {\n          values,\n          setFieldValue,\n          touched,\n          setFieldTouched,\n          errors,\n          dirty,\n          isValid,\n          handleSubmit,\n          handleReset\n        } = props;\n        const setRoomValue = (name, value, fullValue) => {\n          setFieldValue(name, value);\n          setFieldValue(\"color\", findBiome(fullValue.name, values.color));\n        };\n\n        const hasContent = () => {\n          return (\n            !isNaN(values.room) ||\n            !isEmpty(values.characters) ||\n            !isEmpty(values.objects)\n          );\n        };\n\n        return (\n          <>\n            <Hideable title=\"Room\">\n              <SelectFromExistingOrCreateNew\n                initialState={selectOrCreateState.CHOOSE}\n                SelectFromExisting={BaseSuggest}\n                selectFromExistingProps={{\n                  id: \"room-input\",\n                  errors: errors.room,\n                  touched: touched.room,\n                  setFieldTouched: setFieldTouched,\n                  onItemSelect: findOrAddEntity,\n                  entities: entities,\n                  handleChange: setRoomValue\n                }}\n                handleChange={setFieldValue}\n                formValue={values.room}\n                name=\"room\"\n                type=\"room\"\n                Form={RoomForm}\n                formProps={{\n                  initialInputs: emptyRoomForm\n                }}\n                handleCreateSubmit={data =>\n                  setRoomValue(\"room\", findOrAddEntity(data, \"room\"), data)\n                }\n                handleEditSubmit={editEntity}\n                Selected={SelectedTableView}\n                selectedProps={{\n                  columnNames: [\"Name\", \"Description\", \"Backstory\"],\n                  columnKeys: [\"name\", \"description\", \"backstory\"],\n                  items: !isNaN(values.room) ? [values.room] : undefined,\n                  entities,\n                  type: \"room\"\n                }}\n              ></SelectFromExistingOrCreateNew>\n              {errors.room && touched.room && (\n                <div className=\"form-error\">{errors.room}</div>\n              )}\n              <div style={{ marginTop: \"5px\" }}>\n                <ColorPicker\n                  colors={TILE_COLORS}\n                  value={values.color}\n                  handleChange={setFieldValue}\n                  advanced\n                />\n              </div>\n            </Hideable>\n            <Hideable\n              initialOpen={!isEmpty(values.characters)}\n              title=\"Characters\"\n            >\n              <SelectFromExistingOrCreateNew\n                SelectFromExisting={BaseMultiSelect}\n                selectFromExistingProps={{\n                  id: \"characters-input\",\n                  errors: errors.characters,\n                  touched: touched.characters,\n                  setFieldTouched: setFieldTouched,\n                  tooltip: \"physical_description\",\n                  onItemSelect: (e, type) => {\n                    e.emoji = findEmoji(e.name);\n                    return findOrAddEntity(e, type);\n                  },\n                  entities: entities,\n                  handleChange: setFieldValue\n                }}\n                handleChange={setFieldValue}\n                formValue={values.characters}\n                name=\"characters\"\n                type=\"character\"\n                Form={CharacterForm}\n                formProps={{\n                  initialInputs: emptyCharacterForm\n                }}\n                handleCreateSubmit={data => {\n                  data.emoji = findEmoji(data.name);\n                  setFieldValue(\n                    \"characters\",\n                    values.characters.concat(findOrAddEntity(data, \"character\"))\n                  );\n                }}\n                handleEditSubmit={editEntity}\n                Selected={SelectedTableView}\n                selectedProps={{\n                  columnNames: [\"Name\", \"Persona\", \"Emoji\"],\n                  columnKeys: [\"name\", \"persona\", \"emoji\"],\n                  items: values.characters,\n                  entities,\n                  type: \"character\",\n                  editEntity: editEntity\n                }}\n              />\n              {errors.characters && touched.characters && (\n                <div className=\"form-error\">{errors.characters}</div>\n              )}\n            </Hideable>\n            <Hideable initialOpen={!isEmpty(values.characters)} title=\"Objects\">\n              <SelectFromExistingOrCreateNew\n                SelectFromExisting={BaseMultiSelect}\n                selectFromExistingProps={{\n                  id: \"objects-input\",\n                  errors: errors.objects,\n                  touched: touched.objects,\n                  setFieldTouched: setFieldTouched,\n                  tooltip: \"physical_description\",\n                  onItemSelect: (e, type) => {\n                    e.emoji = findEmoji(e.name);\n                    return findOrAddEntity(e, type);\n                  },\n                  entities: entities,\n                  handleChange: setFieldValue\n                }}\n                handleChange={setFieldValue}\n                formValue={values.objects}\n                name=\"objects\"\n                type=\"object\"\n                Form={ObjectForm}\n                formProps={{\n                  initialInputs: emptyObjectForm\n                }}\n                handleCreateSubmit={data => {\n                  data.emoji = findEmoji(data.name);\n                  setFieldValue(\n                    \"objects\",\n                    values.objects.concat(findOrAddEntity(data, \"object\"))\n                  );\n                }}\n                handleEditSubmit={editEntity}\n                Selected={SelectedTableView}\n                selectedProps={{\n                  columnNames: [\"Name\", \"Description\", \"emoji\"],\n                  columnKeys: [\"name\", \"physical_description\", \"emoji\"],\n                  items: values.objects,\n                  entities,\n                  type: \"object\",\n                  editEntity: editEntity\n                }}\n              />\n              {errors.objects && touched.objects && (\n                <div className=\"form-error\">{errors.objects}</div>\n              )}\n            </Hideable>\n            <Hideable title=\"Preview\">\n              <TilePreview tile={values} />\n            </Hideable>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"flex-end\",\n                padding: \"10px\"\n              }}\n            >\n              <Button\n                type=\"reset\"\n                onClick={handleClear}\n                disabled={!hasContent()}\n                style={{ marginRight: \"15px\" }}\n              >\n                Clear\n              </Button>\n              <Button\n                type=\"reset\"\n                onClick={handleReset}\n                disabled={!dirty}\n                style={{ marginRight: \"15px\" }}\n              >\n                Reset\n              </Button>\n              <Button\n                intent={Intent.PRIMARY}\n                type=\"submit\"\n                onClick={handleSubmit}\n                disabled={!isValid}\n                style={{ marginLeft: \"15px\" }}\n              >\n                Save Changes\n              </Button>\n            </div>\n          </>\n        );\n      }}\n    </Formik>\n  );\n}\n\n// Container for children that allows children to be hidden\nfunction Hideable({ initialOpen = true, children, title }) {\n  const [open, setOpen] = React.useState(initialOpen);\n\n  return (\n    <div style={{ margin: \"0 0 10px 0\" }}>\n      <div\n        onClick={() => setOpen(!open)}\n        className={`hideable-header ${open ? \"\" : \"hidden\"}`}\n      >\n        <Icon\n          className={`hideable-arrow ${open ? \"\" : \"hidden\"}`}\n          icon=\"chevron-down\"\n        />{\" \"}\n        {title}\n      </div>\n      <AnimateHeight\n        duration={500}\n        height={open ? \"auto\" : 0}\n        easing={\"ease\"}\n        animateOpacity={true}\n      >\n        <div className={`hideable-content`}>{children}</div>\n      </AnimateHeight>\n    </div>\n  );\n}\n\n// A table view for all selected entities with actions\nfunction SelectedTableView({\n  columnNames,\n  columnKeys,\n  items,\n  entities,\n  handleEdit,\n  handleDuplicate,\n  handleDelete,\n  type,\n  editEntity\n}) {\n  function EmojiTD({ item }) {\n    const [showPicker, setShowPicker] = React.useState(false);\n    return (\n      <Popover\n        interactionKind={PopoverInteractionKind.CLICK}\n        onInteraction={state => setShowPicker(state)}\n        isOpen={showPicker}\n        wrapperTagName=\"td\"\n      >\n        <div\n          // onClick={() => setShowPicker(!showPicker)}\n          style={{ height: \"100%\", width: \"100%\" }}\n        >\n          {entities[type][item].emoji || DEFAULT_EMOJI}\n        </div>\n        <Picker\n          onSelect={event => {\n            const data = cloneDeep(entities[type][item]);\n            data.emoji = event.native;\n            editEntity(item, data, type);\n            setShowPicker(false);\n          }}\n        />\n      </Popover>\n    );\n  }\n  return (\n    <>\n      {!isEmpty(items) && (\n        <table\n          data-testid=\"table-explore\"\n          style={{ width: \"100%\" }}\n          className=\"bp3-html-table bp3-html-table-striped bp3-html-table-condensed bp3-interactive\"\n        >\n          <thead>\n            <tr>\n              {columnNames.map((col, index) => (\n                <th key={index}>{col}</th>\n              ))}\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {items.map((item, index) => {\n              return (\n                <React.Fragment key={index}>\n                  <tr>\n                    {columnKeys.map(key => {\n                      if (key === \"emoji\") {\n                        return <EmojiTD item={item} key={key} />;\n                      }\n                      return <td key={key}>{entities[type][item][key]}</td>;\n                    })}\n                    <td>\n                      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n                        <Button\n                          onClick={() => handleEdit(item, entities[type][item])}\n                          icon=\"edit\"\n                          minimal\n                        />\n                        <Button\n                          onClick={() => handleDuplicate(entities[type][item])}\n                          icon=\"duplicate\"\n                          minimal\n                        />\n                        <Button\n                          onClick={() => handleDelete(index)}\n                          icon=\"trash\"\n                          minimal\n                        />\n                      </div>\n                    </td>\n                  </tr>\n                </React.Fragment>\n              );\n            })}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n}\n\nconst selectOrCreateState = {\n  BASE: 0,\n  CHOOSE: 1,\n  SELECT_FROM_EXISTING: 2,\n  CREATE_NEW: 3,\n  EDIT: 4,\n  DUPLICATE: 5\n};\n\n// Input type component that includes the selected table,\n// a component for selecting from existing,\n// and a form for creating new/editing/duplicating\nfunction SelectFromExistingOrCreateNew({\n  initialState = selectOrCreateState.BASE,\n  handleChange,\n  name,\n  type,\n  formValue,\n  SelectFromExisting,\n  selectFromExistingProps,\n  Form,\n  formProps,\n  handleCreateSubmit,\n  handleEditSubmit,\n  Selected,\n  selectedProps\n}) {\n  const [state, setState] = React.useState(initialState);\n  const [editing, setEditing] = React.useState(undefined);\n  const [duplicating, setDuplicating] = React.useState(undefined);\n\n  const handleEditClick = (id, data) => {\n    setEditing({ id, data });\n    setState(selectOrCreateState.EDIT);\n  };\n\n  const handleDuplicate = data => {\n    setDuplicating(data);\n    setState(selectOrCreateState.DUPLICATE);\n  };\n\n  const handleDelete = index => {\n    if (Array.isArray(formValue)) {\n      formValue.splice(index, 1);\n      handleChange(name, formValue);\n    } else {\n      handleChange(name, undefined);\n    }\n  };\n\n  return (\n    <>\n      <Selected\n        {...selectedProps}\n        handleEdit={handleEditClick}\n        handleDuplicate={handleDuplicate}\n        handleDelete={handleDelete}\n      />\n      {state === selectOrCreateState.CHOOSE ? (\n        // choose between creating new or selecting from existing\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            padding: \"5px\"\n          }}\n        >\n          <Button\n            onClick={() => setState(selectOrCreateState.SELECT_FROM_EXISTING)}\n            style={{ margin: \"5px\" }}\n          >\n            Select from existing\n          </Button>\n          <span style={{ margin: \"5px\" }}> OR </span>\n          <Button\n            onClick={() => setState(selectOrCreateState.CREATE_NEW)}\n            style={{ margin: \"5px\" }}\n          >\n            Create New\n          </Button>\n        </div>\n      ) : state === selectOrCreateState.SELECT_FROM_EXISTING ? (\n        // selecting from existing\n        <div>\n          <Button\n            onClick={() => setState(initialState)}\n            icon=\"chevron-left\"\n            minimal\n          />\n          <SelectFromExisting\n            {...selectFromExistingProps}\n            name={name}\n            type={type}\n            formValue={formValue}\n          />\n        </div>\n      ) : state === selectOrCreateState.CREATE_NEW ? (\n        // creating new\n        <div>\n          <Button\n            onClick={() => setState(initialState)}\n            icon=\"chevron-left\"\n            minimal\n          />\n          <Form\n            {...formProps}\n            type={type}\n            handleSubmit={value => {\n              setState(initialState);\n              handleCreateSubmit(value);\n            }}\n          />\n        </div>\n      ) : state === selectOrCreateState.EDIT ? (\n        // editing\n        <div>\n          <Button\n            onClick={() => setState(initialState)}\n            icon=\"chevron-left\"\n            minimal\n          />\n          <Form\n            {...formProps}\n            type={type}\n            initialInputs={editing.data}\n            handleSubmit={value => {\n              setState(initialState);\n              handleEditSubmit(editing.id, value, type);\n              setEditing(undefined);\n            }}\n          />\n        </div>\n      ) : state === selectOrCreateState.DUPLICATE ? (\n        // duplicating\n        <div>\n          <Button\n            onClick={() => setState(initialState)}\n            icon=\"chevron-left\"\n            minimal\n          />\n          <Form\n            {...formProps}\n            type={type}\n            initialInputs={duplicating}\n            handleSubmit={value => {\n              setState(initialState);\n              handleCreateSubmit(value);\n              setDuplicating(undefined);\n            }}\n          />\n        </div>\n      ) : (\n        <Button onClick={() => setState(selectOrCreateState.CHOOSE)} icon=\"add\">\n          Add\n        </Button>\n      )}\n    </>\n  );\n}\n\nexport default AdvancedTileForm;\n","import React from \"react\";\nimport GridLayout from \"react-grid-layout\";\nimport { cloneDeep, isEmpty, isEqual } from \"lodash\";\nimport { Button, Drawer, Classes } from \"@blueprintjs/core\";\n\nimport Tile from \"./Tile\";\nimport { MAX_HEIGHT, MAX_WIDTH } from \"./utils\";\nimport AdvancedTileForm from \"../forms/AdvancedTileForm\";\n\nconst SIZE = 150;\nconst MARGIN = 24;\n\n/**\n * Component for the interactive grid.\n * Using react-grid-layout for the draggable interface with some custom drag behavior to maintain\n * grid dimensions and update map state.\n */\nfunction Grid({ state, initialShowAdvanced }) {\n  const [layout, setLayout] = React.useState(null);\n  const [selected, setSelected] = React.useState(null);\n  const [showAdvanced, setShowAdvanced] = React.useState(false);\n  const [dragging, setDragging] = React.useState(false);\n\n  React.useEffect(() => {\n    setShowAdvanced(initialShowAdvanced);\n  }, [initialShowAdvanced]);\n\n  const resetShowAdvanced = () => {\n    setShowAdvanced(initialShowAdvanced);\n  };\n\n  // store the initial layout of the grid\n  const onDragStart = layout => {\n    setLayout(cloneDeep(layout));\n  };\n\n  // prevent column growing by swapping position with colliding tile\n  const onDragEvent = (newState, initial, next) => {\n    if (!isEqual(initial, next)) {\n      setDragging(true);\n      setSelected(null);\n    }\n    for (let i = 0; i < layout.length; i++) {\n      if (layout[i].i === next.i) {\n        continue;\n      }\n      if (\n        layout[i].x === next.x &&\n        layout[i].y === next.y &&\n        layout[i].i !== next.i\n      ) {\n        newState[i].x = initial.x;\n        newState[i].y = initial.y;\n      } else {\n        newState[i].x = layout[i].x;\n        newState[i].y = layout[i].y;\n      }\n    }\n\n    return true;\n  };\n\n  // sets up for the layout to be updated in the superstate\n  const onDragStop = (newState, initial, next) => {\n    onDragEvent(newState, initial, next);\n    setLayout([initial.x, initial.y, next.x, next.y]);\n  };\n\n  // update superstate (updating in onDragStop causes tiles to vanish)\n  const handleLayoutChange = () => {\n    if (layout) {\n      const [x1, y1, x2, y2] = layout;\n      if (!(x1 === x2 && y1 === y2)) {\n        // allows the animation to finish\n        setTimeout(() => state.swapTiles(x1, y1, x2, y2), 300);\n      }\n      setLayout(null);\n    }\n  };\n\n  // Generate children for GridLayout component\n  const generateTiles = () => {\n    const tiles = [];\n    for (let i = 0; i < state.dimensions.height; i++) {\n      for (let j = 0; j < state.dimensions.width; j++) {\n        // tile will contain all form data and stair data, or be empty\n        const tile = state.getTileAt(j, i, state.currFloor);\n        // tile data is used in the key to force GridLayout to rerender the div component\n        // and update isDraggable under data-grid\n        const key = `${state.currFloor} ${j} ${i} ${\n          tile && tile && tile.room ? tile.room.id : \"\"\n        }`;\n        tiles.push(\n          <div\n            key={key}\n            data-grid={{\n              x: j,\n              y: i,\n              w: 1,\n              h: 1,\n              draggableHandle: \".react-grid-item-handle\",\n              draggableCancel: \".react-grid-item\",\n              isDraggable: !isEmpty(tile)\n            }}\n            onClick={() => {\n              if (\n                !dragging &&\n                (!selected ||\n                  (selected && (selected.x !== j || selected.y !== i)))\n              ) {\n                setSelected({ x: j, y: i });\n              } else {\n                setDragging(false);\n              }\n            }}\n          >\n            <Tile\n              x={j}\n              y={i}\n              tile={tile}\n              selected={selected}\n              setSelected={setSelected}\n              showAdvanced={showAdvanced}\n              setShowAdvanced={setShowAdvanced}\n              setTile={state.setTile}\n              clearTile={state.clearTile}\n              getTileAt={state.getTileAt}\n              currFloor={state.currFloor}\n              tileStyle={{\n                width: SIZE,\n                height: SIZE,\n                maxWidth: SIZE,\n                maxHeight: SIZE\n              }}\n              state={state}\n            />\n          </div>\n        );\n      }\n    }\n    return tiles;\n  };\n\n  // Generate all walls for the floor\n  const generateWalls = () => {\n    const walls = [];\n    for (let i = 0; i < state.dimensions.height; i++) {\n      for (let j = 0; j < state.dimensions.width; j++) {\n        // vertical walls\n        if (j > 0) {\n          const key = `${j - 1} ${i}|${j} ${i}`;\n          walls.push(\n            <div\n              key={key}\n              onClick={() => state.toggleWall(key)}\n              className={`wall ${\n                state.map[state.currFloor].walls[key] ? \"active\" : \"\"\n              }`}\n              style={{\n                top: MARGIN + (MARGIN + SIZE) * i,\n                left: (MARGIN + SIZE) * j + (MARGIN - 10) / 2,\n                height: SIZE\n              }}\n            />\n          );\n        }\n        // horizontal walls\n        if (i > 0) {\n          const key = `${j} ${i - 1}|${j} ${i}`;\n          walls.push(\n            <div\n              key={key}\n              onClick={() => state.toggleWall(key)}\n              className={`wall ${\n                state.map[state.currFloor].walls[key] ? \"active\" : \"\"\n              }`}\n              style={{\n                left: MARGIN + (MARGIN + SIZE) * j,\n                top: (MARGIN + SIZE) * i + (MARGIN - 10) / 2,\n                width: SIZE\n              }}\n            />\n          );\n        }\n      }\n    }\n    return walls;\n  };\n\n  return (\n    <>\n      <div\n        style={{\n          width:\n            state.dimensions.width * SIZE +\n            (state.dimensions.width + 1) * MARGIN +\n            60,\n          margin: \"0 auto 75px auto\",\n          textAlign: \"center\"\n        }}\n      >\n        <Button\n          className=\"bp3-button\"\n          disabled={state.dimensions.height >= 10}\n          style={{\n            width:\n              state.dimensions.width * SIZE +\n              (state.dimensions.width + 1) * MARGIN -\n              20,\n            margin: \"auto\"\n          }}\n          onClick={state.addRowTop}\n          icon=\"add\"\n        />\n        <div style={{ display: \"flex\" }}>\n          <Button\n            className=\"bp3-button\"\n            disabled={state.dimensions.width >= 10}\n            style={{\n              height:\n                state.dimensions.height * SIZE +\n                (state.dimensions.height + 1) * MARGIN -\n                20,\n              margin: \"10px 0\"\n            }}\n            onClick={state.addColFront}\n            icon=\"add\"\n          />\n          <div\n            className=\"map-container\"\n            style={{\n              width:\n                state.dimensions.width * SIZE +\n                (state.dimensions.width + 1) * MARGIN,\n              height:\n                state.dimensions.height * SIZE +\n                (state.dimensions.height + 1) * MARGIN\n            }}\n          >\n            <div className=\"walls\">{generateWalls()}</div>\n            <GridLayout\n              cols={state.dimensions.width}\n              rowHeight={SIZE}\n              width={\n                state.dimensions.width * SIZE +\n                (state.dimensions.width + 1) * MARGIN\n              }\n              onDragStart={onDragStart}\n              onDrag={onDragEvent}\n              onDragStop={onDragStop}\n              margin={[MARGIN, MARGIN]}\n              onLayoutChange={handleLayoutChange}\n              isResizable={false}\n              maxRows={state.dimensions.height}\n              style={{\n                width:\n                  state.dimensions.width * SIZE +\n                  (state.dimensions.width + 1) * MARGIN\n              }}\n            >\n              {generateTiles()}\n            </GridLayout>\n          </div>\n          <Button\n            className=\"bp3-button\"\n            disabled={state.dimensions.width >= MAX_WIDTH}\n            style={{\n              height:\n                state.dimensions.height * SIZE +\n                (state.dimensions.height + 1) * MARGIN -\n                20,\n              margin: \"10px 0\"\n            }}\n            onClick={state.addColEnd}\n            icon=\"add\"\n          />\n        </div>\n        <Button\n          className=\"bp3-button\"\n          disabled={state.dimensions.height >= MAX_HEIGHT}\n          style={{\n            width:\n              state.dimensions.width * SIZE +\n              (state.dimensions.width + 1) * MARGIN -\n              20,\n            margin: \"auto\"\n          }}\n          onClick={state.addRowBot}\n          icon=\"add\"\n        />\n      </div>\n      <AdvancedEditor\n        showAdvanced={showAdvanced}\n        selected={selected}\n        setSelected={setSelected}\n        resetShowAdvanced={resetShowAdvanced}\n        state={state}\n      />\n    </>\n  );\n}\n\nfunction AdvancedEditor({\n  selected,\n  setSelected,\n  resetShowAdvanced,\n  showAdvanced,\n  state\n}) {\n  const handleSubmit = data => {\n    state.setTile(selected.x, selected.y, {\n      ...state.getTileAt(selected.x, selected.y),\n      ...data\n    });\n    setSelected(null);\n    resetShowAdvanced();\n  };\n\n  const handleClear = () => {\n    state.clearTile(selected.x, selected.y);\n    setSelected(null);\n    resetShowAdvanced();\n  };\n\n  return (\n    <Drawer\n      icon=\"build\"\n      title=\"Build Tile\"\n      isOpen={showAdvanced && selected}\n      onClose={() => {\n        setSelected(null);\n        resetShowAdvanced();\n      }}\n    >\n      <div className={Classes.DRAWER_BODY}>\n        <div className={Classes.DIALOG_BODY}>\n          {selected && (\n            <AdvancedTileForm\n              x={selected.x}\n              y={selected.y}\n              currFloor={state.currFloor}\n              getTileAt={state.getTileAt}\n              initialInputs={state.getTileAt(selected.x, selected.y)}\n              inheritedInputs={selected.data}\n              handleSubmit={handleSubmit}\n              handleClear={handleClear}\n              tileStyle={{\n                width: SIZE,\n                height: SIZE,\n                maxWidth: SIZE,\n                maxHeight: SIZE\n              }}\n              entities={state.entities}\n              findOrAddEntity={state.findOrAddEntity}\n              editEntity={state.editEntity}\n            />\n          )}\n        </div>\n      </div>\n    </Drawer>\n  );\n}\n\nexport default Grid;\n","import React from \"react\";\nimport {\n  ContextMenuTarget,\n  Menu,\n  MenuItem,\n  Button,\n  InputGroup,\n  Alert,\n  Intent\n} from \"@blueprintjs/core\";\nimport Reorder from \"react-reorder\";\nimport createReactClass from \"create-react-class\";\nimport { isEmpty } from \"lodash\";\n\nimport { MAX_FLOORS } from \"./utils\";\n\n/**\n * Component for interacting with floors of the map.\n * Uses react-reorder for the reorderable list.\n */\nfunction FloorSelector({ manager, map, currFloor }) {\n  // Prevents switching floors on a context click (which can cause several components to remount and break links)\n  const [contextShowing, setContextShowing] = React.useState(false);\n  const [editing, setEditing] = React.useState(null);\n  // Contains all data for a confirm alert (on Delete, or Reorder actions)\n  const [confirmAlert, setConfirmAlert] = React.useState({});\n  const inputRef = React.createRef();\n\n  const floors = map.map(({ name }, index) => {\n    return { name, index };\n  });\n\n  // Template component for each Floor Button\n  const FloorButton = ContextMenuTarget(\n    createReactClass({\n      keypressHandler: function(event) {\n        if (event.key === \"Enter\") {\n          inputRef.current.blur();\n        }\n      },\n      renderContextMenu: function() {\n        setContextShowing(true);\n        return (\n          <Menu>\n            <MenuItem\n              icon=\"edit\"\n              onClick={() => setEditing(this.props.item.index)}\n              text=\"Edit Floor Name\"\n            />\n            <MenuItem\n              icon=\"delete\"\n              disabled={floors.length <= 1}\n              onClick={() => {\n                setConfirmAlert({\n                  confirmButtonText: \"Confirm Delete\",\n                  icon: \"trash\",\n                  intent: Intent.DANGER,\n                  onConfirm: () => {\n                    manager.deleteFloor(this.props.item.index);\n                    setConfirmAlert({});\n                  },\n                  content: `Are you sure you want to delete the entire ${this.props.item.name} floor? All data on this floor and connections to this floor will be reset.`\n                });\n              }}\n              text=\"Delete Floor\"\n            />\n          </Menu>\n        );\n      },\n      onContextMenuClose: function() {\n        setContextShowing(false);\n      },\n      handleBlur: function(e) {\n        manager.editFloorName(e.target.value, this.props.item.index);\n        setEditing(null);\n      },\n      componentDidMount: function() {\n        if (editing === this.props.item.index) {\n          inputRef.current.focus();\n          inputRef.current.select();\n        }\n      },\n      render: function() {\n        return (\n          <div\n            style={{\n              textAlign: \"center\",\n              width: \"100%\",\n              height: \"100%\",\n              lineHeight: \"30px\",\n              padding: \"0px 5px\"\n            }}\n          >\n            {editing !== null && editing === this.props.item.index ? (\n              <InputGroup\n                inputRef={inputRef}\n                onBlur={this.handleBlur}\n                defaultValue={this.props.item.name}\n                onKeyPress={event => this.keypressHandler(event)}\n              />\n            ) : (\n              <div>{this.props.item.name}</div>\n            )}\n          </div>\n        );\n      }\n    })\n  );\n\n  // Prevent floor selection if context or editing has been triggered (prevents unintended switching)\n  const selectFloor = (_e, _floor, index) => {\n    if (!contextShowing && !editing) {\n      manager.setCurrFloor(index);\n    }\n  };\n\n  const handleReorder = (_e, _floor, initialIndex, newIndex) => {\n    if (initialIndex !== newIndex) {\n      setConfirmAlert({\n        confirmButtonText: \"Confirm Reorder\",\n        icon: \"layers\",\n        intent: Intent.WARNING,\n        onConfirm: () => {\n          manager.reorderFloors(initialIndex, newIndex);\n          setConfirmAlert({});\n        },\n        content: `Are you sure you want to reorder the entire ${floors[newIndex].name} floor? All connections to and from this floor, in both positions, will be reset.`\n      });\n    }\n  };\n\n  return (\n    <>\n      <Alert\n        confirmButtonText={confirmAlert.confirmButtonText}\n        cancelButtonText=\"Cancel\"\n        icon={confirmAlert.icon}\n        intent={confirmAlert.intent}\n        isOpen={!isEmpty(confirmAlert)}\n        onCancel={() => {\n          if (confirmAlert.onCancel) {\n            confirmAlert.onCancel();\n          }\n          setConfirmAlert({});\n        }}\n        onConfirm={confirmAlert.onConfirm}\n      >\n        <p>{confirmAlert.content}</p>\n      </Alert>\n      <div\n        style={{\n          display: \"flex\"\n        }}\n      >\n        <Button\n          disabled={map.length >= MAX_FLOORS}\n          icon=\"add\"\n          onClick={manager.addFloor}\n          style={{\n            height: \"30px\"\n          }}\n        />\n        <Reorder\n          holdTime=\"200\"\n          callback={handleReorder}\n          template={FloorButton}\n          itemKey=\"index\"\n          list={floors}\n          selected={floors[currFloor]}\n          itemClicked={selectFloor}\n          lock=\"vertical\"\n          itemClass=\"bp3-button floor-button\"\n        />\n      </div>\n    </>\n  );\n}\n\nexport default FloorSelector;\n","import classNames from \"classnames\";\nimport React from \"react\";\nimport {\n  NumericInput,\n  Classes,\n  ControlGroup,\n  FormGroup,\n  Overlay,\n  Tooltip,\n  Position,\n  Icon,\n  Switch,\n  Button\n} from \"@blueprintjs/core\";\n\nimport {\n  ListWorlds,\n  useWorldBuilder,\n  MAX_HEIGHT,\n  MAX_WIDTH,\n  MAX_FLOORS\n} from \"./worldbuilding/utils\";\nimport Grid from \"./worldbuilding/Grid\";\nimport FloorSelector from \"./worldbuilding/FloorSelector\";\n\nfunction WorldBuilderPage({ location }) {\n  return (\n    <div>\n      <h2 data-testid=\"header\" className=\"bp3-heading\">\n        World Builder\n      </h2>\n      <div>\n        <WorldBuilder upload={location.state} />\n      </div>\n    </div>\n  );\n}\n\n// TODO:  Add save, load, delete, list buttons\nfunction WorldBuilder({ upload }) {\n  const state = useWorldBuilder(upload);\n  const [advanced, setAdvanced] = React.useState(false);\n  const [isOverlayOpen, toggleOverlay] = React.useState(false);\n  const classes = classNames(\n    Classes.CARD,\n    Classes.ELEVATION_4,\n  );\n  return (\n    <>\n    <Overlay onOpening={() => ListWorlds()} isOpen={isOverlayOpen} onClose={() => toggleOverlay(!isOverlayOpen)} hasBackdrop={true} autoFocus={true} usePortal={true}>\n      <div className={classes}>\n          <p>\n              This is a simple container with some inline styles to position it on the screen. Its CSS\n              transitions are customized for this example only to demonstrate how easily custom\n              transitions can be implemented.\n          </p>\n          <p>\n              Click the \"Focus button\" below to transfer focus to the \"Show overlay\" trigger button\n              outside of this overlay. If persistent focus is enabled, focus will be constrained to the\n              overlay. Use the <b>tab</b> key to move to the next focusable element to illustrate\n              this effect.\n          </p>\n          <p>\n              Click the \"Make me scroll\" button below to make this overlay's content really tall, which\n              will make the overlay's container (but not the page) scrollable\n          </p>\n          <Button onClick={() => toggleOverlay(!isOverlayOpen)} style={{ margin: \"\" }}>\n              Close\n          </Button>\n        </div>\n      </Overlay>\n      <FormGroup\n        inline\n        label=\"World Dimensions\"\n        labelInfo={`WxH (Max ${MAX_WIDTH}x${MAX_HEIGHT})`}\n      >\n        <ControlGroup>\n          <NumericInput\n            value={state.dimensions.width}\n            style={{ width: \"3rem\" }}\n            max={MAX_WIDTH}\n            min={1}\n            onValueChange={value => {\n              state.setDimensions({ ...state.dimensions, width: value });\n            }}\n          />\n\n          <NumericInput\n            value={state.dimensions.height}\n            style={{ width: \"3rem\" }}\n            max={MAX_HEIGHT}\n            min={1}\n            onValueChange={value => {\n              state.setDimensions({ ...state.dimensions, height: value });\n            }}\n          />\n        </ControlGroup>\n      </FormGroup>\n      <FormGroup\n        inline\n        label={\n          <>\n            Floor{\" \"}\n            <Tooltip\n              content={\n                \"Right click floor for more options. Click and hold floor to reorder.\"\n              }\n              position={Position.BOTTOM}\n              className=\"inline\"\n            >\n              <Icon icon=\"help\" />\n            </Tooltip>\n          </>\n        }\n        labelInfo={`Max ${MAX_FLOORS}`}\n        style={{ marginBottom: \"0px\" }}\n      >\n        <FloorSelector\n          max={MAX_FLOORS}\n          manager={state.floorManager}\n          map={state.map}\n          currFloor={state.currFloor}\n        />\n      </FormGroup>\n      <FormGroup inline label=\"Advanced\">\n        <Switch onChange={() => setAdvanced(!advanced)} checked={!!advanced} />\n      </FormGroup>\n      <Grid state={state} initialShowAdvanced={advanced} />\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"flex-end\",\n          position: \"fixed\",\n          bottom: 0,\n          left: 0,\n          right: 0,\n          height: \"50px\"\n        }}\n        className=\"bp3-navbar\"\n      >\n        <Button\n          onClick={() => toggleOverlay(!isOverlayOpen)} \n          intent=\"primary\"\n          style={{ margin: \"10px\" }}\n        >\n          Manage Worlds\n        </Button>\n        <Button\n          onClick={state.postWorld}\n          intent=\"primary\"\n          style={{ margin: \"10px\" }}\n        >\n          Save\n        </Button>\n        <Button\n          onClick={state.exportWorld}\n          intent=\"primary\"\n          style={{ margin: \"10px\" }}\n        >\n          Export\n        </Button>\n        <Button\n          onClick={state.postEdges}\n          intent=\"primary\"\n          style={{ margin: \"10px\" }}\n        >\n          Commit Edges\n        </Button>\n      </div>\n    </>\n  );\n}\n\nexport default WorldBuilderPage;\n","import React from \"react\";\nimport { isEmpty } from \"lodash\";\nimport { Button, Classes, Dialog, Intent, Spinner } from \"@blueprintjs/core\";\nimport { useHistory } from \"react-router-dom\";\n\nimport CONFIG from \"../config\";\nimport { useAPI, post } from \"../utils\";\nimport ObjectForm from \"./forms/ObjectForm\";\nimport CharacterForm from \"./forms/CharacterForm\";\nimport RoomForm from \"./forms/RoomForm\";\nimport AppToaster from \"./AppToaster\";\n\nfunction EditPage({ match, location }) {\n  const [formType, setFormType] = React.useState(undefined);\n  const { loading, result } = useAPI(\n    CONFIG,\n    `/entities/${match.params.id}`,\n    {},\n    location.state\n  );\n  const [initialInputs, setInitialInputs] = React.useState({});\n  const [showDialog, setShowDialog] = React.useState(false);\n  const [pendingEdits, setPendingEdits] = React.useState([]);\n  const history = useHistory();\n\n  if (!loading && isEmpty(initialInputs)) {\n    if (isEmpty(result) || isEmpty(result.entity)) {\n      setInitialInputs({ id: match.params.id });\n      setFormType(\"invalid\");\n    } else {\n      setInitialInputs(result.entity);\n      setFormType(result.type);\n    }\n  }\n\n  const showEdits = values => {\n    const edits = [];\n    for (let property in values) {\n      if (values[property] !== initialInputs[property]) {\n        edits.push({ property: property, editedValue: values[property] });\n      }\n    }\n    setPendingEdits(edits);\n    setShowDialog(true);\n  };\n\n  return (\n    <div>\n      <Dialog\n        icon=\"info-sign\"\n        onClose={() => setShowDialog(false)}\n        title={`Confirm edits for Entity ${match.params.id}`}\n        isOpen={showDialog}\n        usePortal={false}\n      >\n        <div className={Classes.DIALOG_BODY}>\n          {pendingEdits.map((edit, index) => {\n            return (\n              <p key={index}>\n                <strong>{edit.property}</strong>: {edit.editedValue.toString()}\n              </p>\n            );\n          })}\n        </div>\n        <div className={Classes.DIALOG_FOOTER}>\n          <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n            <Button onClick={() => setShowDialog(false)}>Close</Button>\n            <Button\n              intent={Intent.PRIMARY}\n              onClick={() =>\n                submitEdits(match.params.id, pendingEdits, history)\n              }\n            >\n              Confirm Edits\n            </Button>\n          </div>\n        </div>\n      </Dialog>\n      <h2 data-testid=\"header\" className=\"bp3-heading\">\n        Editing Entity {match.params.id}\n      </h2>\n      <div className=\"bp3-text-large\">\n        {loading ? (\n          <Spinner intent={Intent.PRIMARY} />\n        ) : (\n          <EditForm\n            type={formType}\n            initialInputs={initialInputs}\n            handleSubmit={showEdits}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction EditForm({ type, initialInputs, handleSubmit }) {\n  switch (type) {\n    case \"object\":\n      return (\n        <ObjectForm\n          type={type}\n          initialInputs={initialInputs}\n          handleSubmit={handleSubmit}\n        />\n      );\n    case \"character\":\n      return (\n        <CharacterForm\n          type={type}\n          initialInputs={initialInputs}\n          handleSubmit={handleSubmit}\n        />\n      );\n    case \"room\":\n      return (\n        <RoomForm\n          type={type}\n          initialInputs={initialInputs}\n          handleSubmit={handleSubmit}\n        />\n      );\n    default:\n      return \"This entity cannot be edited at the moment\";\n  }\n}\n\nasync function submitEdits(id, edits, history) {\n  const reqs = edits.map(edit =>\n    submitEdit(id, edit.property, edit.editedValue)\n  );\n  await Promise.all(reqs).then(() => {\n    history.push(\"/\");\n  });\n  AppToaster.show({\n    intent: Intent.SUCCESS,\n    message: \"Successfully created edits\"\n  });\n}\n\nfunction submitEdit(id, field, edited_value) {\n  const payload = {\n    id,\n    field,\n    edited_value,\n    player: 1\n  };\n\n  return post(\"edits\", payload);\n}\n\nexport default EditPage;\n","import React from \"react\";\nimport { HashRouter as HashRouter, Route, Redirect } from \"react-router-dom\";\n\nimport NavBar from \"./components/NavBar\";\nimport ExplorePage from \"./components/ExplorePage\";\nimport CreatePage from \"./components/CreatePage\";\nimport ReviewPage from \"./components/ReviewPage\";\nimport WorldBuilderPage from \"./components/WorldBuilderPage\";\nimport EditPage from \"./components/EditPage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <Routes />\n      </HashRouter>\n    </div>\n  );\n}\n\nexport function Routes() {\n  return (\n    <>\n      <NavBar />\n      <div style={{ margin: \"40px 30px\" }}>\n        <Route path=\"/explore\" component={ExplorePage} exact/>\n        <Route path=\"/create\" component={CreatePage} exact/>\n        <Route path=\"/review\" component={ReviewPage} exact/>\n        <Route\n          path=\"/world_builder\"\n          render={props => <WorldBuilderPage {...props} key={Math.random()} exact/>}\n        />\n        <Route path=\"/edit/:id\" component={EditPage} exact/>\n        <Route exact path=\"/\" render={() => <Redirect to=\"/explore\" />} exact/>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport \"normalize.css\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}