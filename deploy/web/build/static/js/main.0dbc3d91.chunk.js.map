{"version":3,"sources":["useWSDataSource.js","Logo.js","LoadingScreen.js","config.js","index.js","utils.js"],"names":["reducer","state","msg","updatedState","concat","Object","toConsumableArray","console","groupCollapsed","length","table","groupEnd","getNeighbors","action","paths","keys","room","neighbors","forEach","neighbor_id","neighbor","push","label","notice","i","getItems","objects","object_id","object","items","Logo","builder_url","window","location","protocol","host","react_default","a","createElement","className","alt","src","href","rel","target","LoadingScreen","_React$useState","React","useState","_React$useState2","slicedToArray","isTimedOut","setTimedOut","useEffect","timer","setTimeout","TIMEOUT_SECONDS","clearTimeout","style","height","width","display","alignItems","justifyContent","flexDirection","fontSize","marginTop","fontStyle","DEV","hostname","port","createWebSocketUrlFromBrowserUrl","url","wsProtocol","optionalServerHost","URL","searchParams","get","optionalGameId","log","CONFIG","getDataModelAddress","Setting","props","clear","overflow","text","split","map","para","idx","key","Message","_ref","caller","actor","isSelf","onReply","isEditMode","setEditMode","classNames","includes","Fragment","onClick","opacity","pointerEvents","defaultValue","type","react_tippy","title","position","Entry","_ref2","agents","selfId","undefined","actors","node_id","is_self","ConnectedApp","_useWSDataSource","websocket","useRef","isConnected","setConnected","_React$useState3","_React$useState4","isErrored","setErrored","_React$useReducer","useReducer","_React$useReducer2","messages","appendMessage","_React$useState5","_React$useState6","persona","setPersona","_React$useState7","_React$useState8","setLocation","_React$useState9","_React$useState10","setAgents","agentList","current","handleMessage","useCallback","cmd","JSON","parse","data","command","buffer","isPersonaDescription","new_agents","objectSpread","present_agent_ids","name","description","id","desc","onmessage","submitMessage","txt","stringify","send","WebSocket","onopen","onerror","onclose","useWSDataSource","useMemo","textAlign","src_LoadingScreen","Chat","onSubmit","_ref3","enteredText","setEnteredText","chatContainerRef","getEntityId","agent","match","dataModelHost","scrollToBottom","scrollTop","scrollHeight","presentAgents","valid_messages","filter","m","lastMessage","currentRoom","room_id","getLocationState","showEmojiPicker","setShowEmojiPicker","selectedEmoji","setSelectedEmoji","chatInputRef","useLayoutEffect","focus","skipWords","tryPickEmojis","token","replace","word","indexOf","toLowerCase","flatMap","term","emojiIndex","search","o","native","autopickedEmoji","setTextTellAgent","message","elem","caretPos","createTextRange","range","move","select","selectionStart","setSelectionRange","setCaretPosition","cx","editing","cursor","role","aria-label","top","left","transform","zIndex","BlurClosingPicker","autoFocus","onBlur","onSelect","emoji","bottom","right","aria-hidden","ref","e","preventDefault","value","onChange","onKeyPress","shiftKey","prefix","startsWith","suffix","endsWith","placeholder","float","agentName","getAgentName","agentId","backgroundColor","borderRadius","padding","marginRight","fadeShow","EmojiPicker","_ref4","objectWithoutProperties","handleClickOutside","dist_es","onClickOutside","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.0dbc3d91.chunk.js","sourcesContent":["import React from \"react\";\n\nconst reducer = (state, msg) => {\n  const updatedState = [...state, msg];\n  console.groupCollapsed(\"New message. Total: \" + updatedState.length);\n  console.table(updatedState);\n  console.groupEnd();\n  return updatedState;\n};\n\n/*\n  Get the labels on paths from neighbors, and display them on screen\n*/\nconst getNeighbors = (action) => {\n  var paths = [];\n  Object.keys(action.room.neighbors).forEach((neighbor_id) => {\n    var neighbor = action.room.neighbors[neighbor_id];\n    paths.push(neighbor.label);\n  });\n  var notice = \"\";\n  for (let i = 0; i < paths.length; i++) {\n    if (i === 0) {\n      notice += paths[i];\n    } else if (i === paths.length - 1) {\n      notice += \", and \" + paths[i];\n    } else {\n      notice += \", \" + paths[i];\n    }\n  }\n  if (notice === \"\") {\n    notice = \"there are no exits\";\n  }\n  return notice;\n};\n\n/*\n  Get the objects in the room to display them\n*/\nconst getItems = (action) => {\n  var objects = [];\n  Object.keys(action.objects).forEach((object_id) => {\n    const object = action.objects[object_id];\n    objects.push(object);\n  });\n\n  var items = \"\";\n  for (let i = 0; i < objects.length; i++) {\n    if (i === 0) {\n      items += objects[i];\n    } else if (i === objects.length - 1) {\n      items += \", and \" + objects[i];\n    } else {\n      items += \", \" + objects[i];\n    }\n  }\n  if (items === \"\") {\n    items = \"nothing of interest.\";\n  }\n  return items;\n};\n\nexport function useWSDataSource(url) {\n  const websocket = React.useRef();\n  const [isConnected, setConnected] = React.useState(false);\n  const [isErrored, setErrored] = React.useState(false);\n  const [messages, appendMessage] = React.useReducer(reducer, []);\n  const [persona, setPersona] = React.useState(null);\n  const [location, setLocation] = React.useState(null);\n  const [agents, setAgents] = React.useState({});\n  const agentList = React.useRef(agents);\n  agentList.current = agents;\n\n  const handleMessage = React.useCallback(\n    (msg) => {\n      const cmd = JSON.parse(msg.data);\n      if (cmd.command === \"actions\") {\n        const buffer = [];\n\n        cmd.data.forEach((action) => {\n          const isPersonaDescription = action.caller === \"SoulSpawnEvent\";\n          const isLocationDescription = action.caller === \"LookEvent\";\n          action.room = JSON.parse(action.room);\n          action.actor = JSON.parse(action.actor);\n          var new_agents = {\n            ...agentList.current,\n            ...action.present_agent_ids,\n          };\n          setAgents(new_agents);\n          if (isPersonaDescription) {\n            setPersona({\n              name: action.actor.name,\n              description: action.actor.persona,\n              id: action.actor.node_id,\n            });\n          }\n          const neighbors = getNeighbors(action);\n          const items = getItems(action);\n          setLocation({\n            name: action.room.name,\n            description:\n              action.room.desc +\n              \"\\n\" +\n              \"There is \" +\n              items +\n              \"\\n\" +\n              \"You notice \" +\n              neighbors,\n            id: action.room.node_id,\n          });\n          buffer.push(action);\n          buffer.forEach((msg) => appendMessage(msg));\n        });\n      }\n    },\n    [appendMessage, setPersona, setAgents, setLocation]\n  );\n\n  React.useEffect(() => {\n    websocket.current.onmessage = handleMessage;\n  }, [handleMessage]);\n\n  const submitMessage = React.useCallback(\n    (txt) => {\n      appendMessage({\n        caller: \"say\",\n        text: txt,\n        is_self: true,\n        actors: [persona.id],\n      });\n\n      const msg = JSON.stringify({ command: \"act\", data: txt });\n      return websocket.current.send(msg);\n    },\n    [websocket, appendMessage, persona]\n  );\n\n  if (!websocket.current) {\n    websocket.current = new WebSocket(url);\n\n    // websocket.current.onmessage = handleMessage;\n\n    websocket.current.onopen = () => {\n      console.log(\"opened\");\n      setConnected(true);\n    };\n\n    websocket.current.onerror = websocket.current.onclose = () => {\n      console.log(\"errored\");\n      setConnected(false);\n      setErrored(true);\n      websocket.current = null;\n    };\n  }\n\n  return {\n    isConnected,\n    messages,\n    submitMessage,\n    persona,\n    location,\n    isErrored,\n    agents,\n  };\n}\n","import React from \"react\";\n\nexport default function Logo() {\n  const builder_url =\n    window.location.protocol + \"//\" + window.location.host + \"/builder\";\n  return (\n    <div className=\"header\">\n      <img alt=\"logo\" src=\"/scribe.png\" />\n      <div>\n        <h1>LIGHT</h1>\n        <span>Learning in Interactive Games with Humans and Text</span>\n        <p>\n          <a href={builder_url} rel=\"noopener noreferrer\" target=\"_blank\">\n            Go To World Builder\n          </a>\n        </p>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Logo from \"./Logo\";\n\nfunction LoadingScreen() {\n  const [isTimedOut, setTimedOut] = React.useState(false);\n  const TIMEOUT_SECONDS = 10;\n\n  React.useEffect(() => {\n    if (!isTimedOut) {\n      const timer = setTimeout(() => {\n        setTimedOut(true);\n      }, TIMEOUT_SECONDS * 1000);\n      return () => clearTimeout(timer);\n    }\n  }, [isTimedOut, setTimedOut]);\n\n  return (\n    <div\n      style={{\n        height: \"100vh\",\n        width: \"100vw\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n      }}\n    >\n      <div style={{ width: 500 }}>\n        <div style={{ width: 300 }}>\n          <Logo />\n        </div>\n        <div style={{ fontSize: 20, marginTop: 50, fontStyle: \"italic\" }}>\n          {isTimedOut ? (\n            <span>\n              It's been {TIMEOUT_SECONDS} seconds, there's likely a server\n              issue.\n            </span>\n          ) : (\n            <span>Hang tight. You are entering a new world...</span>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default LoadingScreen;\n","const DEV = {\n  host: \"http://localhost\",\n  hostname: \"localhost\",\n  port: \"35494\",\n};\n\nexport default DEV;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles.css\";\nimport \"react-tippy/dist/tippy.css\";\nimport \"emoji-mart/css/emoji-mart.css\";\n\nimport { Tooltip } from \"react-tippy\";\nimport { Picker, emojiIndex } from \"emoji-mart\";\nimport cx from \"classnames\";\nimport onClickOutside from \"react-onclickoutside\";\n\nimport { useWSDataSource } from \"./useWSDataSource\";\nimport Logo from \"./Logo\";\nimport LoadingScreen from \"./LoadingScreen\";\n\nimport { setCaretPosition } from \"./utils\";\n\nimport CONFIG from \"./config\";\n\nconst createWebSocketUrlFromBrowserUrl = (url) => {\n  const wsProtocol = url.protocol === \"https:\" ? \"wss\" : \"ws\";\n  const optionalServerHost = new URL(url).searchParams.get(\"server\");\n  var optionalGameId = new URL(url).searchParams.get(\"id\");\n  if (!optionalGameId) {\n    optionalGameId = \"\";\n  }\n  if (optionalServerHost) {\n    console.log(\"Using user-provided server hostname:\", optionalServerHost);\n  }\n  const websocketURL =\n    wsProtocol +\n    \"://\" +\n    (optionalServerHost || CONFIG.hostname) +\n    \":\" +\n    CONFIG.port +\n    `/game${optionalGameId}/socket`;\n  return websocketURL;\n};\n\nconst getDataModelAddress = () => {\n  return new URL(window.location).searchParams.get(\"builder\");\n};\n\n// TODO: consider showing different agent's dialogues in\n// different colors\n//\n// const colors = [\n//   \"#edfff1\", //green,\n//   \"#fffded\", //yellow,\n//   \"#eee8ff\", // purple\n//   \"#e6efff\", //blue\n//   \"#ffe8eb\" //red\n// ];\n\nfunction Setting(props) {\n  return (\n    <div style={{ clear: \"both\", overflow: \"auto\" }}>\n      <div className=\"message type-setting\">\n        {props.text.split(\"\\n\").map((para, idx) => (\n          <p key={idx}>{para}</p>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nfunction Message({ text, caller, actor, isSelf, onReply }) {\n  const [isEditMode, setEditMode] = React.useState(false);\n\n  let classNames = \"message type-dialogue \";\n  if ([\"tell\", \"say\", \"whisper\"].includes(caller)) {\n    text = \"&ldquo;\" + text + \"&rdquo;\";\n    classNames = \"message type-dialogue \";\n  }\n  classNames += isSelf ? \"me\" : \"other\";\n\n  if (isEditMode) {\n    return (\n      <div className={classNames}>\n        <div className=\"agent\">\n          <span>{actor}</span>\n          {isSelf ? null : (\n            <React.Fragment>\n              <i className=\"fa fa-reply\" onClick={() => onReply(actor)} />{\" \"}\n              <i\n                className=\"fa fa-commenting-o \"\n                onClick={() => setEditMode(true)}\n              />\n            </React.Fragment>\n          )}\n        </div>\n        <div style={{ opacity: 0, height: 1, pointerEvents: \"none\" }}>\n          {text}\n        </div>\n        <input className=\"edit-message\" defaultValue={text} />\n        <button type=\"submit\" onClick={() => setEditMode(false)}>\n          Suggest edit\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className={classNames}>\n      <div className=\"agent\">\n        <span>{actor}</span>\n        {isSelf ? null : (\n          <React.Fragment>\n            <Tooltip title={`tell ${actor}...`} position=\"top\">\n              <i className=\"fa fa-reply\" onClick={() => onReply(actor)} />\n            </Tooltip>{\" \"}\n            <Tooltip\n              title={`Do you think something else should have been said instead? Provide feedback via an edit...`}\n              position=\"top\"\n            >\n              <i\n                className=\"fa fa-commenting-o \"\n                onClick={() => setEditMode(true)}\n              />\n            </Tooltip>\n          </React.Fragment>\n        )}\n      </div>\n      {text}\n    </div>\n  );\n}\n\nfunction Entry({ msg, onReply, agents, selfId }) {\n  if (\n    [\n      \"LookEvent\",\n      \"GoEvent\",\n      \"ExamineEvent\",\n      \"ErrorEvent\",\n      \"HelpEvent\",\n      \"text\",\n    ].includes(msg.caller) ||\n    msg.caller === null\n  ) {\n    return <Setting text={msg.text} />;\n  } else {\n    var actor = \"\";\n    if (msg.actors === undefined) {\n      actor = msg.actor.node_id;\n    } else {\n      actor = msg.actors[0];\n    }\n    return (\n      <Message\n        text={msg.text}\n        isSelf={msg.is_self || actor === selfId}\n        actor={agents[actor]}\n        onReply={onReply}\n      />\n    );\n  }\n}\n\nfunction ConnectedApp() {\n  const wsUrl = React.useMemo(\n    () => createWebSocketUrlFromBrowserUrl(window.location),\n    []\n  );\n  const {\n    isErrored,\n    messages,\n    submitMessage,\n    persona,\n    location,\n    agents,\n  } = useWSDataSource(wsUrl);\n\n  if (isErrored)\n    return (\n      <div style={{ textAlign: \"center\", marginTop: 30, fontSize: 30 }}>\n        Could not connect to the server.\n      </div>\n    );\n\n  if (messages.length === 0) {\n    return <LoadingScreen />;\n  }\n\n  return (\n    <Chat\n      messages={messages}\n      onSubmit={submitMessage}\n      persona={persona}\n      location={location}\n      agents={agents}\n    />\n  );\n}\nfunction Chat({ messages, onSubmit, persona, location, agents }) {\n  const [enteredText, setEnteredText] = React.useState(\"\");\n  const chatContainerRef = React.useRef(null);\n  const getAgentName = (agent) => (agents ? agents[agent] : agent);\n  const getEntityId = (agent) => agent.match(/\\d+$/)[0];\n  const dataModelHost = getDataModelAddress();\n\n  const scrollToBottom = React.useCallback(\n    () =>\n      setTimeout(() => {\n        if (chatContainerRef.current)\n          chatContainerRef.current.scrollTop =\n            chatContainerRef.current.scrollHeight;\n      }, 0),\n    [chatContainerRef]\n  );\n\n  React.useEffect(() => {\n    scrollToBottom();\n  }, [scrollToBottom, messages]);\n\n  const defaultEmoji = \"❓\";\n  const { presentAgents } = getLocationState(messages);\n  const [showEmojiPicker, setShowEmojiPicker] = React.useState(false);\n  const [selectedEmoji, setSelectedEmoji] = React.useState(defaultEmoji);\n\n  const chatInputRef = React.useRef();\n  React.useLayoutEffect(() => {\n    chatInputRef.current.focus();\n  }, []);\n\n  React.useEffect(() => {\n    if (persona === null || persona.name === null) return;\n    const skipWords = [\"a\", \"the\", \"an\", \"of\", \"with\", \"holding\"];\n    const tryPickEmojis = !persona\n      ? []\n      : persona.name\n          .split(\" \")\n          .filter((token) => !!token)\n          .map((token) => token.replace(/\\.$/, \"\"))\n          .filter((word) => skipWords.indexOf(word.toLowerCase()) === -1)\n          .flatMap((term) =>\n            emojiIndex.search(term).map((o) => {\n              return o.native;\n            })\n          );\n\n    const autopickedEmoji =\n      tryPickEmojis.length > 0 ? tryPickEmojis[0] : defaultEmoji;\n    setSelectedEmoji(autopickedEmoji);\n  }, [persona, setSelectedEmoji]);\n\n  const setTextTellAgent = React.useCallback(\n    (agent) => {\n      const message = `tell ${agent} \"\"`;\n      setEnteredText(message);\n      setTimeout(\n        () => setCaretPosition(chatInputRef.current, message.length - 1),\n        0 /* 0s timeout to schedule this task to occur after the layout is updated */\n      );\n    },\n    [setEnteredText, chatInputRef]\n  );\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <Logo />\n        <div className=\"game-state\">\n          {persona ? (\n            <div className=\"persona\">\n              <div\n                className={cx(\"icon\", { editing: showEmojiPicker })}\n                style={{ cursor: \"pointer\" }}\n              >\n                <div className=\"overlay\">edit</div>\n                <span\n                  role=\"img\"\n                  aria-label=\"avatar\"\n                  onClick={() => setShowEmojiPicker(true)}\n                >\n                  {selectedEmoji}\n                </span>\n                {showEmojiPicker ? (\n                  <div\n                    style={{\n                      position: \"absolute\",\n                      top: \"80px\",\n                      left: \"50%\",\n                      transform: \"translateX(-50%)\",\n                      zIndex: 999,\n                    }}\n                  >\n                    <BlurClosingPicker\n                      autoFocus={true}\n                      onBlur={() => setShowEmojiPicker(false)}\n                      onSelect={(emoji) => {\n                        // TODO: Send the selected emoji to the back-end so we can keep record it\n                        setSelectedEmoji(emoji.native);\n                        setShowEmojiPicker(false);\n                      }}\n                    />\n                  </div>\n                ) : null}\n              </div>\n              <h3>You are {persona.name}</h3>\n              {persona.description}\n              {dataModelHost && (\n                <Tooltip\n                  style={{ position: \"absolute\", bottom: 0, right: 5 }}\n                  title={`suggest changes for ${persona.name}`}\n                  position=\"bottom\"\n                >\n                  <a\n                    className=\"data-model-deep-link\"\n                    href={`${dataModelHost}/edit/${getEntityId(persona.id)}`}\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\"\n                  >\n                    <i className=\"fa fa-edit\" aria-hidden=\"true\" />\n                  </a>\n                </Tooltip>\n              )}\n            </div>\n          ) : null}\n          {location ? (\n            <div className=\"location\">\n              <h3>{location.name}</h3>\n              {location.description.split(\"\\n\").map((para, idx) => (\n                <p key={idx}>{para}</p>\n              ))}\n              {dataModelHost && (\n                <Tooltip\n                  style={{ position: \"absolute\", bottom: 0, right: 5 }}\n                  title={`suggest changes for ${\n                    location.name.split(\" the \")[1]\n                  }`}\n                  position=\"bottom\"\n                >\n                  <a\n                    className=\"data-model-deep-link\"\n                    href={`${dataModelHost}/edit/${getEntityId(location.id)}`}\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\"\n                  >\n                    <i className=\"fa fa-edit\" aria-hidden=\"true\" />\n                  </a>\n                </Tooltip>\n              )}\n            </div>\n          ) : null}\n        </div>\n        {/* <Map /> */}\n        {/* <div className=\"app-controls\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={isAdminMode}\n              onChange={e => setAdminMode(!isAdminMode)}\n            />{\" \"}\n            Admin Mode\n          </label>\n        </div> */}\n      </div>\n      <div className=\"chat-wrapper\">\n        <div className=\"chat\" ref={chatContainerRef}>\n          <div className=\"chatlog\">\n            {messages.map((msg, idx) => (\n              <Entry\n                key={idx}\n                msg={msg}\n                agents={agents}\n                onReply={(agent) => setTextTellAgent(agent)}\n                selfId={persona.id}\n              />\n            ))}\n          </div>\n        </div>\n        <div className=\"controls\">\n          <form\n            style={{ display: \"flex\" }}\n            onSubmit={(e) => {\n              e.preventDefault();\n\n              if (!!enteredText) {\n                onSubmit(enteredText);\n                setEnteredText(\"\");\n                scrollToBottom();\n              }\n            }}\n          >\n            <input\n              ref={chatInputRef}\n              value={enteredText}\n              onChange={(e) => setEnteredText(e.target.value)}\n              onKeyPress={(e) => {\n                if (e.key === \"Enter\" && e.shiftKey) {\n                  const prefix = e.target.value.startsWith('\"') ? \"\" : '\"';\n                  const suffix = e.target.value.endsWith('\"') ? \"\" : '\"';\n                  setEnteredText(prefix + e.target.value + suffix);\n                }\n              }}\n              className=\"chatbox\"\n              placeholder=\"Enter text to interact with the world here...\"\n            />\n          </form>\n          <div className=\"actions\">\n            <div style={{ float: \"left\" }}>\n              {/* {location ? <span>{location.name} &mdash; </span> : null} */}\n              {presentAgents\n                .filter((id) => id !== persona.id) // only show users other than self\n                .map((agent) => {\n                  const agentName = getAgentName(agent);\n                  const agentId = getEntityId(agent);\n                  return (\n                    <span\n                      key={agentName}\n                      style={{\n                        backgroundColor: \"#eee\",\n                        borderRadius: 3,\n                        padding: \"1px 3px\",\n                        marginRight: 5,\n                      }}\n                    >\n                      <span\n                        onClick={() => {\n                          setTextTellAgent(agentName);\n                        }}\n                      >\n                        {agentName}{\" \"}\n                        <Tooltip\n                          title={`tell ${agentName}...`}\n                          position=\"bottom\"\n                        >\n                          <i className=\"fa fa-comment-o\" aria-hidden=\"true\" />\n                        </Tooltip>\n                      </span>\n                      {dataModelHost && (\n                        <>\n                          {\" \"}\n                          <Tooltip\n                            title={`suggest changes for ${agentName}`}\n                            position=\"bottom\"\n                          >\n                            <a\n                              className=\"data-model-deep-link\"\n                              href={`${dataModelHost}/edit/${agentId}`}\n                              rel=\"noopener noreferrer\"\n                              target=\"_blank\"\n                            >\n                              <i className=\"fa fa-edit\" aria-hidden=\"true\" />\n                            </a>\n                          </Tooltip>\n                        </>\n                      )}\n                    </span>\n                  );\n                })}\n            </div>\n\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                float: \"right\",\n              }}\n            >\n              <span\n                className={cx(\"hint-message\", \"fadeHidden\", {\n                  fadeShow: enteredText.length > 0 && enteredText[0] === '\"',\n                })}\n              >\n                Tip: Hit Shift+Enter to auto-wrap your entry in quotes\n              </span>\n            </div>\n\n            {[\n              // \"act\",\n              // \"say\",\n              // \"tell\"\n              // \"whisper\",\n              // \"applaud\",\n              // \"blush\",\n              // \"cry\",\n              // \"dance\",\n              // \"frown\",\n              // \"gasp\",\n              // \"grin\",\n              // \"groan\",\n              // \"growl\",\n              // \"laugh\",\n              // \"nod\",\n              // \"nudge\",\n              // \"ponder\",\n              // \"pout\",\n              // \"scream\",\n              // \"shrug\",\n              // \"sigh\",\n              // \"smile\",\n              // \"stare\",\n              // \"wave\",\n              // \"wink\",\n              // \"yawn\"\n            ].map((action) => (\n              <span className=\"action\" key={action}>\n                {action}\n              </span>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst EmojiPicker = ({ onBlur, ...props }) => {\n  EmojiPicker.handleClickOutside = () => onBlur();\n  return <Picker {...props} />;\n};\nconst BlurClosingPicker = onClickOutside(EmojiPicker, {\n  handleClickOutside: () => EmojiPicker.handleClickOutside,\n});\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<ConnectedApp />, rootElement);\n\nfunction getLocationState(messages) {\n  var valid_messages = messages.filter(\n    (m) => m.is_self !== true && m.caller !== null\n  );\n  if (valid_messages.length === 0) return [null, []];\n  var lastMessage = valid_messages[valid_messages.length - 1];\n\n  return {\n    currentRoom: lastMessage.room_id,\n    presentAgents: Object.keys(lastMessage.present_agent_ids),\n  };\n}\n","export function zipToObject(keys, values) {\n  return keys.reduce((obj, k, i) => ({ ...obj, [k]: values[i] }), {});\n}\n\nexport function setCaretPosition(elem, caretPos) {\n  /* inspired from: https://stackoverflow.com/a/512542 */\n  if (elem != null) {\n    if (elem.createTextRange) {\n      var range = elem.createTextRange();\n      range.move(\"character\", caretPos);\n      range.select();\n    } else {\n      if (elem.selectionStart) {\n        elem.focus();\n        elem.setSelectionRange(caretPos, caretPos);\n      } else elem.focus();\n    }\n  }\n}\n"],"sourceRoot":""}