{"version":3,"sources":["useWSDataSource.js","Logo.js","LoadingScreen.js","config.js","index.js","utils.js"],"names":["reducer","state","msg","updatedState","concat","Object","toConsumableArray","console","groupCollapsed","length","table","groupEnd","stringifyList","listItems","defaultMsg","res","i","getNeighbors","action","paths","keys","room","neighbors","forEach","neighbor_id","neighbor","push","label","getItems","objects","object_id","object","Logo","builder_url","window","location","protocol","host","react_default","a","createElement","className","alt","src","href","rel","target","LoadingScreen","isFull","_React$useState","React","useState","_React$useState2","slicedToArray","isTimedOut","setTimedOut","useEffect","timer","setTimeout","TIMEOUT_SECONDS","clearTimeout","style","height","width","display","alignItems","justifyContent","flexDirection","fontSize","marginTop","fontStyle","DEV","hostname","port","createWebSocketUrlFromBrowserUrl","url","wsProtocol","optionalServerHost","URL","searchParams","get","optionalGameId","log","CONFIG","getDataModelAddress","Setting","props","clear","overflow","text","split","map","para","idx","key","Message","_ref","caller","actor","isSelf","onReply","isEditMode","setEditMode","classNames","includes","Fragment","onClick","opacity","pointerEvents","defaultValue","type","react_tippy","title","position","Entry","_ref2","agents","selfId","undefined","actors","node_id","is_self","ConnectedApp","_useWSDataSource","websocket","useRef","isConnected","setConnected","_React$useState3","_React$useState4","isErrored","setErrored","_React$useState5","_React$useState6","setFull","_React$useReducer","useReducer","_React$useReducer2","messages","appendMessage","_React$useState7","_React$useState8","persona","setPersona","_React$useState9","_React$useState10","setLocation","_React$useState11","_React$useState12","setAgents","agentList","current","handleMessage","useCallback","cmd","JSON","parse","data","command","buffer","isPersonaDescription","new_agents","objectSpread","present_agent_ids","name","description","id","items","desc","onmessage","submitMessage","txt","stringify","send","WebSocket","onopen","onerror","onclose","useWSDataSource","useMemo","textAlign","src_LoadingScreen","Chat","onSubmit","_ref3","enteredText","setEnteredText","chatContainerRef","getEntityId","agent","match","dataModelHost","scrollToBottom","scrollTop","scrollHeight","presentAgents","valid_messages","filter","m","lastMessage","currentRoom","room_id","getLocationState","showEmojiPicker","setShowEmojiPicker","selectedEmoji","setSelectedEmoji","chatInputRef","useLayoutEffect","focus","skipWords","tryPickEmojis","token","replace","word","indexOf","toLowerCase","flatMap","term","emojiIndex","search","o","native","autopickedEmoji","setTextTellAgent","message","elem","caretPos","createTextRange","range","move","select","selectionStart","setSelectionRange","setCaretPosition","cx","editing","cursor","role","aria-label","top","left","transform","zIndex","BlurClosingPicker","autoFocus","onBlur","onSelect","emoji","bottom","right","aria-hidden","ref","e","preventDefault","value","onChange","onKeyPress","shiftKey","prefix","startsWith","suffix","endsWith","placeholder","float","agentName","getAgentName","agentId","backgroundColor","borderRadius","padding","marginRight","fadeShow","EmojiPicker","_ref4","objectWithoutProperties","handleClickOutside","dist_es","onClickOutside","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.4a626e23.chunk.js","sourcesContent":["import React from \"react\";\n\nconst reducer = (state, msg) => {\n  const updatedState = [...state, msg];\n  console.groupCollapsed(\"New message. Total: \" + updatedState.length);\n  console.table(updatedState);\n  console.groupEnd();\n  return updatedState;\n};\n\n/*\n  Concatentates a list of items with an oxford style comma\n  If the items is empty, returns the default message instead\n*/\nconst stringifyList = (listItems, defaultMsg) => {\n  var res = \"\";\n  for (let i = 0; i < listItems.length; i++) {\n    if (i === 0) {\n      res += listItems[i];\n    } else if (i === listItems.length - 1) {\n      res += \", and \" + listItems[i];\n    } else {\n      res += \", \" + listItems[i];\n    }\n  }\n  if (res === \"\") {\n    return defaultMsg;\n  }\n  return res;\n};\n\n/*\n  Get the labels on paths from neighbors, and display them on screen\n*/\nconst getNeighbors = (action) => {\n  var paths = [];\n  Object.keys(action.room.neighbors).forEach((neighbor_id) => {\n    var neighbor = action.room.neighbors[neighbor_id];\n    paths.push(neighbor.label);\n  });\n  return stringifyList(paths, \"there are no exits\");\n};\n\n/*\n  Get the objects in the room to display them\n*/\nconst getItems = (action) => {\n  var objects = [];\n  Object.keys(action.objects).forEach((object_id) => {\n    const object = action.objects[object_id];\n    objects.push(object);\n  });\n  return stringifyList(objects, \"nothing of interest\");\n};\n\nexport function useWSDataSource(url) {\n  const websocket = React.useRef();\n  const [isConnected, setConnected] = React.useState(false);\n  const [isErrored, setErrored] = React.useState(false);\n  const [isFull, setFull] = React.useState(false);\n  const [messages, appendMessage] = React.useReducer(reducer, []);\n  const [persona, setPersona] = React.useState(null);\n  const [location, setLocation] = React.useState(null);\n  const [agents, setAgents] = React.useState({});\n  const agentList = React.useRef(agents);\n  agentList.current = agents;\n\n  const handleMessage = React.useCallback(\n    (msg) => {\n      const cmd = JSON.parse(msg.data);\n      if (cmd.command === \"actions\") {\n        const buffer = [];\n\n        cmd.data.forEach((action) => {\n          const isPersonaDescription = action.caller === \"SoulSpawnEvent\";\n          const isLocationDescription = action.caller === \"LookEvent\";\n          action.room = JSON.parse(action.room);\n          action.actor = JSON.parse(action.actor);\n          var new_agents = {\n            ...agentList.current,\n            ...action.present_agent_ids,\n          };\n          setAgents(new_agents);\n          if (isPersonaDescription) {\n            setPersona({\n              name: action.actor.name,\n              description: action.actor.persona,\n              id: action.actor.node_id,\n            });\n          }\n          const neighbors = getNeighbors(action);\n          const items = getItems(action);\n          setLocation({\n            name: action.room.name,\n            description:\n              action.room.desc +\n              \"\\n\" +\n              \"There is \" +\n              items +\n              \"\\n\" +\n              \"You notice \" +\n              neighbors,\n            id: action.room.node_id,\n          });\n          buffer.push(action);\n          buffer.forEach((msg) => appendMessage(msg));\n        });\n      } else if (cmd.command === \"fail_find\") {\n        setFull(true);\n      }\n    },\n    [appendMessage, setPersona, setAgents, setLocation]\n  );\n\n  React.useEffect(() => {\n    websocket.current.onmessage = handleMessage;\n  }, [handleMessage]);\n\n  const submitMessage = React.useCallback(\n    (txt) => {\n      appendMessage({\n        caller: \"say\",\n        text: txt,\n        is_self: true,\n        actors: [persona.id],\n      });\n\n      const msg = JSON.stringify({ command: \"act\", data: txt });\n      return websocket.current.send(msg);\n    },\n    [websocket, appendMessage, persona]\n  );\n\n  if (!websocket.current) {\n    websocket.current = new WebSocket(url);\n\n    // websocket.current.onmessage = handleMessage;\n\n    websocket.current.onopen = () => {\n      console.log(\"opened\");\n      setConnected(true);\n    };\n\n    websocket.current.onerror = websocket.current.onclose = () => {\n      console.log(\"errored\");\n      setConnected(false);\n      setErrored(true);\n      websocket.current = null;\n    };\n  }\n\n  return {\n    isConnected,\n    messages,\n    submitMessage,\n    persona,\n    location,\n    isErrored,\n    agents,\n    isFull,\n  };\n}\n","import React from \"react\";\n\nexport default function Logo() {\n  const builder_url =\n    window.location.protocol + \"//\" + window.location.host + \"/builder\";\n  return (\n    <div className=\"header\">\n      <img alt=\"logo\" src=\"/scribe.png\" />\n      <div>\n        <h1>LIGHT</h1>\n        <span>Learning in Interactive Games with Humans and Text</span>\n        <p>\n          <a href={builder_url} rel=\"noopener noreferrer\" target=\"_blank\">\n            Go To World Builder\n          </a>\n        </p>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Logo from \"./Logo\";\n\nfunction LoadingScreen(isFull) {\n  const [isTimedOut, setTimedOut] = React.useState(false);\n  const TIMEOUT_SECONDS = 10;\n\n  React.useEffect(() => {\n    if (!isTimedOut) {\n      const timer = setTimeout(() => {\n        setTimedOut(true);\n      }, TIMEOUT_SECONDS * 1000);\n      return () => clearTimeout(timer);\n    }\n  }, [isTimedOut, setTimedOut]);\n\n  let msg = <span></span>;\n  if (isFull) {\n    const builder_url = window.location.protocol + \"//\" + window.location.host + \"/builder\";\n    msg = <p>\n      Sorry, the base world is filled with players right now, you'll need to return later.\n      Or, create your own world and share it with friends using the World Builder. \n      <a href={builder_url} rel=\"noopener noreferrer\" target=\"_blank\">\n        Go To World Builder.\n      </a>\n    </p>;\n  } else if (isTimedOut) {\n    msg = <span>\n      It's been {TIMEOUT_SECONDS} seconds, there's likely a server\n      issue.\n    </span>;\n  } else {\n    msg = <span>Hang tight. You are entering a new world...</span>;\n  }\n\n  return (\n    <div\n      style={{\n        height: \"100vh\",\n        width: \"100vw\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n      }}\n    >\n      <div style={{ width: 500 }}>\n        <div style={{ width: 300 }}>\n          <Logo />\n        </div>\n        <div style={{ fontSize: 20, marginTop: 50, fontStyle: \"italic\" }}>\n          {msg}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default LoadingScreen;\n","const DEV = {\n  host: \"http://localhost\",\n  hostname: \"localhost\",\n  port: \"35494\",\n};\n\nexport default DEV;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles.css\";\nimport \"react-tippy/dist/tippy.css\";\nimport \"emoji-mart/css/emoji-mart.css\";\n\nimport { Tooltip } from \"react-tippy\";\nimport { Picker, emojiIndex } from \"emoji-mart\";\nimport cx from \"classnames\";\nimport onClickOutside from \"react-onclickoutside\";\n\nimport { useWSDataSource } from \"./useWSDataSource\";\nimport Logo from \"./Logo\";\nimport LoadingScreen from \"./LoadingScreen\";\n\nimport { setCaretPosition } from \"./utils\";\n\nimport CONFIG from \"./config\";\n\nconst createWebSocketUrlFromBrowserUrl = (url) => {\n  const wsProtocol = url.protocol === \"https:\" ? \"wss\" : \"ws\";\n  const optionalServerHost = new URL(url).searchParams.get(\"server\");\n  var optionalGameId = new URL(url).searchParams.get(\"id\");\n  if (!optionalGameId) {\n    optionalGameId = \"\";\n  }\n  if (optionalServerHost) {\n    console.log(\"Using user-provided server hostname:\", optionalServerHost);\n  }\n  const websocketURL =\n    wsProtocol +\n    \"://\" +\n    (optionalServerHost || CONFIG.hostname) +\n    \":\" +\n    CONFIG.port +\n    `/game${optionalGameId}/socket`;\n  return websocketURL;\n};\n\nconst getDataModelAddress = () => {\n  return new URL(window.location).searchParams.get(\"builder\");\n};\n\n// TODO: consider showing different agent's dialogues in\n// different colors\n//\n// const colors = [\n//   \"#edfff1\", //green,\n//   \"#fffded\", //yellow,\n//   \"#eee8ff\", // purple\n//   \"#e6efff\", //blue\n//   \"#ffe8eb\" //red\n// ];\n\nfunction Setting(props) {\n  return (\n    <div style={{ clear: \"both\", overflow: \"auto\" }}>\n      <div className=\"message type-setting\">\n        {props.text.split(\"\\n\").map((para, idx) => (\n          <p key={idx}>{para}</p>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nfunction Message({ text, caller, actor, isSelf, onReply }) {\n  const [isEditMode, setEditMode] = React.useState(false);\n\n  let classNames = \"message type-dialogue \";\n  if ([\"tell\", \"say\", \"whisper\"].includes(caller)) {\n    text = \"&ldquo;\" + text + \"&rdquo;\";\n    classNames = \"message type-dialogue \";\n  }\n  classNames += isSelf ? \"me\" : \"other\";\n\n  if (isEditMode) {\n    return (\n      <div className={classNames}>\n        <div className=\"agent\">\n          <span>{actor}</span>\n          {isSelf ? null : (\n            <React.Fragment>\n              <i className=\"fa fa-reply\" onClick={() => onReply(actor)} />{\" \"}\n              <i\n                className=\"fa fa-commenting-o \"\n                onClick={() => setEditMode(true)}\n              />\n            </React.Fragment>\n          )}\n        </div>\n        <div style={{ opacity: 0, height: 1, pointerEvents: \"none\" }}>\n          {text}\n        </div>\n        <input className=\"edit-message\" defaultValue={text} />\n        <button type=\"submit\" onClick={() => setEditMode(false)}>\n          Suggest edit\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className={classNames}>\n      <div className=\"agent\">\n        <span>{actor}</span>\n        {isSelf ? null : (\n          <React.Fragment>\n            <Tooltip title={`tell ${actor}...`} position=\"top\">\n              <i className=\"fa fa-reply\" onClick={() => onReply(actor)} />\n            </Tooltip>{\" \"}\n            <Tooltip\n              title={`Do you think something else should have been said instead? Provide feedback via an edit...`}\n              position=\"top\"\n            >\n              <i\n                className=\"fa fa-commenting-o \"\n                onClick={() => setEditMode(true)}\n              />\n            </Tooltip>\n          </React.Fragment>\n        )}\n      </div>\n      {text}\n    </div>\n  );\n}\n\nfunction Entry({ msg, onReply, agents, selfId }) {\n  if (\n    [\n      \"LookEvent\",\n      \"GoEvent\",\n      \"ExamineEvent\",\n      \"ErrorEvent\",\n      \"HelpEvent\",\n      \"text\",\n    ].includes(msg.caller) ||\n    msg.caller === null\n  ) {\n    return <Setting text={msg.text} />;\n  } else {\n    var actor = \"\";\n    if (msg.actors === undefined) {\n      actor = msg.actor.node_id;\n    } else {\n      actor = msg.actors[0];\n    }\n    return (\n      <Message\n        text={msg.text}\n        isSelf={msg.is_self || actor === selfId}\n        actor={agents[actor]}\n        onReply={onReply}\n      />\n    );\n  }\n}\n\nfunction ConnectedApp() {\n  const wsUrl = React.useMemo(\n    () => createWebSocketUrlFromBrowserUrl(window.location),\n    []\n  );\n  const {\n    isErrored,\n    messages,\n    submitMessage,\n    persona,\n    location,\n    agents,\n    isFull,\n  } = useWSDataSource(wsUrl);\n\n  if (isErrored)\n    return (\n      <div style={{ textAlign: \"center\", marginTop: 30, fontSize: 30 }}>\n        Could not connect to the server.\n      </div>\n    );\n\n  if (messages.length === 0) {\n    return <LoadingScreen isFull={isFull}/>;\n  }\n\n  return (\n    <Chat\n      messages={messages}\n      onSubmit={submitMessage}\n      persona={persona}\n      location={location}\n      agents={agents}\n    />\n  );\n}\nfunction Chat({ messages, onSubmit, persona, location, agents }) {\n  const [enteredText, setEnteredText] = React.useState(\"\");\n  const chatContainerRef = React.useRef(null);\n  const getAgentName = (agent) => (agents ? agents[agent] : agent);\n  const getEntityId = (agent) => agent.match(/\\d+$/)[0];\n  const dataModelHost = getDataModelAddress();\n\n  const scrollToBottom = React.useCallback(\n    () =>\n      setTimeout(() => {\n        if (chatContainerRef.current)\n          chatContainerRef.current.scrollTop =\n            chatContainerRef.current.scrollHeight;\n      }, 0),\n    [chatContainerRef]\n  );\n\n  React.useEffect(() => {\n    scrollToBottom();\n  }, [scrollToBottom, messages]);\n\n  const defaultEmoji = \"❓\";\n  const { presentAgents } = getLocationState(messages);\n  const [showEmojiPicker, setShowEmojiPicker] = React.useState(false);\n  const [selectedEmoji, setSelectedEmoji] = React.useState(defaultEmoji);\n\n  const chatInputRef = React.useRef();\n  React.useLayoutEffect(() => {\n    chatInputRef.current.focus();\n  }, []);\n\n  React.useEffect(() => {\n    if (persona === null || persona.name === null) return;\n    const skipWords = [\"a\", \"the\", \"an\", \"of\", \"with\", \"holding\"];\n    const tryPickEmojis = !persona\n      ? []\n      : persona.name\n          .split(\" \")\n          .filter((token) => !!token)\n          .map((token) => token.replace(/\\.$/, \"\"))\n          .filter((word) => skipWords.indexOf(word.toLowerCase()) === -1)\n          .flatMap((term) =>\n            emojiIndex.search(term).map((o) => {\n              return o.native;\n            })\n          );\n\n    const autopickedEmoji =\n      tryPickEmojis.length > 0 ? tryPickEmojis[0] : defaultEmoji;\n    setSelectedEmoji(autopickedEmoji);\n  }, [persona, setSelectedEmoji]);\n\n  const setTextTellAgent = React.useCallback(\n    (agent) => {\n      const message = `tell ${agent} \"\"`;\n      setEnteredText(message);\n      setTimeout(\n        () => setCaretPosition(chatInputRef.current, message.length - 1),\n        0 /* 0s timeout to schedule this task to occur after the layout is updated */\n      );\n    },\n    [setEnteredText, chatInputRef]\n  );\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <Logo />\n        <div className=\"game-state\">\n          {persona ? (\n            <div className=\"persona\">\n              <div\n                className={cx(\"icon\", { editing: showEmojiPicker })}\n                style={{ cursor: \"pointer\" }}\n              >\n                <div className=\"overlay\">edit</div>\n                <span\n                  role=\"img\"\n                  aria-label=\"avatar\"\n                  onClick={() => setShowEmojiPicker(true)}\n                >\n                  {selectedEmoji}\n                </span>\n                {showEmojiPicker ? (\n                  <div\n                    style={{\n                      position: \"absolute\",\n                      top: \"80px\",\n                      left: \"50%\",\n                      transform: \"translateX(-50%)\",\n                      zIndex: 999,\n                    }}\n                  >\n                    <BlurClosingPicker\n                      autoFocus={true}\n                      onBlur={() => setShowEmojiPicker(false)}\n                      onSelect={(emoji) => {\n                        // TODO: Send the selected emoji to the back-end so we can keep record it\n                        setSelectedEmoji(emoji.native);\n                        setShowEmojiPicker(false);\n                      }}\n                    />\n                  </div>\n                ) : null}\n              </div>\n              <h3>You are {persona.name}</h3>\n              {persona.description}\n              {dataModelHost && (\n                <Tooltip\n                  style={{ position: \"absolute\", bottom: 0, right: 5 }}\n                  title={`suggest changes for ${persona.name}`}\n                  position=\"bottom\"\n                >\n                  <a\n                    className=\"data-model-deep-link\"\n                    href={`${dataModelHost}/edit/${getEntityId(persona.id)}`}\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\"\n                  >\n                    <i className=\"fa fa-edit\" aria-hidden=\"true\" />\n                  </a>\n                </Tooltip>\n              )}\n            </div>\n          ) : null}\n          {location ? (\n            <div className=\"location\">\n              <h3>{location.name}</h3>\n              {location.description.split(\"\\n\").map((para, idx) => (\n                <p key={idx}>{para}</p>\n              ))}\n              {dataModelHost && (\n                <Tooltip\n                  style={{ position: \"absolute\", bottom: 0, right: 5 }}\n                  title={`suggest changes for ${\n                    location.name.split(\" the \")[1]\n                  }`}\n                  position=\"bottom\"\n                >\n                  <a\n                    className=\"data-model-deep-link\"\n                    href={`${dataModelHost}/edit/${getEntityId(location.id)}`}\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\"\n                  >\n                    <i className=\"fa fa-edit\" aria-hidden=\"true\" />\n                  </a>\n                </Tooltip>\n              )}\n            </div>\n          ) : null}\n        </div>\n        {/* <Map /> */}\n        {/* <div className=\"app-controls\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={isAdminMode}\n              onChange={e => setAdminMode(!isAdminMode)}\n            />{\" \"}\n            Admin Mode\n          </label>\n        </div> */}\n      </div>\n      <div className=\"chat-wrapper\">\n        <div className=\"chat\" ref={chatContainerRef}>\n          <div className=\"chatlog\">\n            {messages.map((msg, idx) => (\n              <Entry\n                key={idx}\n                msg={msg}\n                agents={agents}\n                onReply={(agent) => setTextTellAgent(agent)}\n                selfId={persona.id}\n              />\n            ))}\n          </div>\n        </div>\n        <div className=\"controls\">\n          <form\n            style={{ display: \"flex\" }}\n            onSubmit={(e) => {\n              e.preventDefault();\n\n              if (!!enteredText) {\n                onSubmit(enteredText);\n                setEnteredText(\"\");\n                scrollToBottom();\n              }\n            }}\n          >\n            <input\n              ref={chatInputRef}\n              value={enteredText}\n              onChange={(e) => setEnteredText(e.target.value)}\n              onKeyPress={(e) => {\n                if (e.key === \"Enter\" && e.shiftKey) {\n                  const prefix = e.target.value.startsWith('\"') ? \"\" : '\"';\n                  const suffix = e.target.value.endsWith('\"') ? \"\" : '\"';\n                  setEnteredText(prefix + e.target.value + suffix);\n                }\n              }}\n              className=\"chatbox\"\n              placeholder=\"Enter text to interact with the world here...\"\n            />\n          </form>\n          <div className=\"actions\">\n            <div style={{ float: \"left\" }}>\n              {/* {location ? <span>{location.name} &mdash; </span> : null} */}\n              {presentAgents\n                .filter((id) => id !== persona.id) // only show users other than self\n                .map((agent) => {\n                  const agentName = getAgentName(agent);\n                  const agentId = getEntityId(agent);\n                  return (\n                    <span\n                      key={agentName}\n                      style={{\n                        backgroundColor: \"#eee\",\n                        borderRadius: 3,\n                        padding: \"1px 3px\",\n                        marginRight: 5,\n                      }}\n                    >\n                      <span\n                        onClick={() => {\n                          setTextTellAgent(agentName);\n                        }}\n                      >\n                        {agentName}{\" \"}\n                        <Tooltip\n                          title={`tell ${agentName}...`}\n                          position=\"bottom\"\n                        >\n                          <i className=\"fa fa-comment-o\" aria-hidden=\"true\" />\n                        </Tooltip>\n                      </span>\n                      {dataModelHost && (\n                        <>\n                          {\" \"}\n                          <Tooltip\n                            title={`suggest changes for ${agentName}`}\n                            position=\"bottom\"\n                          >\n                            <a\n                              className=\"data-model-deep-link\"\n                              href={`${dataModelHost}/edit/${agentId}`}\n                              rel=\"noopener noreferrer\"\n                              target=\"_blank\"\n                            >\n                              <i className=\"fa fa-edit\" aria-hidden=\"true\" />\n                            </a>\n                          </Tooltip>\n                        </>\n                      )}\n                    </span>\n                  );\n                })}\n            </div>\n\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                float: \"right\",\n              }}\n            >\n              <span\n                className={cx(\"hint-message\", \"fadeHidden\", {\n                  fadeShow: enteredText.length > 0 && enteredText[0] === '\"',\n                })}\n              >\n                Tip: Hit Shift+Enter to auto-wrap your entry in quotes\n              </span>\n            </div>\n\n            {[\n              // \"act\",\n              // \"say\",\n              // \"tell\"\n              // \"whisper\",\n              // \"applaud\",\n              // \"blush\",\n              // \"cry\",\n              // \"dance\",\n              // \"frown\",\n              // \"gasp\",\n              // \"grin\",\n              // \"groan\",\n              // \"growl\",\n              // \"laugh\",\n              // \"nod\",\n              // \"nudge\",\n              // \"ponder\",\n              // \"pout\",\n              // \"scream\",\n              // \"shrug\",\n              // \"sigh\",\n              // \"smile\",\n              // \"stare\",\n              // \"wave\",\n              // \"wink\",\n              // \"yawn\"\n            ].map((action) => (\n              <span className=\"action\" key={action}>\n                {action}\n              </span>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst EmojiPicker = ({ onBlur, ...props }) => {\n  EmojiPicker.handleClickOutside = () => onBlur();\n  return <Picker {...props} />;\n};\nconst BlurClosingPicker = onClickOutside(EmojiPicker, {\n  handleClickOutside: () => EmojiPicker.handleClickOutside,\n});\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<ConnectedApp />, rootElement);\n\nfunction getLocationState(messages) {\n  var valid_messages = messages.filter(\n    (m) => m.is_self !== true && m.caller !== null\n  );\n  if (valid_messages.length === 0) return [null, []];\n  var lastMessage = valid_messages[valid_messages.length - 1];\n\n  return {\n    currentRoom: lastMessage.room_id,\n    presentAgents: Object.keys(lastMessage.present_agent_ids),\n  };\n}\n","export function zipToObject(keys, values) {\n  return keys.reduce((obj, k, i) => ({ ...obj, [k]: values[i] }), {});\n}\n\nexport function setCaretPosition(elem, caretPos) {\n  /* inspired from: https://stackoverflow.com/a/512542 */\n  if (elem != null) {\n    if (elem.createTextRange) {\n      var range = elem.createTextRange();\n      range.move(\"character\", caretPos);\n      range.select();\n    } else {\n      if (elem.selectionStart) {\n        elem.focus();\n        elem.setSelectionRange(caretPos, caretPos);\n      } else elem.focus();\n    }\n  }\n}\n"],"sourceRoot":""}