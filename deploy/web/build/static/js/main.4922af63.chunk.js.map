{"version":3,"sources":["useWSDataSource.js","Logo.js","LoadingScreen.js","config.js","index.js","utils.js"],"names":["reducer","state","msg","updatedState","concat","Object","toConsumableArray","console","groupCollapsed","length","table","groupEnd","useWSDataSource","url","websocket","React","useRef","_React$useState","useState","_React$useState2","slicedToArray","isConnected","setConnected","_React$useState3","_React$useState4","isErrored","setErrored","_React$useReducer","useReducer","_React$useReducer2","messages","appendMessage","_React$useState5","_React$useState6","persona","setPersona","_React$useState7","_React$useState8","location","setLocation","_React$useState9","_React$useState10","agents","setAgents","handleMessage","useCallback","cmd","JSON","parse","data","command","buffer","forEach","action","isPersonaDescription","caller","isLocationDescription","room","actor","name","description","id","node_id","desc","push","useEffect","current","onmessage","submitMessage","txt","text","is_self","actors","stringify","send","WebSocket","onopen","log","onerror","onclose","Logo","react_default","a","createElement","className","alt","src","LoadingScreen","isTimedOut","setTimedOut","timer","setTimeout","TIMEOUT_SECONDS","clearTimeout","style","height","width","display","alignItems","justifyContent","flexDirection","fontSize","marginTop","fontStyle","DEV","host","hostname","port","createWebSocketUrlFromBrowserUrl","wsProtocol","protocol","optionalServerHost","URL","searchParams","get","CONFIG","getDataModelAddress","window","Setting","props","clear","overflow","split","map","para","idx","key","Message","_ref","isSelf","onReply","isEditMode","setEditMode","classNames","includes","Fragment","onClick","opacity","pointerEvents","defaultValue","type","react_tippy","title","position","Entry","_ref2","selfId","Chat","_ref3","onSubmit","enteredText","setEnteredText","chatContainerRef","getEntityId","agent","match","dataModelHost","scrollToBottom","scrollTop","scrollHeight","presentAgents","valid_messages","filter","m","lastMessage","currentRoom","room_id","present_agent_ids","getLocationState","showEmojiPicker","setShowEmojiPicker","selectedEmoji","setSelectedEmoji","chatInputRef","useLayoutEffect","focus","skipWords","tryPickEmojis","token","replace","word","indexOf","toLowerCase","flatMap","term","emojiIndex","search","o","native","autopickedEmoji","setTextTellAgent","message","elem","caretPos","createTextRange","range","move","select","selectionStart","setSelectionRange","setCaretPosition","cx","editing","cursor","role","aria-label","top","left","transform","zIndex","BlurClosingPicker","autoFocus","onBlur","onSelect","emoji","bottom","right","href","rel","target","aria-hidden","ref","e","preventDefault","value","onChange","onKeyPress","shiftKey","prefix","startsWith","suffix","endsWith","placeholder","float","agentName","getAgentName","agentId","backgroundColor","borderRadius","padding","marginRight","fadeShow","EmojiPicker","_ref4","objectWithoutProperties","handleClickOutside","dist_es","onClickOutside","rootElement","document","getElementById","ReactDOM","render","_useWSDataSource","useMemo","textAlign","src_LoadingScreen"],"mappings":"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","file":"static/js/main.4922af63.chunk.js","sourcesContent":["import React from \"react\";\nimport { zipToObject } from \"./utils\";\n\nconst reducer = (state, msg) => {\n  const updatedState = [...state, msg];\n  console.groupCollapsed(\"New message. Total: \" + updatedState.length);\n  console.table(updatedState);\n  console.groupEnd();\n  return updatedState;\n};\n\nexport function useWSDataSource(url) {\n  const websocket = React.useRef();\n  const [isConnected, setConnected] = React.useState(false);\n  const [isErrored, setErrored] = React.useState(false);\n  const [messages, appendMessage] = React.useReducer(reducer, []);\n  const [persona, setPersona] = React.useState(null);\n  const [location, setLocation] = React.useState(null);\n  const [agents, setAgents] = React.useState({});\n\n  const handleMessage = React.useCallback(\n    msg => {\n      const cmd = JSON.parse(msg.data);\n      if (cmd.command === \"actions\") {\n        const buffer = [];\n\n        cmd.data.forEach(action => {\n          const isRespawn = false; /* action.text.startsWith(\n            \"Your lost soul attempts to join the living...\"\n          );*/\n          const isPersonaDescription = action.caller === \"SpawnEvent\";\n          const isLocationDescription = action.caller === \"LookEvent\";\n          const hasUpdatedAgentsInfo = false; //!!action.present_agent_ids;\n\n          action.room = JSON.parse(action.room)\n          action.actor = JSON.parse(action.actor)\n\n          if (hasUpdatedAgentsInfo) {\n            setAgents(\n              zipToObject(action.room_agents[0], action.room_agents[1])\n            );\n          }\n          if (isPersonaDescription) {\n            setPersona({\n              name: action.actor.name,\n              description: action.actor.persona,\n              id: action.actor.node_id\n            });\n            if (isRespawn) {\n              buffer.push(action);\n            }\n            return;\n          } else if (isLocationDescription) {\n            setLocation({\n              name: action.room.name,\n              description:\n                action.room.desc +\n                \"\\n\" +\n                \"You notice: \" +\n                \"TODO add examine stuff here\" + \n                \".\",\n              id: action.room.node_id\n            });\n            buffer.push(action);\n          } else {\n            buffer.push(action);\n          }\n\n          buffer.forEach(msg => appendMessage(msg));\n        });\n      }\n    },\n    [appendMessage, setPersona, setAgents, setLocation]\n  );\n\n  React.useEffect(() => {\n    websocket.current.onmessage = handleMessage;\n  }, [handleMessage]);\n\n  const submitMessage = React.useCallback(\n    txt => {\n      appendMessage({\n        caller: \"say\",\n        text: txt,\n        is_self: true,\n        actors: [persona.id]\n      });\n\n      const msg = JSON.stringify({ command: \"act\", data: txt });\n      return websocket.current.send(msg);\n    },\n    [websocket, appendMessage, persona]\n  );\n\n  if (!websocket.current) {\n    websocket.current = new WebSocket(url);\n\n    // websocket.current.onmessage = handleMessage;\n\n    websocket.current.onopen = () => {\n      console.log(\"opened\");\n      setConnected(true);\n    };\n\n    websocket.current.onerror = websocket.current.onclose = () => {\n      console.log(\"errored\");\n      setConnected(false);\n      setErrored(true);\n      websocket.current = null;\n    };\n  }\n\n  return {\n    isConnected,\n    messages,\n    submitMessage,\n    persona,\n    location,\n    isErrored,\n    agents\n  };\n}\n","import React from \"react\";\n\nexport default function Logo() {\n  return (\n    <div className=\"header\">\n      <img alt=\"logo\" src=\"/scribe.png\" />\n      <div>\n        <h1>LIGHT</h1>\n        <span>Learning in Interactive Games with Humans and Text</span>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Logo from \"./Logo\";\n\nfunction LoadingScreen() {\n  const [isTimedOut, setTimedOut] = React.useState(false);\n  const TIMEOUT_SECONDS = 10;\n\n  React.useEffect(() => {\n    if (!isTimedOut) {\n      const timer = setTimeout(() => {\n        setTimedOut(true);\n      }, TIMEOUT_SECONDS * 1000);\n      return () => clearTimeout(timer);\n    }\n  }, [isTimedOut, setTimedOut]);\n\n  return (\n    <div\n      style={{\n        height: \"100vh\",\n        width: \"100vw\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        flexDirection: \"column\"\n      }}\n    >\n      <div style={{ width: 500 }}>\n        <div style={{ width: 300 }}>\n          <Logo />\n        </div>\n        <div style={{ fontSize: 20, marginTop: 50, fontStyle: \"italic\" }}>\n          {isTimedOut ? (\n            <span>\n              It's been {TIMEOUT_SECONDS} seconds, there's likely a server\n              issue.\n            </span>\n          ) : (\n            <span>Hang tight. You are entering a new world...</span>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default LoadingScreen;\n","const DEV = {\n  host: \"http://localhost\",\n  hostname: \"localhost\",\n  port: \"35494\",\n};\n\nexport default DEV;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles.css\";\nimport \"react-tippy/dist/tippy.css\";\nimport \"emoji-mart/css/emoji-mart.css\";\n\nimport { Tooltip } from \"react-tippy\";\nimport { Picker, emojiIndex } from \"emoji-mart\";\nimport cx from \"classnames\";\nimport onClickOutside from \"react-onclickoutside\";\n\nimport { useWSDataSource } from \"./useWSDataSource\";\nimport Logo from \"./Logo\";\nimport LoadingScreen from \"./LoadingScreen\";\n\nimport { setCaretPosition } from \"./utils\";\n\nimport CONFIG from \"./config\";\n\nconst createWebSocketUrlFromBrowserUrl = url => {\n  const wsProtocol = url.protocol === \"https:\" ? \"wss\" : \"ws\";\n  const optionalServerHost = new URL(url).searchParams.get(\"server\");\n  if (optionalServerHost) {\n    console.log(\"Using user-provided server hostname:\", optionalServerHost);\n  }\n  const websocketURL =\n    wsProtocol + \"://\" + (optionalServerHost || CONFIG.hostname) + \":\" + CONFIG.port + \"/game/socket\";\n  return websocketURL;\n};\n\nconst getDataModelAddress = () => {\n  return new URL(window.location).searchParams.get(\"builder\");\n};\n\n// TODO: consider showing different agent's dialogues in\n// different colors\n//\n// const colors = [\n//   \"#edfff1\", //green,\n//   \"#fffded\", //yellow,\n//   \"#eee8ff\", // purple\n//   \"#e6efff\", //blue\n//   \"#ffe8eb\" //red\n// ];\n\nfunction Setting(props) {\n  return (\n    <div style={{ clear: \"both\", overflow: \"auto\" }}>\n      <div className=\"message type-setting\">\n        {props.text.split(\"\\n\").map((para, idx) => (\n          <p key={idx}>{para}</p>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nfunction Message({ text, caller, actor, isSelf, onReply }) {\n  const [isEditMode, setEditMode] = React.useState(false);\n\n  let classNames = \"message type-dialogue \";\n  if ([\"tell\", \"say\", \"whisper\"].includes(caller)) {\n    text = \"&ldquo;\" + text + \"&rdquo;\";\n    classNames = \"message type-dialogue \";\n  }\n  classNames += isSelf ? \"me\" : \"other\";\n\n  if (isEditMode) {\n    return (\n      <div className={classNames}>\n        <div className=\"agent\">\n          <span>{actor}</span>\n          {isSelf ? null : (\n            <React.Fragment>\n              <i className=\"fa fa-reply\" onClick={() => onReply(actor)} />{\" \"}\n              <i\n                className=\"fa fa-commenting-o \"\n                onClick={() => setEditMode(true)}\n              />\n            </React.Fragment>\n          )}\n        </div>\n        <div style={{ opacity: 0, height: 1, pointerEvents: \"none\" }}>\n          {text}\n        </div>\n        <input className=\"edit-message\" defaultValue={text} />\n        <button type=\"submit\" onClick={() => setEditMode(false)}>\n          Suggest edit\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className={classNames}>\n      <div className=\"agent\">\n        <span>{actor}</span>\n        {isSelf ? null : (\n          <React.Fragment>\n            <Tooltip title={`tell ${actor}...`} position=\"top\">\n              <i className=\"fa fa-reply\" onClick={() => onReply(actor)} />\n            </Tooltip>{\" \"}\n            <Tooltip\n              title={`Do you think something else should have been said instead? Provide feedback via an edit...`}\n              position=\"top\"\n            >\n              <i\n                className=\"fa fa-commenting-o \"\n                onClick={() => setEditMode(true)}\n              />\n            </Tooltip>\n          </React.Fragment>\n        )}\n      </div>\n      {text}\n    </div>\n  );\n}\n\nfunction Entry({ msg, onReply, agents, selfId }) {\n  if ([\"LookEvent\", \"GoEvent\", \"ExamineEvent\", \"text\"].includes(msg.caller) || msg.caller === null) {\n    return <Setting text={msg.text} />;\n  } else {\n    return (\n      <Message\n        text={msg.text}\n        isSelf={msg.is_self || msg.actors[0] === selfId}\n        actor={agents[msg.actors[0]]}\n        onReply={onReply}\n      />\n    );\n  }\n}\n\nfunction ConnectedApp() {\n  const wsUrl = React.useMemo(\n    () => createWebSocketUrlFromBrowserUrl(window.location),\n    []\n  );\n  const {\n    isErrored,\n    messages,\n    submitMessage,\n    persona,\n    location,\n    agents\n  } = useWSDataSource(wsUrl);\n\n  if (isErrored)\n    return (\n      <div style={{ textAlign: \"center\", marginTop: 30, fontSize: 30 }}>\n        Could not connect to the server.\n      </div>\n    );\n\n  if (messages.length === 0) {\n    return <LoadingScreen />;\n  }\n\n  return (\n    <Chat\n      messages={messages}\n      onSubmit={submitMessage}\n      persona={persona}\n      // persona={{ name: \"a cow\" }}\n      location={location}\n      agents={agents}\n    />\n  );\n}\nfunction Chat({ messages, onSubmit, persona, location, agents }) {\n  const [enteredText, setEnteredText] = React.useState(\"\");\n  const chatContainerRef = React.useRef(null);\n  const getAgentName = agent => (agents ? agents[agent] : agent);\n  const getEntityId = agent => agent.match(/\\d+$/)[0];\n  const dataModelHost = getDataModelAddress();\n\n  const scrollToBottom = React.useCallback(\n    () =>\n      setTimeout(() => {\n        if (chatContainerRef.current)\n          chatContainerRef.current.scrollTop =\n            chatContainerRef.current.scrollHeight;\n      }, 0),\n    [chatContainerRef]\n  );\n\n  React.useEffect(() => {\n    scrollToBottom();\n  }, [scrollToBottom, messages]);\n\n  const defaultEmoji = \"❓\";\n  const { presentAgents } = getLocationState(messages);\n  const [showEmojiPicker, setShowEmojiPicker] = React.useState(false);\n  const [selectedEmoji, setSelectedEmoji] = React.useState(defaultEmoji);\n\n  const chatInputRef = React.useRef();\n  React.useLayoutEffect(() => {\n    chatInputRef.current.focus();\n  }, []);\n\n  React.useEffect(() => {\n    if (persona === null || persona.name === null) return;\n    const skipWords = [\"a\", \"the\", \"an\", \"of\", \"with\", \"holding\"];\n    const tryPickEmojis = !persona\n      ? []\n      : persona.name\n          .split(\" \")\n          .filter(token => !!token)\n          .map(token => token.replace(/\\.$/, \"\"))\n          .filter(word => skipWords.indexOf(word.toLowerCase()) === -1)\n          .flatMap(term =>\n            emojiIndex.search(term).map(o => {\n              return o.native;\n            })\n          );\n\n    const autopickedEmoji =\n      tryPickEmojis.length > 0 ? tryPickEmojis[0] : defaultEmoji;\n    setSelectedEmoji(autopickedEmoji);\n  }, [persona, setSelectedEmoji]);\n\n  const setTextTellAgent = React.useCallback(\n    agent => {\n      const message = `tell ${agent} \"\"`;\n      setEnteredText(message);\n      setTimeout(\n        () => setCaretPosition(chatInputRef.current, message.length - 1),\n        0 /* 0s timeout to schedule this task to occur after the layout is updated */\n      );\n    },\n    [setEnteredText, chatInputRef]\n  );\n\n  // console.log(selectedEmoji);\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <Logo />\n        <div className=\"game-state\">\n          {persona ? (\n            <div className=\"persona\">\n              <div\n                className={cx(\"icon\", { editing: showEmojiPicker })}\n                style={{ cursor: \"pointer\" }}\n              >\n                <div className=\"overlay\">edit</div>\n                <span\n                  role=\"img\"\n                  aria-label=\"avatar\"\n                  onClick={() => setShowEmojiPicker(true)}\n                >\n                  {selectedEmoji}\n                </span>\n                {showEmojiPicker ? (\n                  <div\n                    style={{\n                      position: \"absolute\",\n                      top: \"80px\",\n                      left: \"50%\",\n                      transform: \"translateX(-50%)\",\n                      zIndex: 999\n                    }}\n                  >\n                    <BlurClosingPicker\n                      autoFocus={true}\n                      onBlur={() => setShowEmojiPicker(false)}\n                      onSelect={emoji => {\n                        // TODO: Send the selected emoji to the back-end so we can keep record it\n                        setSelectedEmoji(emoji.native);\n                        setShowEmojiPicker(false);\n                      }}\n                    />\n                  </div>\n                ) : null}\n              </div>\n              <h3>You are {persona.name}</h3>\n              {persona.description}\n              {dataModelHost && (\n                <Tooltip\n                  style={{ position: \"absolute\", bottom: 0, right: 5 }}\n                  title={`suggest changes for ${persona.name}`}\n                  position=\"bottom\"\n                >\n                  <a\n                    className=\"data-model-deep-link\"\n                    href={`${dataModelHost}/edit/${getEntityId(persona.id)}`}\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\"\n                  >\n                    <i className=\"fa fa-edit\" aria-hidden=\"true\" />\n                  </a>\n                </Tooltip>\n              )}\n            </div>\n          ) : null}\n          {location ? (\n            <div className=\"location\">\n              <h3>{location.name}</h3>\n              {location.description.split(\"\\n\").map((para, idx) => (\n                <p key={idx}>{para}</p>\n              ))}\n              {dataModelHost && (\n                <Tooltip\n                  style={{ position: \"absolute\", bottom: 0, right: 5 }}\n                  title={`suggest changes for ${\n                    location.name.split(\" the \")[1]\n                  }`}\n                  position=\"bottom\"\n                >\n                  <a\n                    className=\"data-model-deep-link\"\n                    href={`${dataModelHost}/edit/${getEntityId(location.id)}`}\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\"\n                  >\n                    <i className=\"fa fa-edit\" aria-hidden=\"true\" />\n                  </a>\n                </Tooltip>\n              )}\n            </div>\n          ) : null}\n        </div>\n        {/* <Map /> */}\n        {/* <div className=\"app-controls\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={isAdminMode}\n              onChange={e => setAdminMode(!isAdminMode)}\n            />{\" \"}\n            Admin Mode\n          </label>\n        </div> */}\n      </div>\n      <div className=\"chat-wrapper\">\n        <div className=\"chat\" ref={chatContainerRef}>\n          <div className=\"chatlog\">\n            {messages.map((msg, idx) => (\n              <Entry\n                key={idx}\n                msg={msg}\n                agents={agents}\n                onReply={agent => setTextTellAgent(agent)}\n                selfId={persona.id}\n              />\n            ))}\n          </div>\n        </div>\n        <div className=\"controls\">\n          <form\n            style={{ display: \"flex\" }}\n            onSubmit={e => {\n              e.preventDefault();\n\n              if (!!enteredText) {\n                onSubmit(enteredText);\n                setEnteredText(\"\");\n                scrollToBottom();\n              }\n            }}\n          >\n            <input\n              ref={chatInputRef}\n              value={enteredText}\n              onChange={e => setEnteredText(e.target.value)}\n              onKeyPress={e => {\n                if (e.key === \"Enter\" && e.shiftKey) {\n                  const prefix = e.target.value.startsWith('\"') ? \"\" : '\"';\n                  const suffix = e.target.value.endsWith('\"') ? \"\" : '\"';\n                  setEnteredText(prefix + e.target.value + suffix);\n                }\n              }}\n              className=\"chatbox\"\n              placeholder=\"Enter text to interact with the world here...\"\n            />\n          </form>\n          <div className=\"actions\">\n            <div style={{ float: \"left\" }}>\n              {/* {location ? <span>{location.name} &mdash; </span> : null} */}\n              {presentAgents\n                .filter(id => id !== persona.id) // only show users other than self\n                .map(agent => {\n                  const agentName = getAgentName(agent);\n                  const agentId = getEntityId(agent);\n                  return (\n                    <span\n                      key={agentName}\n                      style={{\n                        backgroundColor: \"#eee\",\n                        borderRadius: 3,\n                        padding: \"1px 3px\",\n                        marginRight: 5\n                      }}\n                    >\n                      <span\n                        onClick={() => {\n                          setTextTellAgent(agentName);\n                        }}\n                      >\n                        {agentName}{\" \"}\n                        <Tooltip\n                          title={`tell ${agentName}...`}\n                          position=\"bottom\"\n                        >\n                          <i className=\"fa fa-comment-o\" aria-hidden=\"true\" />\n                        </Tooltip>\n                      </span>\n                      {dataModelHost && (\n                        <>\n                          {\" \"}\n                          <Tooltip\n                            title={`suggest changes for ${agentName}`}\n                            position=\"bottom\"\n                          >\n                            <a\n                              className=\"data-model-deep-link\"\n                              href={`${dataModelHost}/edit/${agentId}`}\n                              rel=\"noopener noreferrer\"\n                              target=\"_blank\"\n                            >\n                              <i className=\"fa fa-edit\" aria-hidden=\"true\" />\n                            </a>\n                          </Tooltip>\n                        </>\n                      )}\n                    </span>\n                  );\n                })}\n            </div>\n\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                float: \"right\"\n              }}\n            >\n              <span\n                className={cx(\"hint-message\", \"fadeHidden\", {\n                  fadeShow: enteredText.length > 0 && enteredText[0] === '\"'\n                })}\n              >\n                Tip: Hit Shift+Enter to auto-wrap your entry in quotes\n              </span>\n            </div>\n\n            {[\n              // \"act\",\n              // \"say\",\n              // \"tell\"\n              // \"whisper\",\n              // \"applaud\",\n              // \"blush\",\n              // \"cry\",\n              // \"dance\",\n              // \"frown\",\n              // \"gasp\",\n              // \"grin\",\n              // \"groan\",\n              // \"growl\",\n              // \"laugh\",\n              // \"nod\",\n              // \"nudge\",\n              // \"ponder\",\n              // \"pout\",\n              // \"scream\",\n              // \"shrug\",\n              // \"sigh\",\n              // \"smile\",\n              // \"stare\",\n              // \"wave\",\n              // \"wink\",\n              // \"yawn\"\n            ].map(action => (\n              <span className=\"action\" key={action}>\n                {action}\n              </span>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst EmojiPicker = ({ onBlur, ...props }) => {\n  EmojiPicker.handleClickOutside = () => onBlur();\n  return <Picker {...props} />;\n};\nconst BlurClosingPicker = onClickOutside(EmojiPicker, {\n  handleClickOutside: () => EmojiPicker.handleClickOutside\n});\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<ConnectedApp />, rootElement);\n\nfunction getLocationState(messages) {\n  var valid_messages = messages.filter(\n    m => m.is_self !== true && m.caller !== null\n  );\n  if (valid_messages.length === 0) return [null, []];\n  var lastMessage = valid_messages[valid_messages.length - 1];\n\n  return {\n    currentRoom: lastMessage.room_id,\n    presentAgents: lastMessage.present_agent_ids\n  };\n}\n","export function zipToObject(keys, values) {\n  return keys.reduce((obj, k, i) => ({ ...obj, [k]: values[i] }), {});\n}\n\nexport function setCaretPosition(elem, caretPos) {\n  /* inspired from: https://stackoverflow.com/a/512542 */\n  if (elem != null) {\n    if (elem.createTextRange) {\n      var range = elem.createTextRange();\n      range.move(\"character\", caretPos);\n      range.select();\n    } else {\n      if (elem.selectionStart) {\n        elem.focus();\n        elem.setSelectionRange(caretPos, caretPos);\n      } else elem.focus();\n    }\n  }\n}\n"],"sourceRoot":""}